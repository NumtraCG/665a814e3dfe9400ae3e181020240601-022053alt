[{"_id": "665a814e3dfe9400ae3e1814", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/GroceryDataset.csv", "in": ["665a816e3dfe9400ae3e183c"], "out": ["665a814e3dfe9400ae3e1815"], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "aLT_AutoFE", "dataPercentage": "10", "comment": "", "pipeline_id": "665a814e3dfe9400ae3e1810", "sub_type": "Feature", "stage_type": "transformation", "stage_attributes": {"AutoFE": {"autoFE_flag": true, "dataPercentage": "10", "sampledata": [{"Sub Category": "Bakery & Desserts", "Price": "$56.99 ", "Discount": "No Discount", "Rating": "Rated 4.3 out of 5 stars based on 265 reviews.", "Title": "David\u2019s Cookies Mile High Peanut Butter Cake, 6.8 lbs (14 Servings)", "Currency": "$", "Feature": "\"\"\"10\"\"\"\" Peanut Butter Cake", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 69.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 28.0, "Title_stringindexer_transform": 12.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 74.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Certified Kosher OU-D", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 7.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "14 Servings\"", "Price": "A cake the dessert epicure will die for!Our Top Selling Cake! Fudge brownie base, layered in velvety smooth peanut butter mousse, rich chocolate cake, topped with brownie chunks, handful of peanut butter chips, drizzled in fudge. This cake is the thoughtful gift idea that\u2019s perfect for family, friends, coworkers, or to anyone you care about in your life. -\tGenerously sized precut slices, a cake lover\u2019s dreams come true! Includes:Measures 10\u201d diameterWeighs in at 6.8 lbs.14 servings OU-D certified, the most trusted kosher certification in the U.S.All natural with no added preservativesSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 327.0, "Price_stringindexer_transform": 38.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$159.99 ", "Discount": "No Discount", "Rating": "Rated 5 out of 5 stars based on 1 reviews.", "Title": "\"The Cake Bake Shop 8\"\" Round Carrot Cake (16-22 Servings)\"", "Currency": "$", "Feature": "Spiced Carrot Cake with Cream Cheese Frosting   Silk Cherry Blossom Flowers (Not Edible)   No Nuts or Raisins   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "Product Description": "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn\u2019s moist and delicious carrot cake is made with hand peeled and freshly grated carrots. Perfectly spiced with just the right amount of cinnamon, this cake has no nuts and no raisins. The three layers of spiced carrot cake are then filled and frosted with Gwendolyn's signature homemade cream cheese frosting. Topped with decorative pink silk cherry blossom flowers.   Features:   Flavor: Spiced Carrot Cake", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 13.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 4.0, "Title_stringindexer_transform": 91.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 27.0, "Product Description_stringindexer_transform": 69.0}, {"Sub Category": "Cake Filling: Cream Cheese Frosting", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 305.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Cake Frosting: Cream Cheese Frosting", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 167.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Topped with Pink Silk Cherry Blossom Flowers (cherry blossom flowers are not edible", "Price": " please do not consume", "Discount": " remove before eating)", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 109.0, "Price_stringindexer_transform": 57.0, "Discount_stringindexer_transform": 23.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Dimensions: 9\u201d diameter", "Price": " 7\u201d high", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 10.0, "Price_stringindexer_transform": 14.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Serves 16-22", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 3.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Each Cake Arrives With It\u2019s Own Cake Care Card", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 4.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Allergens: Contains Wheat", "Price": " Milk", "Discount": " Soy", "Rating": " Egg", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 6.0, "Price_stringindexer_transform": 10.0, "Discount_stringindexer_transform": 2.0, "Rating_stringindexer_transform": 1.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ships Frozen\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 5.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$44.99 ", "Discount": "No Discount", "Rating": "Rated 4.1 out of 5 stars based on 441 reviews.", "Title": "St Michel Madeleine, Classic French Sponge Cake 100 - count", "Currency": "$", "Feature": "100 count", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 120.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 56.0, "Title_stringindexer_transform": 80.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 85.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Individually wrapped", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 282.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Made in and Imported from France", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 36.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Free-range eggs", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 348.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Non-GMO ingredients\"", "Price": "Moist and buttery sponge cakes with the traditional European madeleine flavor of almond. The Classic Madeleine is baked in the shape of seashell with ridges on one side and a \u201cbelly\u201d on the other. Each madeleine is individually-wrapped for portion control and convenience.The Origin of the Madeleine: 18th century King Stanislas 1st, Duke of Lorraine During a festive dinner party in Commercy, France, the king\u2019s chef abruptly left the kitchen. Seeking a solution to feed his guests dessert, a servant girl in the kitchen offered to make her family\u2019s traditional pastry. The king enjoyed the little cake so much that he named it after the servant: Madeleine. Baked with non-GMO ingredients and free-range eggs. No preservatives, palm oil, hydrogenated oil or colorings. Baked with love in France.We all have our Madeleine moment:Enjoy everyday for breakfast, snack or dessert (Just as the French do!)Pack in lunches or backpacks for schoolServe during business, book club or PTA meetingsCut in half and fill with jelly or chocolate hazelnut spreadDecorate cakes or cupcakes with classic seashell shapeIncludes:100 countIndividually wrappedFree-range eggsNon-GMO ingredients", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 278.0, "Price_stringindexer_transform": 67.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$39.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 9459 reviews.", "Title": "David's Cookies Butter Pecan Meltaways 32 oz, 2-pack", "Currency": "$", "Feature": "Butter Pecan Meltaways", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 7.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 24.0, "Title_stringindexer_transform": 89.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 22.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "32 oz 2-Pack", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 312.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No Preservatives", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 314.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Certified Kosher OU-D", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 7.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Contains Nuts\"", "Price": "These delectable butter pecan meltaways are the perfect snack or dessert for the whole family. The treats are made with pure creamy butter and large pecan chunks and have just the right amount of powdered sugar to satisfy your sweet tooth.Includes:Includes: 2 Tins (32 oz. each)Contains nutsNo preservativesEnjoy with your morning coffee or teaCookies can be stored at room temperature for up to 60 daysEach tin contains approximately 64 cookiesKosher OU-DSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 255.0, "Price_stringindexer_transform": 91.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 758 reviews.", "Title": "David\u2019s Cookies Premier Chocolate Cake, 7.2 lbs (Serves 14)", "Currency": "$", "Feature": "\"\"\"10\"\" Four Layer Chocolate Cake", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 1.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 51.0, "Title_stringindexer_transform": 18.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 88.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Certified Kosher OU-D", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 7.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Serves 14\"", "Price": "A cake the dessert epicure will die for!To the ultimate chocolate lover - We've baked your dream cake! Four split layers of our rich chocolate cake, filled with a smooth milk chocolate mousse, finished in chocolate ganache & covered in dark chocolate bark pieces. This cake is the thoughtful gift idea that\u2019s perfect for family, friends, coworkers, or to anyone you care about in your life. Generously sized precut slices, A cake lover\u2019s dreams come true! Includes:1 - 10\u201d Premier Chocolate Overload CakeWeighs in at 7.2 lbs.14 Servings OU-D certified, the most trusted kosher certification in the U.S.All natural with no added preservativesSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 290.0, "Price_stringindexer_transform": 64.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 4.4 out of 5 stars based on 369 reviews.", "Title": "David's Cookies Mango & Strawberry Cheesecake 2-count (28 Slices Total)", "Currency": "$", "Feature": "2-count", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 1.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 14.0, "Title_stringindexer_transform": 88.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 2.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Strawberry Cheesecake", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 80.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Mango Cheesecake", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 350.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Kosher OU-D certified\"", "Price": "\"Strawberry Cheesecake: There's only one way to make our cheesecakes taste even better - add fruit! We've topped off our plain New York cheesecake with a generous helping of strawberry preserves for a taste that's to die for. Each slice is packed with loads of creamy filling, graham crust and sweet strawberries.Mango Cheesecake: We've done it again with our Mango Cheesecake. It's a 10\"\" cake with swirls of mango on top of a creamy cheesecake and delicious crust. This mix of cream cheese", "Discount": " and mango will take you on a tropical journey of satisfaction!Includes:2-pack Includes: 1 Strawberry Cheesecake and 1 Mango CheesecakeKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachShips in Cooler with Dry Ice to Maintain Quality & FreshnessMade in the USASome of our products may contain nuts. Our facility is NOT a nut-free facility", "Rating": " and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: If not being consumed immediately upon arrival", "Title": " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.\"", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 21.0, "Price_stringindexer_transform": 80.0, "Discount_stringindexer_transform": 42.0, "Rating_stringindexer_transform": 36.0, "Title_stringindexer_transform": 3.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$74.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 2241 reviews.", "Title": "La Grande Galette French Butter Cookies, 1.3 lb, 6-pack", "Currency": "$", "Feature": "1.3 lb, 6-count", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 33.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 70.0, "Title_stringindexer_transform": 10.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 42.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Baked in", "Price": " and Imported from", "Discount": " France", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 241.0, "Price_stringindexer_transform": 119.0, "Discount_stringindexer_transform": 20.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Non-GMO", "Price": " No Trans Fat", "Discount": " No Hydrogenated Oil   Palm Oil Free\"", "Rating": "Once upon a time in the French coastal town of St Michel Chef-Chef, a Chef P\u00e2tissier Grellier was making delicious round butter cookies he called Galettes from his secret recipe that he baked with love in his oven. His Galettes were so delicious and popular that one day, his wife Constance had a genius idea: \u201cWhy not sell the cookies to the beachgoers visiting from Paris?\u201d The cookies were a huge hit and the French Galette was born.   This is the St Michel Bakery started in 1905. Since then, this family owned company brings you the very best of French butter cookies and other French pastry delights.   La Grande Galette is inspired from an original recipe from 1905 in the tradition of French Cookie Baking. St Michel French Butter Cookies are made only from selected wholesome ingredients like free-range eggs our specialty Gu\u00e9rande Sea Salt.   No Coloring, no preservatives, no hydrogenated fat and no palm oil guaranteed.   Includes:   6 Pack Total - Each carton holds 1.3LB (600g) per pack   Each carton holds 12 individual Pouches of 3 cookies each for freshness per pack. Total 36 cookies per carton.", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 146.0, "Price_stringindexer_transform": 86.0, "Discount_stringindexer_transform": 36.0, "Rating_stringindexer_transform": 47.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "French traditional style Butter Cookies accented with sea salt", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 347.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Large round and crispy cookies stamped with the mark of St Michel\u2019s heritage\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 357.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 4.4 out of 5 stars based on 232 reviews.", "Title": "David's Cookies No Sugar Added Cheesecake & Marble Truffle Cake, 2-pack (28 Slices Total)", "Currency": "$", "Feature": "2-count", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 1.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 66.0, "Title_stringindexer_transform": 72.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 2.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No Sugar Added", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 317.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Kosher OU-Dairy\"", "Price": "Creamy Dreamy:This smooth creamy cheesecake has no sugar added and no flour. It\u2019s hard to believe we\u2019ve taken that out, and what remains is a light luscious dessert with no unpleasant aftertaste.Marble Truffle:A layer of our rich, delicious, flourless, no-sugar-added (NSA) chocolate truffle cake is topped with a layer of our wonderful no-sugar-added cheesecake, then swirled with a bit of chocolate on top. The combination results in a flourless cake that is the perfect blend of rich sinful chocolate balanced with cool creamy cheesecake. Perfect for chocolate lovers as well as cheesecake lovers.Includes:1 - Creamy Dreamy Cheesecake 1- Marble Truffle CheesecakeEach Cheesecake serves approximately 14 people28 slices totalWeight: Approximately 3 lbs. 5 oz. EachShips in Cooler with Dry Ice to Maintain Quality & FreshnessMade in the USAKosher OU-DairySome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: If not being consumed immediately upon arrival, cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 235.0, "Price_stringindexer_transform": 32.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$29.99 ", "Discount": "No Discount", "Rating": "Rated 4.4 out of 5 stars based on 1679 reviews.", "Title": "David's Cookies Brownie and Cookie Combo Pack", "Currency": "$", "Feature": "6 Rocky Road Brownies", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 24.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 49.0, "Title_stringindexer_transform": 105.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 96.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "12 Chocoloate Chunk Cookies", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 239.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Kosher Dairy OUD\"", "Price": "Due to the perishable nature of this product orders will only ship on Monday and Tuesday for Thursday and Friday delivery. Orders will not ship over the weekend. Orders placed after 9 am PST on Tuesday will not ship until the following Monday.David\u2019s Cookies has perfected the art of the chocolate chunk cookie by using only the best ingredients. Our recipe calls for fresh eggs, milk, velvety butter, and loads of big Chocolate chunks to create the most irresistible cookies on this planet.Chocolate Chunk:Approximately 12 cookies/servingsKosher Dairy OUDCan be frozen for up to 6 months Brownie Tray:Fudgy chocolate brownie made with pure melted chocolate. Filled with walnuts, chocolate chips, peanut butter chips and topped with chocolate ganache drizzle. Approximately 6 servingsKosher Dairy OUDCan be frozen for up to 6 monthsSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 253.0, "Price_stringindexer_transform": 75.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$159.99 ", "Discount": "No Discount", "Rating": "Rated 5 out of 5 stars based on 2 reviews.", "Title": "\"The Cake Bake Shop 8\"\" Round Chocolate Cake (16-22 Servings)\"", "Currency": "$", "Feature": "3 Layers of French Valrhona Chocolate Cake   Mousse Malted Cream & Fudge Frosting   Topped with Fleur de Sel & Does Not Come with Flower   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "Product Description": "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Peony flower and plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn's famous Earl's Court Chocolate Cake is the most popular cake in her bakeries. This decadent chocolate cake is three layers of French Valrhona chocolate cake, filled with silky Callebaut Belgian chocolate ganache and mousse-like chocolate malted cream. Frosted with her signature dark fudge Callebaut frosting and topped with a sprinkling of Fleur de Sel Sea salt that comes from the \u00cele de R\u00e9 in the South of France. This salt is only harvested three months out of the year and is the perfect topping for her cake.   Features:   Flavor: Valrhona Chocolate Cake", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 13.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 15.0, "Title_stringindexer_transform": 47.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 79.0, "Product Description_stringindexer_transform": 28.0}, {"Sub Category": "Cake Filling: Chocolate Ganache and Mousse Malted Cream", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 72.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Cake Frosting: Fudge Frosting topped with Fleur de Sel", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 275.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Dimensions: 9\u201d diameter", "Price": " 7\u201d high", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 10.0, "Price_stringindexer_transform": 14.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Serves 16-22", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 3.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Each Cake Arrives With It\u2019s Own Cake Care Card", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 4.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Allergens: Contains Wheat", "Price": " Milk", "Discount": " Soy", "Rating": " Egg", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 6.0, "Price_stringindexer_transform": 10.0, "Discount_stringindexer_transform": 2.0, "Rating_stringindexer_transform": 1.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ships Frozen\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 5.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$62.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 357 reviews.", "Title": "\"David's Cookies 10\"\" Rainbow Cake  (12 Servings)\"", "Currency": "$", "Feature": "\"10\"\" Rainbow Cake", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 123.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 8.0, "Title_stringindexer_transform": 55.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 25.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Kosher OU-D certified", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 22.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Serves approximately 12 people", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 18.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Weight: 7 lbs.", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 24.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ships in Cooler with Dry Ice to Maintain Quality & Freshness\"", "Price": "A cake the dessert epicure will die for! Five bright and colorful layers of this delightful cake are perfect for celebrating any happy or festive occasion! We\u2019ve decorated this dessert with a lightly flavored vanilla icing to keep this colorful surprise a secret until you cut the first slice.", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 222.0, "Price_stringindexer_transform": 95.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Perfect for celebrating any happy or festive occasion -for kids and adults alike!   Features:   1 - 10 in Rainbow Cake", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 148.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Kosher OU-D certified", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 22.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Serves approximately 12 people", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 18.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Diameter: 10\"\" each", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 119.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Weight: 7 lbs.", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 24.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ships in Cooler with Dry Ice to Maintain Quality & Freshness", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 157.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Made in the USA   Some of our products may contain nuts. Our facility is NOT a nut-free facility", "Price": " and as a result it is possible that any product may have come in contact with nut or nut oils   Important Handling Instructions:", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 29.0, "Price_stringindexer_transform": 19.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "If not being consumed immediately upon arrival", "Price": " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.\"", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 2.0, "Price_stringindexer_transform": 117.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$299.99 ", "Discount": "No Discount", "Rating": "Rated 3 out of 5 stars based on 1 reviews.", "Title": "The Cake Bake Shop 2 Tier Special Occasion Cake (16-22 Servings)", "Currency": "$", "Feature": "Peony Flower & Plate Not Included   Flavor: Lemon Cake with Pearl White Pixie Glitter\u00ae   Cake Filling: Raspberry Jam with Lemon Curd & Cake Frosting: Lemon Buttercream   Bottom Tier: 9\u201d Diameter, 3 1/2\u201d High & Top Tier: 7\u201d Diameter, 3 1/2\u201d High   16-22 Servings", "Product Description": "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Peony flower and plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn's Two Tier Special Occasion Cake is beautiful, delicious and perfect for any special occasion. Ideal for weddings, anniversaries, baby showers and other special celebrations, this two tier cake has two three-layer cakes. The bottom tier is 8\"", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 63.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 19.0, "Title_stringindexer_transform": 44.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 89.0, "Product Description_stringindexer_transform": 65.0}, {"Sub Category": "Cake Filling: Raspberry Jam with Lemon Curd", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 264.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Cake Frosting: Lemon Buttercream", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 250.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bottom Tier: 9\u201d Diameter", "Price": " 3 1/2\u201d High", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 160.0, "Price_stringindexer_transform": 22.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Top Tier: 7\u201d Diameter", "Price": " 3 1/2\u201d High", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 221.0, "Price_stringindexer_transform": 22.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Serves 16-22", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 3.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Each Cake Arrives With It\u2019s Own Cake Care Card", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 4.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Allergens: Contains Wheat", "Price": " Milk", "Discount": " Soy", "Rating": " Egg", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 6.0, "Price_stringindexer_transform": 10.0, "Discount_stringindexer_transform": 2.0, "Rating_stringindexer_transform": 1.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ships Frozen\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 5.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$54.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 273 reviews.", "Title": "David's Cookies 90-piece Gourmet Chocolate Chunk Frozen Cookie Dough", "Currency": "$", "Feature": "90 Pieces Frozen Gourmet Chocolate Cookie Dough", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 15.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 60.0, "Title_stringindexer_transform": 67.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 28.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bake and Serve", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 349.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No Added Preservatives", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 352.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Kosher\"", "Price": "There is nothing like eating a warm just baked cookie right from your own oven. Featuring David\u2019s Cookies world famous Preformed Gourmet Chocolate Chunk Cookie Dough made with pure, fresh ingredients like milk, flour, sugar, eggs and butter. Our preformed Chocolate Chunk cookie dough makes baking cookies fun and easier than ever. It's a simple One-Step process: put the sheet in the oven, bake and you're done! Features:Includes 90 Pieces of 1.5 oz Preformed Gourmet Chocolate Chunk Frozen Cookie DoughApprox. 8.5 pounds of cookie doughNo Added PreservativesBake and ServeShips in Cooler with Dry Ice to Maintain Quality & FreshnessKosher OU-D CertifiedSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils.Important Handling Instructions: Freeze for up to six months in a freezer safe container.Baking Instructions: Preheat oven to 350\uf0b0 degrees F. (Keep dough frozen until ready to use). Place cookies on ungreased baking sheet at least 3\u201d apart. Bake until slightly golden brown, approximately 12-14 minutes. Let Cool.", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 23.0, "Price_stringindexer_transform": 43.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$54.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 369 reviews.", "Title": "David's Cookies Chocolate Fudge Birthday Cake, 3.75 lbs.  Includes Party Pack (16 Servings)", "Currency": "$", "Feature": "10 inch Chocolate Fudge Birthday Cake", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 15.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 18.0, "Title_stringindexer_transform": 74.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 78.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Fudgy Filling and Ganache Frosting", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 204.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Certified Kosher OU-D", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 7.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Serves 16\"", "Price": "\"It's not just the birthday girl or boy that will be smiling when they enjoy David's Cookies 10\"\" Chocolate Birthday Cake. From the moist dark chocolate with a fudgy filling to the candy confetti", "Discount": " it's sugary heaven from top to bottom! Moist and rich", "Rating": " this", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 249.0, "Price_stringindexer_transform": 111.0, "Discount_stringindexer_transform": 11.0, "Rating_stringindexer_transform": 30.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Decedent cake is simply irresistible. Chocolate cake with Hand decorated", "Price": " \"\"Happy Birthday\"\" is written in swirls of pastel colors and is playful enough to get any party started. Simple to serve", "Discount": " your cake is ready to eat once thawed. Includes plates", "Rating": " forks", "Title": " napkins", "Currency": " candles and confetti. A party in a box!   Features:   10\"\" Hand-decorated Chocolate Fudge Birthday Cake", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 356.0, "Price_stringindexer_transform": 60.0, "Discount_stringindexer_transform": 8.0, "Rating_stringindexer_transform": 41.0, "Title_stringindexer_transform": 24.0, "Currency_stringindexer_transform": 4.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No added preservatives", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 92.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Fudgy filling and ganache frosting   This cake serves. (Approximately) 16 people", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 323.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Weight: 3.75 lbs..", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 229.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "OU-D certified", "Price": " the most respected kosher certification", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 197.0, "Price_stringindexer_transform": 92.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Made in the USA   Some of our products may contain nuts. Our facility is NOT a nut-free facility", "Price": " and as a result it is possible that any product may have come in contact with nut or nut oils   Important Handling Instructions:", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 29.0, "Price_stringindexer_transform": 19.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "If not being consumed immediately upon arrival", "Price": " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 1 week.\"", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 2.0, "Price_stringindexer_transform": 112.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$89.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 133 reviews.", "Title": "Ferrara\u2019s Bakery New York Cheesecake 2-pack", "Currency": "$", "Feature": "8 inch New York Cheesecake 2 pack   Each Cake services 10-12 people", "Product Description": "Ferrara's Bakery of Little Italy in New York CityFerrara\u2019s specialty NY cheesecake is smooth and creamy with a classic graham cracker crust. Made with the perfect balance of 100% Philadelphia brand cream cheese and sour cream. Ferrara\u2019s NY cheesecake is creamy without being heavy and melts in your mouth.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little. 8 inch New York Cheesecake 2 pack Each Cake services 10-12 peopleEach cake can be refrigerated for up to 4 days (preferably in an airtight container) or frozen for up to 6 months. Defrost in the refrigerator one day in advance, or at room temperature for 3 hours.PRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENTCake plate and Cake stand are not included.", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 2.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 33.0, "Title_stringindexer_transform": 56.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 73.0, "Product Description_stringindexer_transform": 44.0}, {"Sub Category": "Bakery & Desserts", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 452 reviews.", "Title": "David\u2019s Cookies Variety Cheesecakes, 2-pack (28 Slices Total)", "Currency": "$", "Feature": "\"\"\"10\"\"\"\" Cheesecakes", "Product Description": " 2-count", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 1.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 69.0, "Title_stringindexer_transform": 97.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 99.0, "Product Description_stringindexer_transform": 32.0}, {"Sub Category": "1 Turtle Style", "Price": " Chocolate", "Discount": " Caramel", "Rating": " Pecan", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 54.0, "Price_stringindexer_transform": 77.0, "Discount_stringindexer_transform": 35.0, "Rating_stringindexer_transform": 44.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "1 Triple Chocolate", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 306.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Kosher OU-D Certified", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 175.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Serves 28\"", "Price": "\"We've done it again with our Turtle Cheesecake made from a recipe straight out of Brooklyn. It's a 10\"\" cake with clumps of chewy pecans drenched in a coating of caramel on top of a creamy cheesecake. This mix of cream cheese", "Discount": " nuts and caramel is a true taste excursion. For our Triple Chocolate Cheesecake we\u2019ve melted milk chocolate on top of a creamy chocolate cheesecake center and set the whole confection on top of a layer of Devil\u2019s food cake. This exquisite dessert is the perfect choice for any gourmet chocolate lover.Features:2-pack Includes: 1 Chocolate Carmel Pecan", "Rating": " 1 Triple chocolateTrans fat freeContains PecansKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachMade in the USAImportant Handling Instructions:If not being consumed immediately upon arrival", "Title": " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.\"", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 91.0, "Price_stringindexer_transform": 56.0, "Discount_stringindexer_transform": 32.0, "Rating_stringindexer_transform": 71.0, "Title_stringindexer_transform": 3.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$89.99 ", "Discount": "No Discount", "Rating": "No Reviews", "Title": "Classic Cake Tiramisu Quarter Sheet Cake (14 Pre-Cut Total Slices, 4.57 Oz. Per Slice, 4 Lbs. Total Box)", "Currency": "$", "Feature": "Quarter Sheet Cake (14 - 4.57 Oz Pre-Cut Slices Total)   Layers of Ladyfingers Soaked in Coffee Syrup   Filled with Vanilla Mascarpone Cheese Mousse", "Product Description": "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. While everyone\u2019s palette may differ, our Italian-inspired Tiramisu is a true customer favorite. Layers of Ladyfingers soaked in Coffee Syrup then filled with Vanilla Mascarpone Cheese Mousse and topped with a dusting of rich cocoa powder will whisk you away to Italy without taking flight. Whether you prefer with a cup of Espresso or your favorite after dinner cordial, our Tiramisu is the perfect accompaniment.   Includes:   Quarter Sheet Cake (14 - 4.57 Oz Pre-Cut Slices Total)", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 2.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 2.0, "Title_stringindexer_transform": 73.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 61.0, "Product Description_stringindexer_transform": 14.0}, {"Sub Category": "Layers of Ladyfingers Soaked in Coffee Syrup", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 166.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Filled with Vanilla Mascarpone Cheese Mousse\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 83.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$49.99 ", "Discount": "No Discount", "Rating": "Rated 4.2 out of 5 stars based on 85 reviews.", "Title": "Mary Macleod's Gluten Free Shortbread Cookies Mixed Assortment 8-Pack ", "Currency": "$", "Feature": "Gluten Free Chocolate Crunch Shortbread 4-boxes   Gluten Free The Classic Shortbread - 4 boxes", "Product Description": "Shortbread is a right, not a privilege. And those who eat gluten-free should be no exception. That\u2019s why the bold bakers at Mary Macleod\u2019s Shortbread stopped at nothing on their quest to create gluten-free shortbread that rivals their original recipes.The gluten-free getting is good with this multipack of eight peaked boxes, each holding six all-butter shortbread cookies that can make any gluten glutton question their life choices. Each multipack contains four boxes of GF Classic Shortbread and four boxes of GF Chocolate Crunch so you can share the love (if you\u2019re feeling generous).Gluten Free The Classic: Gluten-free glory is yours with these light, crispy butter cookies crafted with premium almond and coconut flours. It only took about 117 tries to get the recipe just right, and it was 117% worth it.Gluten Free Chocolate Crunch: A crowning chocolate chunk atop buttery shortbread with almond and coconut flours. It\u2019s our signature cookie, now deliciously gluten free. Warning: they tend to go fast, but we promise we\u2019ll bake more.About Mary's legacy, we continue to bake authentic all-butter shortbread cookies from our family recipes. Our dedicated bakers use top quality ingredients and follow artisan small-batch methods. The result is unforgettably delicious cookies.Includes:Mary Macleod\u2019s Shortbread Multipack of 8 Blue Peaked Boxes in a Gluten-Free Mixed Assortment.Gluten Free Chocolate Crunch Shortbread 4-boxesGluten Free The Classic Shortbread - 4 boxesEach elegant box contains 6 handcrafted shortbread cookies", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 21.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 6.0, "Title_stringindexer_transform": 16.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 63.0, "Product Description_stringindexer_transform": 10.0}, {"Sub Category": "Bakery & Desserts", "Price": "$159.99 ", "Discount": "No Discount", "Rating": "Rated 1.5 out of 5 stars based on 2 reviews.", "Title": "\"The Cake Bake Shop 8\"\" Round Pixie Fetti Cake (16-22 Servings)\"", "Currency": "$", "Feature": "Almond Flavored Cake with Pixie Fetti\u00ae Confetti   Almond Flavored Buttercream   Topped with Pastel Pixie Fetti\u00ae Confetti   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "Product Description": "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. The Cake Bake Shop's Pixie Fetti\u00ae Birthday Cake has three layers of fluffy white vanilla bean cake with a hint of almond flavor. Pixie Fetti\u00ae is gently folded into each layer and baked. Each layer is filled and frosted with a lightly flavored almond buttercream. The cake is topped with a piped decorative border and the center is filled with Gwendolyn's custom blend of pastel Pixie Fetti\u00ae confetti. This fun, celebratory birthday cake is perfect for any party.   Features:   Flavor: Almond Vanilla Bean Cake", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 13.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 63.0, "Title_stringindexer_transform": 17.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 51.0, "Product Description_stringindexer_transform": 47.0}, {"Sub Category": "Almond Flavored Cake with Pixie Fetti\u00ae Confetti", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 124.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Cake Filling: Almond Flavored Buttercream", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 297.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Cake Frosting: Almond Flavored Buttercream", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 51.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Dimensions: 9\u201d diameter", "Price": " 7\u201d high", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 10.0, "Price_stringindexer_transform": 14.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Serves 16-22", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 3.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Each Cake Arrives With It\u2019s Own Cake Care Card", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 4.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Allergens: Contains Wheat", "Price": " Milk", "Discount": " Soy", "Rating": " Egg", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 6.0, "Price_stringindexer_transform": 10.0, "Discount_stringindexer_transform": 2.0, "Rating_stringindexer_transform": 1.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ships Frozen\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 5.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$89.99 ", "Discount": "No Discount", "Rating": "No Reviews", "Title": "Classic Cake Chocolate Entremet Quarter Sheet Cake (14 Pre-Cut Total Slices, 4 Oz. Per Slice, 3.5 Lbs. Total Box)", "Currency": "$", "Feature": "Quarter Sheet Cake (14 - 4 Oz Pre-Cut Slices Total)   Devil\u2019s Food Cake   Dark Chocolate Mousse Topped with Dark Chocolate Ganache", "Product Description": "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. Topping the list of customers favorites is by far our Chocolate Entremet \u2013 a deep, rich dessert that combines luscious layers of Devil\u2019s Food Cake and dark chocolate mousse with a rich, dark chocolate ganache. It is a chocolate lover\u2019s dream with caffe latte, French press or yes, regular coffee or big glass of milk.   Includes:   Quarter Sheet Cake (14 - 4 Oz Pre-Cut Slices Total)", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 2.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 2.0, "Title_stringindexer_transform": 78.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 15.0, "Product Description_stringindexer_transform": 26.0}, {"Sub Category": "Devil\u2019s Food Cake", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 213.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Dark Chocolate Mousse Topped with Dark Chocolate Ganache\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 177.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$99.99 ", "Discount": "No Discount", "Rating": "Rated 3.6 out of 5 stars based on 5 reviews.", "Title": "Ferrara\u2019s Bakery 8 in. Tiramisu Cake, 2-pack", "Currency": "$", "Feature": "8 inch Tiramisu Cake 2-pack   Each Cake services 10-12 people   Classic Flavors of Espresso and Mascarpone", "Product Description": "Ferrara\u2019s specialty tiramisu features homemade Savoiardi (Ladyfinger cookies) that we douse with espresso & coffee liqueur and layer with sweet mascarpone.", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 8.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 40.0, "Title_stringindexer_transform": 68.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 90.0, "Product Description_stringindexer_transform": 55.0}, {"Sub Category": "PRODUCEDIN AFACILITYWHERENUTS", "Price": "MILK", "Discount": "EGGS", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": " Enrico Scoppa and our great grand-uncle", "Currency": " Antonio Ferrara", "Feature": " opera impresario and showman", "Product Description": " opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties", "Sub Category_stringindexer_transform": 141.0, "Price_stringindexer_transform": 82.0, "Discount_stringindexer_transform": 16.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 26.0, "Currency_stringindexer_transform": 7.0, "Feature_stringindexer_transform": 39.0, "Product Description_stringindexer_transform": 66.0}, {"Sub Category": "We take the extra step of baking two", "Price": " three and sometimes four times a day", "Discount": " in small batches. Because of the frequency with which we bake", "Rating": " Ferrara acquired our great reputation for quality and freshness. Today", "Title": " Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892", "Currency": " the spirit", "Feature": " recipes and devotion to quality has changed very little.   Ingredients\u2013 Heavy Cream", "Product Description": " Sugar", "Sub Category_stringindexer_transform": 17.0, "Price_stringindexer_transform": 18.0, "Discount_stringindexer_transform": 5.0, "Rating_stringindexer_transform": 3.0, "Title_stringindexer_transform": 1.0, "Currency_stringindexer_transform": 1.0, "Feature_stringindexer_transform": 100.0, "Product Description_stringindexer_transform": 46.0}, {"Sub Category": "Each Cake services 10-12 people", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 50.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Classic Flavors of Espresso and Mascarpone\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 135.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$89.99 ", "Discount": "No Discount", "Rating": "Rated 3 out of 5 stars based on 2 reviews.", "Title": "Classic Cake Limoncello Quarter Sheet Cake (14 Pre-Cut Total Slices, 4 Oz. Per Slice, 3.5 Lbs Total Box)", "Currency": "$", "Feature": "Quarter Sheet Cake (14 - 4 Oz. Pre-Cut Slices Total)   Almond Joconde Cake With Lemon Syrup   Layered with White Chocolate Mousse & Lemon Curd", "Product Description": "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. In listening to our customers, we found more and more looking for a lighter, refreshing dessert with the same decadence. This gave way to our one-of-a-kind Limoncello created with almond joconde cake soaked with lemon syrup then layered with white chocolate mousse and a delicious lemon curd. The deliciousness doesn\u2019t stop there. The cake is finished with white chocolate shavings, combining a sweet and tart flavor that is delightfully light.   Includes:   Quarter Sheet Cake (14 - 4 Oz. Pre-Cut Slices Total)", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 2.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 11.0, "Title_stringindexer_transform": 25.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 92.0, "Product Description_stringindexer_transform": 23.0}, {"Sub Category": "Almond Joconde Cake With Lemon Syrup", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 156.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Layered with White Chocolate Mousse & Lemon Curd\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 231.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$24.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 687 reviews.", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Panettone Classic   Italian Cake   Milan Specialty", "Product Description": "\"deMilan is baked using the traditional recipe of \"\"Panettone Milano\"\". Panettone is produced according to the traditional recipe through a slow and natural process. All the ingredients", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 25.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 67.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 49.0, "Product Description_stringindexer_transform": 21.0}, {"Sub Category": "2.2 lb Tin\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 120.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$39.99 ", "Discount": "No Discount", "Rating": "Rated 4.3 out of 5 stars based on 845 reviews.", "Title": "David\u2019s Cookies Decadent Triple Chocolate made with mini Hershey\u2019s Kisses and Reese\u2019s Peanut Butter Cup Cookies Tin \u2013 2 Count", "Currency": "$", "Feature": "8 Jumbo Triple Chocolate made with mini Hershey\u2019s Kisses", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 7.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 53.0, "Title_stringindexer_transform": 98.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 81.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "8 Jumbo Reese\u2019s Peanut Butter Cup Cookies", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 40.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Kosher OU-D certified\"", "Price": "Due to the perishable nature of this product orders will only ship on Monday and Tuesday for Thursday and Friday delivery. Orders will not ship over the weekend. Orders placed after 9 am PST on Tuesday will not ship until the following Monday. Whoever said that bigger isn't always better never tasted fresh baked giant cookies from David's Cookies. These lusciously JUMBO cookies, made with no added preservatives, reign supreme and comes in 4.5 oz fabulous, flavorsome, fresh baked giant cookies.Triple Chocolate:Decadent to say the least! This cookie is made from David\u2019s famous chocolate chunk cookie dough, generously topped with HERSHEY\u2019S\u00ae MINI KISSES, semi-sweet chocolate chunks & milk chocolate chunks!\tPeanut Butter:Peanut butter lovers unite! Peanut butter cookie dough is loaded with peanut butter chips and topped with chunks of REESE\u2019S\u00ae Peanut Butter Cups.Includes:2-pack Includes: 2 tins of 4 decadent 4.5oz Triple Chocolate Cookies and 4 decadent 4.5oz Peanut Butter Cookies per tinKosher OU-D certified16 Jumbo decadent 4.5oz cookies totalWeight: Approximately 4.5oz each cookieMade in the USASome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: Consume within 48 hours of receipt or freeze for up to six months in a freezer safe container.", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 21.0, "Price_stringindexer_transform": 29.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$72.99 ", "Discount": "No Discount", "Rating": "Rated 4.3 out of 5 stars based on 87 reviews.", "Title": "Ferrara's Bakery 4 lbs. Italian Cookie Pack", "Currency": "$", "Feature": "4 lbs. Italian Cookies", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 115.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 13.0, "Title_stringindexer_transform": 57.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 36.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "7 Types of Cookies\"", "Price": "Ferrara\u2019s delicate & buttery cookies are the perfect companion with a cup of coffee. Using secret Old World recipes that are over 100 years old, Ferrara bakes perfect rainbow (tricolori), pignoli (almond-flavored cookies studded with pine nuts), fudge-swirled cookies & more.", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 53.0, "Price_stringindexer_transform": 59.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather", "Price": " Enrico Scoppa and our great grand-uncle", "Discount": " Antonio Ferrara", "Rating": " opera impresario and showman", "Title": " opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 216.0, "Price_stringindexer_transform": 44.0, "Discount_stringindexer_transform": 31.0, "Rating_stringindexer_transform": 25.0, "Title_stringindexer_transform": 92.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "We take the extra step of baking two", "Price": " three and sometimes four times a day", "Discount": " in small batches. Because of the frequency with which we bake", "Rating": " Ferrara acquired our great reputation for quality and freshness. Today", "Title": " Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892", "Currency": " the spirit", "Feature": " recipes and devotion to quality has changed very little.", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 17.0, "Price_stringindexer_transform": 18.0, "Discount_stringindexer_transform": 5.0, "Rating_stringindexer_transform": 3.0, "Title_stringindexer_transform": 1.0, "Currency_stringindexer_transform": 1.0, "Feature_stringindexer_transform": 59.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Includes:   Rainbow Tricolori Cookies", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 75.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Fudge-swirled Cookies", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 151.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Pignoli Cookies", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 272.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Coconut Cookies", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 226.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Plan Sandwich Cookies", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 76.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Half Moon Cookies", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 318.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Torrincino Cookies   PRODUCED IN A FACILITY WHERE NUTS", "Price": " MILK", "Discount": " EGGS", "Rating": " SOY & FLOUR ARE PRESENT\"", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 127.0, "Price_stringindexer_transform": 27.0, "Discount_stringindexer_transform": 6.0, "Rating_stringindexer_transform": 48.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$119.99 ", "Discount": "No Discount", "Rating": "Rated 2.2 out of 5 stars based on 4 reviews.", "Title": "\"Ferrara's Bakery 48 Mini Cannoli's (24 Plain Filled and 24 Hand Dipped Belgian Chocolate) - 1.5\"\" to 2\"\" In Length\"", "Currency": "$", "Feature": "24 Mini Plain Filled Cannoli   24 Mini Hand Dipped Belgian Chocolate Cannoli   Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness   Chocolate Cannoli: After thawing should be eaten within 48 hours   Frozen: Can be stored up to a year", "Product Description": "\"Ferrara's Bakery of Little Italy in New York City 24 Mini Plain Filled Cannoli and 24 Mini Hand Dipped Belgian Chocolate Cannoli   The Cannoli is a Sicilian pastry. First introduced more than 125 years ago by Cafe\u2019 Ferrara. A light crispy shell, sweet, velvety, creamy ricotta with chocolate chips & citron. Ferrara dips their traditional crispy cannoli shells by hand in rich Belgian chocolate before filling them with sweet ricotta cream studded with chocolate chips   A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties   We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little   Cannolis are made fresh, frozen and shipped on dry ice   1 1/2-2\"\" In length", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 118.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 68.0, "Title_stringindexer_transform": 85.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 70.0, "Product Description_stringindexer_transform": 31.0}, {"Sub Category": "24 Mini Plain Filled Cannoli", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 192.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "24 Mini Hand Dipped Belgian Chocolate Cannoli", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 12.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 27.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Chocolate Cannoli: After thawing should be eaten within 48 hours", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 16.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Frozen: Can be stored up to one year   PRODUCED IN A FACILITY WHERE NUTS", "Price": " MILK", "Discount": " EGGS", "Rating": " SOY & FLOUR ARE PRESENT   24 Mini Plain Filled Cannoli", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 73.0, "Price_stringindexer_transform": 27.0, "Discount_stringindexer_transform": 6.0, "Rating_stringindexer_transform": 20.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "24 Mini Hand Dipped Belgian Chocolate Cannoli", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 12.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 27.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Chocolate Cannoli: After thawing should be eaten within 48 hours", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 16.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Frozen: Can be stored up to a year\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 284.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$109.99 ", "Discount": "No Discount", "Rating": "Rated 4.2 out of 5 stars based on 181 reviews.", "Title": "Ferrara's Bakery 24 Large Cannoli's (12 Plain Filled and 12 Hand Dipped Belgian Chocolate)", "Currency": "$", "Feature": "12 Large Plain Filled Cannoli   12 Large Hand Dipped Belgian Chocolate Cannoli   Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness   Chocolate Cannoli: After thawing should be eaten within 48 hours   Frozen: Can be stored up to a year", "Product Description": "Ferrara's Bakery of Little Italy in New York City 12 Large Plain Filled Cannoli and 12 Large Hand Dipped Belgian Chocolate CannoliThe Cannoli is a Sicilian pastry. First introduced more than 125 years ago by Cafe\u2019 Ferrara. A light crispy shell, sweet, velvety, creamy ricotta with chocolate chips & citron. Ferrara dips their traditional crispy cannoli shells by hand in rich Belgian chocolate before filling them with sweet ricotta cream studded with chocolate chipsA little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very littleCannolis are made fresh, frozen and shipped on dry ice 12 Large Plain Filled Cannoli12 Large Hand Dipped Belgian Chocolate CannoliPlain Cannoli: After thawing should be eaten within 2 hours for maximize crispnessChocolate Cannoli: After thawing should be eaten within 48 hoursFrozen: Can be stored up to a yearPRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENT", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 73.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 5.0, "Title_stringindexer_transform": 63.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 29.0, "Product Description_stringindexer_transform": 5.0}, {"Sub Category": "Bakery & Desserts", "Price": "$99.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 16 reviews.", "Title": "Mary Macleod\u2019s Shortbread, Variety Tin, 3-pack, 24 cookies per tin", "Currency": "$", "Feature": "Three elegant keepsake tins   All-butter artisan shortbread cookies   Variety of 4 flavors in each tin   Perfect for all your gifting needs   Certified Women Owned bakery", "Product Description": "Mary Macleod\u2019s Shortbread tastes like true love in pure, buttery cookie form. Inside each tin are handcrafted, all-butter, gourmet shortbread cookies in Mary Macleod's most popular flavors. The keepsake tin is gorgeous featuring gold foil embellishments for a touch of timeless elegance. The combination of luxurious packaging and melt-in-your-mouth cookies will create a lasting memory. Each tin is filled with 24 shortbread cookies in 4 of Mary Macleod\u2019s premium flavors: The Classic, Chocolate Crunch, Dutch Chocolate and Maple Crunch. Handcrafted and baked to perfection, every cookie is made with care and attention to detail, ensuring the highest quality and taste. This is the perfect corporate gift to show your appreciation to coworkers, clients, partners, suppliers and more. They are also fantastic and versatile for personal occasions - birthdays, weddings, anniversaries, holidays or just to say hello. With a multipack of 3 luxurious tins, this is a smart choice for all your gifting needs.   Includes:   Elegant Keepsake Blue Tin of Shortbread Cookies with Gold Foil Embellishments.", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 8.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 22.0, "Title_stringindexer_transform": 14.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 52.0, "Product Description_stringindexer_transform": 48.0}, {"Sub Category": "Variety of 4 Mary Macleod's Shortbread Handcrafted", "Price": " Premium All-Butter Shortbread Cookies | Flavors: Classic", "Discount": " Chocolate Crunch", "Rating": " Dutch Chocolate and Maple Crunch.", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 257.0, "Price_stringindexer_transform": 90.0, "Discount_stringindexer_transform": 30.0, "Rating_stringindexer_transform": 29.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Multipack of 3 Tins of Shortbread Cookies.", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 129.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "CONTAINS: Seventy-Two (72) TOTAL all-butter shortbread cookies in 4 flavors. Each tin has Twenty-Four (24) Variety Shortbread Cookies [3 tins total", "Price": " 72 cookies total]", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 227.0, "Price_stringindexer_transform": 110.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Each premium tin comes with four different flavors of our delectable shortbread cookies", "Price": " each one baked to perfection using only the finest ingredients.\"", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 188.0, "Price_stringindexer_transform": 114.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$34.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 702 reviews.", "Title": "Ferrara's Bakery Rainbow Cookies 1.5 lb", "Currency": "$", "Feature": "\"Tricolor Rainbow Cookies   Each cookie is approximately 1.5 x 2\"\"   Small Batch Baking   Can be frozen for up to 6 months\"", "Product Description": "\"Ferrara's Bakery of Little Italy in New York CityWith our secret recipes that span three centuries, this fifth-generation family-owned bakery continues to handcraft Italian desserts from the same location in NYC\u2019s Little Italy since 1892.Ferrara\u2019s traditional rainbow (tricolori) cookies are made in-house daily from a secret recipe that Antonio Ferrara used when he opened the bakery. This Tri-color or Rainbow cookie features layers of cake made from almond & macaroon paste that are sandwiched with apricot jam and coated in chocolate.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties.We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little.Rainbow Cookies can be refrigerated for up to a week or frozen for up to 6 months. Once opened, store in an airtight container and serve at room temperature.1.5 lb's Tricolor Rainbow CookiesEach cookie is approximately 1.5 x 2\"\"PRODUCED IN A FACILITY WHERE NUTS", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 16.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 26.0, "Title_stringindexer_transform": 32.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 21.0, "Product Description_stringindexer_transform": 3.0}, {"Sub Category": "Bakery & Desserts", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 4.2 out of 5 stars based on 137 reviews.", "Title": "Ferrara's Bakery 2 lb Italian Cookie Tray and Struffoli", "Currency": "$", "Feature": "Assorted Italian Cookie Tray", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 1.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 16.0, "Title_stringindexer_transform": 77.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 57.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Struffoli Honey Balls\"", "Price": "Ferrara's Bakery of LIttle Italy in New York CityFerrara\u2019s delicate & buttery cookies are the perfect companion with a cup of coffee. Using secret Old World recipes that are over 100 years old, Ferrara bakes perfect rainbow (tricolori), pignoli (almond-flavored cookies studded with pine nuts), fudge-swirled cookies & more.Struffoli also known as Honey Balls is a Neapolitan dish made of deep fried balls of sweet dough. Crunchy on the outside and light inside, struffoli are mixed with honey and other sweet ingredients and formed into mounds or rings. They are often served for holidays and are sometimes served warm. Best stored at room temperature.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties. We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family-owned business operated by the fifth generation. That\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little.Includes:2 lb Assorted Italian Cookie Tray16 oz. Struffoli Honey BallsPRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENT", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 248.0, "Price_stringindexer_transform": 36.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$89.99 ", "Discount": "No Discount", "Rating": "Rated 3 out of 5 stars based on 5 reviews.", "Title": "\"Tootie Pie 11\"\" Heavenly Chocolate Pie", "Currency": " 2- pack \"", "Feature": "$", "Product Description": "\"Two   11\"\" Heavenly Chocolate Pie   1 Pie Serves Approximately 8-10 People   Each Pie is Diameter: 11\"\" Each and Weight:   3.5 lbs.   Ships with Dry Ice to Maintain Quality & Freshness   Made in the USA\"", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 2.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 10.0, "Title_stringindexer_transform": 64.0, "Currency_stringindexer_transform": 6.0, "Feature_stringindexer_transform": 3.0, "Product Description_stringindexer_transform": 17.0}, {"Sub Category": "Some of our products may contain nuts. Our facility is NOT a nut-free facility", "Price": " and as a result it is possible that any product may have come in contact with nut or nut oils.", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 20.0, "Price_stringindexer_transform": 23.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Important Handling Instructions:", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 9.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "If not being consumed immediately upon arrival", "Price": " your pie should be placed in the freezer. The pie will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 7 days. The pie is fully baked and can be enjoyed chilled or at room temperature. Thaw the pie in the fridge for about 4 hours (or on your kitchen counter for around 2 hours).\"", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 2.0, "Price_stringindexer_transform": 26.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$89.99 ", "Discount": "No Discount", "Rating": "No Reviews", "Title": "\"Tootie Pie 11\"\" Whiskey Pecan Pie", "Currency": " 2-pack\"", "Feature": "$", "Product Description": "\"Two 11\"\" Whiskey Pecan Pie   1 Pie Serves Approximately 8-10 people   Each Pie is Diameter: 11\"\" Each", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 2.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 2.0, "Title_stringindexer_transform": 96.0, "Currency_stringindexer_transform": 3.0, "Feature_stringindexer_transform": 3.0, "Product Description_stringindexer_transform": 64.0}, {"Sub Category": "This product contains nuts.", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 289.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Important Handling Instructions:", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 9.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "If not being consumed immediately upon arrival", "Price": " your pie should be placed in the freezer. The pie will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 7 days. The pie is fully baked and can be enjoyed chilled or at room temperature. Thaw the pie in the fridge for about 4 hours (or on your kitchen counter for around 2 hours).\"", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 2.0, "Price_stringindexer_transform": 26.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bakery & Desserts", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "No Reviews", "Title": "\"Tootie Pie 11\"\" Huge Original Apple Pie\"", "Currency": "$", "Feature": "\"One 11\"\" Apple Pie   Serves Approximately 10-12 people   Diameter: 11\"\" Each and Weight: 6 lbs.   Ships with Dry Ice to Maintain Quality & Freshness   Made in the USA\"", "Product Description": "Made with Tootie\u2019s original recipe from 1985, our Huge Apple Pie is 6 pounds of sliced apples, mixed with the perfect blend of spices and our famous handcrafted, golden-brown flaky crust. Standing almost 4 inches tall, it makes a great gift or the perfect centerpiece for all your family get-togethers.", "Sub Category_stringindexer_transform": 1.0, "Price_stringindexer_transform": 1.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 2.0, "Title_stringindexer_transform": 62.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 72.0, "Product Description_stringindexer_transform": 56.0}, {"Sub Category": "One taste and you\u2019ll see why our Huge Apple Pie has been delighting customers across the country for over 35 years!", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 200.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Some of our products may contain nuts. Our facility is NOT a nut-free facility", "Price": " and as a result it is possible that any product may have come in contact with nut or nut oils.", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 20.0, "Price_stringindexer_transform": 23.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Important Handling Instructions:", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 9.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "If not being consumed immediately upon arrival", "Price": " your pie should be placed in the freezer. The pie will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 7 days. The pie is fully baked", "Discount": " and can be enjoyed chilled", "Rating": " at room temperature or it can be heated in a 325\u00ba oven for about 1 \u00bd hours. Thaw the pie in the fridge for about 24 hours (or on your kitchen counter for around 5 hours).\"", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 2.0, "Price_stringindexer_transform": 55.0, "Discount_stringindexer_transform": 38.0, "Rating_stringindexer_transform": 39.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$99.99 ", "Discount": "After $30 OFF", "Rating": "Rated 4.5 out of 5 stars based on 28 reviews.", "Title": "Pulp & Press Organic Cold-Pressed Wellness Shot Pack, 48-pack", "Currency": "$", "Feature": "12 Ginger, 12 Turmeric, 12 Wheatgrass and 12 Elderberry   Certified Organic   No Preservatives, Added Sugar, Additives (Colors, Flavors)   Vegan and Gluten Free", "Product Description": "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders only ship Monday, Tuesday and Wednesday for Wednesday, Thursday, Friday deliveries.   At Pulp & Press, we're dedicated to making healthy living convenient and accessible to everyone. Our cold-pressed juices and wellness shots are made with only the highest quality, 100% organic, plant-based, and raw ingredients, so you can be sure you're getting the most nutritional value out of every sip. Say hello to a healthier you with our wellness shot elixirs!   12 Ginger Wellness Shot Elixir   A zesty blend of lemon, ginger, and turmeric - balanced with apple, that's perfect for supporting your immune system and aiding digestion.   12 Turmeric Wellness Shot Elixir   Loaded with superfoods like turmeric, lemon, and pineapple, plus black pepper to boost nutrient absorption.   12 Wheatgrass Wellness Shot Elixir   Boost your daily greens with this deliciously green elixir, packed with superfoods like pineapple, lemon, ginger, wheatgrass, and spirulina.   12 Elderberry Wellness Shot Elixir   Packed with antiviral ingredients like elderberry and ginger, these bright-colored shots can help support the immune system.   Fun Ways to Incorporate Wellness Shots Into Your Daily Routine:   Enjoy a shot as a refreshing start to your day", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 8.0, "Discount_stringindexer_transform": 9.0, "Rating_stringindexer_transform": 17.0, "Title_stringindexer_transform": 38.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 82.0, "Product Description_stringindexer_transform": 41.0}, {"Sub Category": "Add a wellness shot to your juice or smoothie for an extra boost of nutrients", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 322.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Pair a shot with your favorite healthy snack for a delicious treat", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 30.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Take a wellness shot before your workout to energize your body   100% Organic Ingredients:   Ginger: Organic Apple", "Price": " Organic Lemon", "Discount": " Organic Ginger", "Rating": " Organic Turmeric", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 103.0, "Price_stringindexer_transform": 11.0, "Discount_stringindexer_transform": 4.0, "Rating_stringindexer_transform": 37.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Turmeric: Organic Pineapple", "Price": " Organic Lemon", "Discount": " Organic Turmeric", "Rating": " Organic Black Pepper.", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 340.0, "Price_stringindexer_transform": 11.0, "Discount_stringindexer_transform": 28.0, "Rating_stringindexer_transform": 65.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Elderberry: Organic Apple", "Price": " Organic Lemon", "Discount": " Organic Ginger", "Rating": " Organic Elderberry extract", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 256.0, "Price_stringindexer_transform": 11.0, "Discount_stringindexer_transform": 4.0, "Rating_stringindexer_transform": 38.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Wheatgrass: Organic Pineapple", "Price": " Organic Lemon", "Discount": " Organic Ginger", "Rating": " Organic Wheatgrass", "Title": " *Spirulina.   For any questions or concerns regarding your online order", "Currency": " please reach out to Pulp and Press directly at support@pulpandpress.com or by phone at (866)-208-9319. A representative will be in touch with you within 24 hours.\"", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 342.0, "Price_stringindexer_transform": 11.0, "Discount_stringindexer_transform": 4.0, "Rating_stringindexer_transform": 74.0, "Title_stringindexer_transform": 51.0, "Currency_stringindexer_transform": 11.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$27.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Prime Hydration+ Sticks Electrolyte Drink Mix, Variety Pack, 30-Count", "Currency": "$", "Feature": "Activate with Water   No Added Sugar   Antioxidants + Electrolytes   Caffeine Free   Gluten Free", "Product Description": "Hydration+ Sticks Electrolyte Drink Mix", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 28.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 13.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 44.0, "Product Description_stringindexer_transform": 37.0}, {"Sub Category": "Variety pack: 10-Ice Pop (0.35 oz)", "Price": " 10-Blue Raspberry (0.34 oz)", "Discount": " 10-Strawberry Watermelon (0.32 oz)", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 210.0, "Price_stringindexer_transform": 121.0, "Discount_stringindexer_transform": 46.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "25 calories per bottle", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 308.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "250 mg BCAA", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 49.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "10% coconut water", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 14.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "The ultimate recovery support", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 95.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Drink in rapid replenishment and intensely refreshing flavors", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 55.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "30-Count\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 42.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$21.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Prime Hydration Drink, Variety Pack, 16.9 fl oz, 15-count", "Currency": "$", "Feature": "5 - Tropical Punch   5 - Lemon Lime   5 - Blue Raspberry   16.9 fl oz Bottles   15 Total Bottles", "Product Description": "Limit 5 per member   Gluten free", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 3.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 102.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 34.0, "Product Description_stringindexer_transform": 58.0}, {"Sub Category": "\u200bCaffeine free", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 307.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "10% coconut water", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 14.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "250mg BCAAs", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 158.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "B vitamins", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 89.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Antioxidants", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 286.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "835mg electrolytes\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 102.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$20.99 ", "Discount": "After $5 OFF", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Alani Nu Energy Drink, Variety Pack, 12 fl oz, 18-count", "Currency": "$", "Feature": "6 - Juicy Peach   6 - Cosmic Stardust   6 - Cherry Slush   12 fl oz Cans   18 Total Cans", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 98.0, "Discount_stringindexer_transform": 3.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 21.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 56.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "200mg caffeine\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 208.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$19.99 ", "Discount": "After $5 OFF", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Poppi Prebiotic Soda, Variety Pack, 12 fl oz, 15-count", "Currency": "$", "Feature": "5 - Doc Pop   5 - Grape   5 - Root Beer   12 fl oz Cans   15 Total Cans", "Product Description": "Prebiotics for a healthy gut", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 4.0, "Discount_stringindexer_transform": 3.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 2.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 93.0, "Product Description_stringindexer_transform": 2.0}, {"Sub Category": "5g sugar or less", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 19.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Immunity sidekick\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 13.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$19.99 ", "Discount": "After $5 OFF", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Poppi Prebiotic Soda, Variety Pack, 12 fl oz, 15-count", "Currency": "$", "Feature": "5 - Strawberry Lemon   5 - Orange   5 - Cherry Limeade   12 fl oz Cans   15 Total Cans", "Product Description": "Prebiotics for a healthy gut", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 4.0, "Discount_stringindexer_transform": 3.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 2.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 38.0, "Product Description_stringindexer_transform": 2.0}, {"Sub Category": "5g sugar or less", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 19.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Immunity sidekick\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 13.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$439.99 ", "Discount": "This item is not returnable.", "Rating": "Rated 4.3 out of 5 stars based on 1957 reviews.", "Title": "Kirkland Signature Bottled Water 16.9 fl oz, 40-count, 48 Case Pallet", "Currency": "$", "Feature": "Business Members* Click the Business Delivery Tab for Local Delivery Options", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 88.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 12.0, "Title_stringindexer_transform": 58.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 10.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Zero Calories", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 336.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No Artificial Color or Flavors", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 329.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Minerals Added for a Pure Refreshing Taste\"", "Price": "*Business Members please click on Business Delivery tab above to see if local delivery is available in your area.The item may also be available at your local warehouse at a lower non-delivered price.Bottle Fee will apply to shipments going to California, Connecticut, Delaware, Michigan, New York, Oregon, Vermont and Maine. Kirkland Signature bottled water\u2019s pure, fresh taste, high quality and value makes staying refreshed and hydrated easy! Our water is bottled with state-of-the-art purification, filtration and reverse osmosis technologies with the highest quality certifications in the industry. Kirkland Signature bottled water is the perfect solution for your on-the-go lifestyle!Product description:Proprietary mineral blend added to create Kirkland Signature\u2019s pure taste.Bottled using state-of-the-art purification, filtration and reverse osmosis technologies with each bottle undergoing automated digital imaging inspection.Utilization of food grade recycled PET (rPET) where feasible. Our bottle and cap are recyclable. Please use store drop off locations to recycle the printed filmFeatures:Perfect size for an on-the-go lifestyle, school lunches, sports, events and entertaining.Zero calories, no sweeteners and no artificial colors or flavors.Bottled using the highest quality standards in the industry.Minerals added for a pure, refreshing taste.16.9 oz/0.5L plastic (PET & rPET) bottles o\tVirgin and Recycled Polyethylene Terephthalate (PET & rPET) are BPA free.40 bottles per case48 cases per pallet", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 223.0, "Price_stringindexer_transform": 58.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$9.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Kirkland Signature, Organic Almond Beverage, Vanilla, 32 fl oz, 6-Count", "Currency": "$", "Feature": "Unsweetened   Non-Dairy Beverage   USDA Certified Organic   No Sugar Added   Vegan", "Product Description": "6-count", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 94.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 28.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 69.0, "Product Description_stringindexer_transform": 71.0}, {"Sub Category": "32 oz. container", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 346.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "30 calories per serving", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 117.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Free of dairy", "Price": " lactose", "Discount": " soy", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 251.0, "Price_stringindexer_transform": 40.0, "Discount_stringindexer_transform": 27.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Net Weight 192 oz.\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 67.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$14.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Kirkland Signature, Almond Milk, 1 qt, 12-count", "Currency": "$", "Feature": "Kosher   Vegan   Free of Dairy, Lactose, Soy   No Added Sugar   Made in the USA", "Product Description": "Original Unsweetened", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 9.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 95.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 37.0, "Product Description_stringindexer_transform": 36.0}, {"Sub Category": "Non-Dairy Beverage", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 236.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Made with California Almonds", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 171.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "12-count", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 28.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "1 qt Cartons", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 351.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Net Weight: 3 Gal\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 189.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$21.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Kirkland Signature, Organic Reduced Fat Chocolate Milk, 8.25 fl oz, 24-Count", "Currency": "$", "Feature": "USDA Certified Organic   2% Milk Fat   Grade A   Excellent Source of Calcium   Net Weight 198 fl. oz.", "Product Description": "24-count", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 3.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 99.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 23.0, "Product Description_stringindexer_transform": 72.0}, {"Sub Category": "8.25 oz. Chocolate Milks", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 201.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "37% Less Fat than Whole Milk", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 237.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "With Vitamins A & D", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 93.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "UHT Pasteurized\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 101.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$18.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Kirkland Signature Colombian Cold Brew Coffee, 11 fl oz, 12-count", "Currency": "$", "Feature": "Cold Brewed   Product of Colombia   Roasted and Packaged in the USA   100% Colombian   12-count", "Product Description": "Cold Brewed", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 12.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 79.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 48.0, "Product Description_stringindexer_transform": 67.0}, {"Sub Category": "12-count", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 28.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "11 fl oz cans", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 261.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Total Volume 3.9 L\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 238.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$21.49 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Hint Flavored Water, Variety Pack, 16 fl oz, 21-count", "Currency": "$", "Feature": "7 - Blackberry   7 - Watermelon   7 - Peach   16 fl oz Bottles   21 Total Bottles", "Product Description": "0 calories", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 34.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 43.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 30.0, "Product Description_stringindexer_transform": 19.0}, {"Sub Category": "0 sweeteners", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 99.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Water infused with fruit essences & other natural flavors\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 316.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$17.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Califia Farms, Cafe Almond Milk, 32 oz, 6-Count", "Currency": "$", "Feature": "Non GMO   Vegan   Kosher   Soy Free   Dairy Free", "Product Description": "Upgrade your latte. Caf\u00e9 Almond Milk froths, foams, and steams perfectly for all your espresso creations. Neutral in taste and creamy in texture, it blends beautifully into hot or iced coffee. Simple, dairy-free, plant-based goodness.\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b   FROTH + STEAM PERFECT LATTES: With Caf\u00e9 Almond Milk you can froth and steam perfect dairy-free lattes at home. Naturally creamy with a neutral taste, Caf\u00e9 Almond Milk is made for lattes.", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 30.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 40.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 67.0, "Product Description_stringindexer_transform": 76.0}, {"Sub Category": "SIMPLE PLANT-BASED INGREDIENTS: Califia Farms Caf\u00e9 Almond Milks are made with plant-based", "Price": " dairy-free ingredients that are Non-GMO Certified", "Discount": " Kosher", "Rating": " vegan", "Title": " and free from carrageenan.", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 324.0, "Price_stringindexer_transform": 84.0, "Discount_stringindexer_transform": 12.0, "Rating_stringindexer_transform": 62.0, "Title_stringindexer_transform": 69.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "BLENDS SMOOTHLY INTO COFFEE: This plant-based non-dairy Caf\u00e9 Almond Milk blends beautifully into both hot and iced coffee", "Price": " for a smooth and creamy cup of coffee every time.", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 86.0, "Price_stringindexer_transform": 74.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "BARISTA'S CHOICE DAIRY-FREE MILK: Califia Farms Caf\u00e9 Almond Milks are favored by professional baristas across the country for their ability to froth", "Price": " steam", "Discount": " and form latte art.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 309.0, "Price_stringindexer_transform": 31.0, "Discount_stringindexer_transform": 26.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Refrigerate after opening\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 170.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$89.99 ", "Discount": "After $20 OFF", "Rating": "Rated 4.4 out of 5 stars based on 40 reviews.", "Title": "Pulp and Press 3-Day Organic Cold Pressed Juice Cleanse", "Currency": "$", "Feature": "6 (2.4 oz.) Elixir Shots   15 (12 oz.) Cold Pressed Juices   Cold pressed   Certified Organic   Product of Canada", "Product Description": "Due to the perishable nature of our products, Pulp & Press can not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm EST on Tuesday will not ship until the following Monday.", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 2.0, "Discount_stringindexer_transform": 41.0, "Rating_stringindexer_transform": 32.0, "Title_stringindexer_transform": 113.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 14.0, "Product Description_stringindexer_transform": 77.0}, {"Sub Category": "Exclusive 3-day Juice Cleanse \u2013 organic cold pressed juices and elixirs used to detoxify your body and help you feel great! For best results", "Price": " consume only with water and your choice of organic herbal tea.   15 (12 oz.) Cold Pressed Juices   3Hulk", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 313.0, "Price_stringindexer_transform": 101.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "3 Spicy Lemon", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 87.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "3 Red Monster", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 280.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "3Turbo", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 85.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "3 Rinse + Rebeet   6 (2.4 oz.) Elixir Shots   3 Ginger", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 144.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "3 Turmeric   Cold pressed", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 277.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Rich in vitamins and minerals", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 115.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Certified Organic", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 173.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Certified Kosher", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 353.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No heat pasteurization", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 232.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No preservatives", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 8.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No added sugar", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 180.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No additives (colors", "Price": " flavors)", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 246.0, "Price_stringindexer_transform": 99.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Vegan", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 11.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Gluten Free", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 137.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Product of Canada   Expiration Codes   January - JA", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 133.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "February - FE", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 37.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "March: - MR", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 281.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Aprill - AL", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 252.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "May - MA", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 259.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "June - JN", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 82.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "July - JL", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 96.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "August: - AU", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 234.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "September - SE", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 81.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "October: - OC", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 224.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "November - NO", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 245.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "December - DE   Instructions;   Refrigerate upon delivery", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 271.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Juices should be sealed and cool to the touch", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 32.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Organize according to provided cleanse guide", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 293.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Consume recommended juices 2 to 2.5 hours apart", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 139.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Drink water or organic herbal tea between each juice", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 288.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Avoid eating for best results", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 130.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "If needed", "Price": " consume organic fruits and vegetables moderately   For any questions or concerns regarding your online order", "Discount": " please reach out to Pulp and Press directly at support@pulpandpress.com or by phone at (866)-208-9319. A representative will be in touch with you within 24 hours.\"", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 48.0, "Price_stringindexer_transform": 65.0, "Discount_stringindexer_transform": 44.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$23.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Saratoga Sparkling Spring Water, 16 fl oz, 24-count", "Currency": "$", "Feature": "Spring Water   16 fl oz Bottles   24 Total Bottles   0 Calories per Bottle", "Product Description": "Lively bubbles that refresh the palate", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 5.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 90.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 65.0, "Product Description_stringindexer_transform": 4.0}, {"Sub Category": "A perfect complement to any meal or occasion", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 198.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Made from recycled plastic bottles (excludes cap and label)\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 287.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$4.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Pure Life Purified Water, 8 fl oz, 24-count", "Currency": "$", "Feature": "Purified Water   8 fl oz Bottles   24 Total Bottles", "Product Description": "100% pure quality", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 76.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 110.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 66.0, "Product Description_stringindexer_transform": 43.0}, {"Sub Category": "Purified water", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 152.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Enhanced with minerals for a crisp taste\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 118.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$24.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Fiji Natural Artesian Water, 23.7 fl oz, 12-count", "Currency": "$", "Feature": "Natural Artesian Water   23.7 fl oz Bottle with Sports Cap   12 Total Bottles", "Product Description": "Perfect for hiking, traveling and on-the-go hydration", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 25.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 106.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 58.0, "Product Description_stringindexer_transform": 18.0}, {"Sub Category": "Soft", "Price": " smooth taste", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 303.0, "Price_stringindexer_transform": 41.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Natural electrolytes from tropical rain filtered through volcanic rock", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 205.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Bottled from a natural artesian aquifer in the remote Fiji Islands\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 136.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$18.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Tropicana, Apple Juice, 15.2 fl oz, 12-Count", "Currency": "$", "Feature": "100% Juice   100% Daily Value of Vitamin C   From Concentrate with Other Natural Flavors and Ingredients   Marked for Resale   12-Count", "Product Description": "Apple Juice", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 12.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 7.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 6.0, "Product Description_stringindexer_transform": 40.0}, {"Sub Category": "15.2 fl oz bottle\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 57.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$54.99 ", "Discount": "No Discount", "Rating": "Rated 4.8 out of 5 stars based on 33 reviews.", "Title": "Olipop 12 oz Prebiotics Soda Variety Pack, 24 Count", "Currency": "$", "Feature": "24 count (12 oz each)   Prebiotics, plant fiber, and botanicals to support digestive health   Variety pack: 6-Root Beer, 6-Vintage Cola, 6-Classic Grape, 6-Orange Squeeze   No artificial sweeteners, flavors, or preservatives   Non-GMO Project Verified, Gluten-free, Vegan, Keto & Paleo", "Product Description": "OLIPOP is a new kind of soda\u2122 that's delicious, refreshing, and actually good for you. OLIPOP combines the classic soda flavor you know and love with prebiotics, plant fiber, and botanicals to support your microbiome and digestive health. Every flavor has 2-5 grams of sugar and includes 9 grams of dietary fiber (about 1/3 of your daily recommended fiber intake)!   24 count (12 oz each)", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 15.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 57.0, "Title_stringindexer_transform": 35.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 32.0, "Product Description_stringindexer_transform": 7.0}, {"Sub Category": "Variety pack: 6-Root Beer", "Price": " 6-Vintage Cola", "Discount": " 6-Classic Grape", "Rating": " 6-Orange Squeeze", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 134.0, "Price_stringindexer_transform": 105.0, "Discount_stringindexer_transform": 15.0, "Rating_stringindexer_transform": 9.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Delicious", "Price": " refreshing", "Discount": " and actually good for you", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 66.0, "Price_stringindexer_transform": 89.0, "Discount_stringindexer_transform": 13.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "2-5g sugar", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 65.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "9g fiber", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 78.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Prebiotics", "Price": " plant fiber", "Discount": " and botanicals to support digestive health", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 116.0, "Price_stringindexer_transform": 70.0, "Discount_stringindexer_transform": 19.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No artificial sweeteners", "Price": " flavors", "Discount": " or preservatives", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 169.0, "Price_stringindexer_transform": 93.0, "Discount_stringindexer_transform": 39.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Gluten-free", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 294.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Vegan", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 11.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Paleo-Friendly", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 111.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Keto-Friendly", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 15.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Non-GMO Project Verified\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 31.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$12.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "SO Delicious, Organic Coconut Milk, 32 oz, 6-Count", "Currency": "$", "Feature": "USDA Organic   Kosher   Certified Gluten-Free   Non GMO Project Verified   Certified Vegan", "Product Description": "Unsweetened Coconut Milk", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 6.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 93.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 87.0, "Product Description_stringindexer_transform": 11.0}, {"Sub Category": "Dairy Free", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 121.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Soy Free", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 184.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "6-count", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 332.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "32 oz Cartons\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 145.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$21.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "La Colombe Draft Latte Cold Brew Coffee, Variety Pack, 9 fl oz, 12-count", "Currency": "$", "Feature": "Variety Pack   4 - Triple Draft Latte   4 - Mocha Draft Latte   4 - Vanilla Draft Latte   100% Arabica Coffee", "Product Description": "Cold brew coffee drinkVariety pack: 4-Triple Shot, 4-Mocha, 4-VanillaFoamy nitrous-infused milk9 oz can", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 3.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 20.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 71.0, "Product Description_stringindexer_transform": 30.0}, {"Sub Category": "Beverages & Water", "Price": "$18.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Tropicana, 100% Orange Juice, 10 fl oz, 24-Count", "Currency": "$", "Feature": "Orange Juice   Made From Concentrate   100% DV Vitamin C per Serving   10 fl. oz. Bottle   Net Weight 240 fl. oz.", "Product Description": "Product may not be available in all areas due to local municipality requirements.   24-count", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 12.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 41.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 83.0, "Product Description_stringindexer_transform": 33.0}, {"Sub Category": "Beverages & Water", "Price": "$18.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Coca-Cola Mini, 7.5 fl oz, 30-count", "Currency": "$", "Feature": "Original   7.5 fl oz Cans   30 Total Cans   90 Calories per Can", "Product Description": "Sip-sized cans", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 12.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 6.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 18.0, "Product Description_stringindexer_transform": 29.0}, {"Sub Category": "Beverages & Water", "Price": "$32.99 ", "Discount": "No Discount", "Rating": "Rated 5 out of 5 stars based on 1 reviews.", "Title": "Joyburst Energy Variety, 12 fl oz, 18-count", "Currency": "$", "Feature": "0g of sugar   0g Calories   Naturally Caffeinated (sourced from green tea)   Plant-based ingredients   3 flavors: Peach-Mango, Frose-Rose and Grape", "Product Description": "Natural Energy, with clean, simple ingredients and green-tea caffeine. Joyburst is a better-for-you refreshing sparkling beverage without the unhealthy sugars and synthetic caffeine sources that other energy drinks have. Three delicious fruit-based flavors with a hint of sweetness, naturally-derived caffeine and refreshing sparkling water.   Features:   0g of sugar", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 107.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 4.0, "Title_stringindexer_transform": 53.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 33.0, "Product Description_stringindexer_transform": 75.0}, {"Sub Category": "0g Calories", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 333.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Naturally Caffeinated (sourced from green tea)", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 355.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Plant-based ingredients", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 330.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "3 flavors: Peach-Mango", "Price": " Frose-Rose and Grape\"", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 279.0, "Price_stringindexer_transform": 79.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$29.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Illy Cold Brew Coffee Drink, Classico, 8.45 fl oz, 12-count", "Currency": "$", "Feature": "Classico   8.45 fl oz Cans   12 Total Cans   100% Arabica Coffee   5 Calories per Can", "Product Description": "Illy Blend", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 24.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 54.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 11.0, "Product Description_stringindexer_transform": 52.0}, {"Sub Category": "12 hour cold brewed", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 159.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Recyclable package", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 214.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No preservatives", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 8.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No sugar added\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 52.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$21.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Kirkland Signature, Organic Coconut Water, 33.8 fl oz, 9-count", "Currency": "$", "Feature": "No Sugar Added   Not From Concentrate   100% Juice   USDA Organic   Kosher", "Product Description": "Organic Coconut Water", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 3.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 45.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 9.0, "Product Description_stringindexer_transform": 1.0}, {"Sub Category": "33.8 fl oz (1 Liter) carton", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 301.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "9-count\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 63.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$13.79 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "LaCroix Sparkling Water, Variety Pack, 12 fl oz, 24-count", "Currency": "$", "Feature": "Kosher (Circle U)   0 Calories, 0 Sweetener, 0 Sodium   Naturally Essenced Sparkling Water   6 Lemon, 12 Lime, 6 Grapefruit", "Product Description": "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!   24-count", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 17.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 22.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 17.0, "Product Description_stringindexer_transform": 34.0}, {"Sub Category": "12 fl. oz. cans", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 220.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "288 fl. oz. Total weight", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 153.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "VARIETY PACK: Variety Multi-Pack of 24 cans measuring 12 oz each. Includes 12 Lime", "Price": " 6 Lemon", "Discount": " and 6 Grapefruit. Perfect for the fridge", "Rating": " office", "Title": " or your next family get-together!", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 35.0, "Price_stringindexer_transform": 54.0, "Discount_stringindexer_transform": 33.0, "Rating_stringindexer_transform": 35.0, "Title_stringindexer_transform": 33.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "HEALTHIER: Unlike sports drinks", "Price": " vitamin enhanced waters", "Discount": " and sodas", "Rating": " LaCroix is healthy for you; natural sparkling water with 0 calories", "Title": " 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 106.0, "Price_stringindexer_transform": 102.0, "Discount_stringindexer_transform": 17.0, "Rating_stringindexer_transform": 54.0, "Title_stringindexer_transform": 103.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "GUILT FREE: Drink with zero worries! LaCroix contains 0 calories", "Price": " 0 sweeteners", "Discount": " and 0 sodium. Our sparkling water is vegan", "Rating": " gluten free", "Title": " non-GMO", "Currency": " and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 230.0, "Price_stringindexer_transform": 108.0, "Discount_stringindexer_transform": 25.0, "Rating_stringindexer_transform": 21.0, "Title_stringindexer_transform": 75.0, "Currency_stringindexer_transform": 9.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "REFRESHING: LaCroix is a wholesome", "Price": " refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym", "Discount": " in the office or on the go!", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 179.0, "Price_stringindexer_transform": 81.0, "Discount_stringindexer_transform": 40.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 94.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$23.49 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "C4 Performance Energy Drink, Frozen Bombsicle, 16 fl oz, 12-count", "Currency": "$", "Feature": "Frozen Bombsicle   16 fl oz Cans   12 Total Cans   Zero Sugar   200mg Caffeine", "Product Description": "Performance Energy Drink", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 106.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 23.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 47.0, "Product Description_stringindexer_transform": 73.0}, {"Sub Category": "Zero Sugar", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 107.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Zero Calories\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 168.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$19.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "San Pellegrino Sparkling Natural Mineral Water, Unflavored, 11.15 fl oz, 24-count", "Currency": "$", "Feature": "Zero Calories   Unflavored Original", "Product Description": "Bottled at the source, San Pellegrino Terme (Bergamo) Italy", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 4.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 60.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 94.0, "Product Description_stringindexer_transform": 12.0}, {"Sub Category": "Zero calories", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 163.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Natural mineral water with natural CO2 added", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 304.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "3 x 8-packs\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 217.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$14.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Kirkland Signature Green Tea Bags, 1.5 g, 100-count", "Currency": "$", "Feature": "100-count   1.5 g. bags   A Blend of Sencha & Matcha   Hot & Cold Brewing   Product of Japan", "Product Description": "100-count1.5 g. bags150 g. Total net weightProduct of Japan", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 9.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 84.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 86.0, "Product Description_stringindexer_transform": 57.0}, {"Sub Category": "Beverages & Water", "Price": "$21.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Horizon, Organic Whole Milk, 8 oz, 18-Count", "Currency": "$", "Feature": "USDA Organic   Kosher   Grade A   Never any Preservatives   Net Weight: 144 fl oz", "Product Description": "Certified B Corporation", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 3.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 46.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 91.0, "Product Description_stringindexer_transform": 16.0}, {"Sub Category": "Real Horizon Milk on the GO", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 202.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "8 g Protein per Serving", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 211.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "18-count", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 25.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "8 fl oz containers\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 265.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$13.79 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "LaCroix Sparkling Water, Lime, 12 fl oz, 24-count", "Currency": "$", "Feature": "Kosher (Circle U)   0 Calories   0 Sweetener   0 Sodium   Naturally Essenced Sparkling Water", "Product Description": "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!24-count12 fl. oz. cans288 fl. oz. Total weightMULTI PACK: Comes with 2 packs of 12 cans (24 Cans total). Lime 12 oz cans, perfect for the fridge, office, or your next family get-together!HEALTHIER: Unlike sports drinks, vitamin enhanced waters, and sodas, LaCroix is healthy for you; natural sparkling water with 0 calories, 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.GUILT FREE: Drink with zero worries! LaCroix contains 0 calories, 0 sweeteners, and 0 sodium. Our sparkling water is vegan, gluten free, non-GMO, and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.REFRESHING: LaCroix is a wholesome, refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym, in the office or on the go!FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 17.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 34.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 54.0, "Product Description_stringindexer_transform": 59.0}, {"Sub Category": "Beverages & Water", "Price": "$14.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Liquid Death Sparkling Water, 16.9 fl oz, 18-count", "Currency": "$", "Feature": "100% Mountain Water   16.9 fl oz Cans   18 Total Cans", "Product Description": "Sourced from beneath hundreds of feet of stone", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 9.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 104.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 80.0, "Product Description_stringindexer_transform": 45.0}, {"Sub Category": "Natural minerals & electrolytes", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 225.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Sparkling water straight from the Alps\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 44.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$34.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 1911 reviews.", "Title": "Starbucks Classic Hot Cocoa Mix 30 oz, 2-pack", "Currency": "$", "Feature": "Rich Velvety Cocoa", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 16.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 52.0, "Title_stringindexer_transform": 36.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 16.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Decadent Dark Chocolate Tasting Notes\"", "Price": "2-pack (two 1.87 lb cocoa tins) Each 1.87 lb. tin makes 42 servings of hot cocoaMade with ethically sourced cocoa powderStarbucks is committed to purchasing cocoa that\u2019s grown and traded in an ethical and transparent way Made with cane sugarJust add 1-cup hot milk KosherIngredients: cane sugar, cocoa (processed with alkali), vanilla powder", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 321.0, "Price_stringindexer_transform": 87.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$39.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 138 reviews.", "Title": "VitaCup Green Tea Instant Packets with Matcha, Enhance Energy & Detox, 2-pack (48-count total)", "Currency": "$", "Feature": "2-pack (48-count total)", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 7.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 31.0, "Title_stringindexer_transform": 70.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 84.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Premium Green Tea and Japanese Matcha", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 199.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Infused with Moringa", "Price": " Minerals", "Discount": " and Antioxidants", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 270.0, "Price_stringindexer_transform": 48.0, "Discount_stringindexer_transform": 10.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Enhanced with B Vitamins and Plant-Based D3", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 258.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Prebiotic Fiber to Promote a Healthy Gut\"", "Price": "Start your morning with a burst of energy and focus from our delicious Green Tea Instant Sticks. Sip on a smooth, satisfying green tea infusion made with traditional Japanese matcha powder, plus an infusion of moringa and essential vitamins. Each packet contains a balanced combination of nutrients, amino acids, and prebiotic fiber.", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 47.0, "Price_stringindexer_transform": 62.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "VitaCup Green Tea Instant Sticks are ideal for any tea drinker", "Price": " especially the wellness warrior on-the-go! Pour one packet with 8 ounces of hot or cold water and stir until completely dissolved (about 10 seconds). You\u2019ll love the energy and detox benefts from a powerhouse blend of antioxidants and natural caffeine.   2-pack (48-counttotal)", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 228.0, "Price_stringindexer_transform": 103.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Premium Green Tea Leaves & Matcha Powder", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 74.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Nutrient-Dense Moringa Oleifera", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 206.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Vitamins B5", "Price": " B6", "Discount": " B1", "Rating": " B12", "Title": " B9 & D3", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 325.0, "Price_stringindexer_transform": 113.0, "Discount_stringindexer_transform": 24.0, "Rating_stringindexer_transform": 42.0, "Title_stringindexer_transform": 52.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Inulin Healthy Prebiotic Fiber", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 100.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Natural Antioxidants", "Price": " No Artificial Ingredients", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 128.0, "Price_stringindexer_transform": 50.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Dietitian Formulated", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 60.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Keto-Friendly", "Price": " Supports Energy & Mood", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 15.0, "Price_stringindexer_transform": 37.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Vegan", "Price": " Sugar-Free", "Discount": " Soy-Free", "Rating": " Dairy-Free", "Title": " Gluten-Free\"", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 11.0, "Price_stringindexer_transform": 42.0, "Discount_stringindexer_transform": 45.0, "Rating_stringindexer_transform": 46.0, "Title_stringindexer_transform": 71.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$19.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "San Pellegrino Essenza, Variety Pack, 11.15 fl oz, 24-count", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Flavored Mineral Water24 x 11.5 fl oz8 each of Tangerine & Wild Strawberry, Blood Orange & Black Raspberry, Dark Morello Cherry & Pomegranate", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 4.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 48.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 38.0}, {"Sub Category": "Beverages & Water", "Price": "$22.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Carnation, Evaporated Milk, 12 fl oz, 12-Count", "Currency": "$", "Feature": "Vitamin D Added   The Cooking Milk   Replace Drinking Milk in Recipes   Adds Extra Creaminess and Rich Flavor   Net Weight 144 fl oz", "Product Description": "12-count", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 68.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 61.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 76.0, "Product Description_stringindexer_transform": 68.0}, {"Sub Category": "12 fl. oz. can   Evaporated Milk\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 300.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$49.99 ", "Discount": "No Discount", "Rating": "Rated 4.8 out of 5 stars based on 1150 reviews.", "Title": "Sencha Naturals Everyday Matcha Green Tea Powder, 3-pack", "Currency": "$", "Feature": "Sourced From Japan   Certified Non-GMO   Perfect for Drinking, Blending and Baking   225 Servings", "Product Description": "About Matcha   Made of finely-ground green tea leaves, matcha powder is a highly versatile superfood you drink hot or cold or can add to your favorite smoothies, desserts, and countless other recipes.   Antioxidant Benefits \u2013 Matcha is naturally high in powerful antioxidants for the all-over wellbeing of your body and mind.", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 21.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 27.0, "Title_stringindexer_transform": 8.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 35.0, "Product Description_stringindexer_transform": 60.0}, {"Sub Category": "Sugar", "Price": " Gluten", "Discount": " Dairy-Free - Matcha is naturally free of gluten", "Rating": " sugar", "Title": " and dairy", "Currency": " making it incredibly versatile for daily use in many food and drink recipes.   Balanced Caffeine - With about 1/3 the amount of caffeine as a cup of coffee", "Feature": " matcha provides a sense of calm focus without the jitters.", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 38.0, "Price_stringindexer_transform": 61.0, "Discount_stringindexer_transform": 14.0, "Rating_stringindexer_transform": 61.0, "Title_stringindexer_transform": 39.0, "Currency_stringindexer_transform": 8.0, "Feature_stringindexer_transform": 98.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Japanese Origin - Our premier non-GMO matcha comes from the lush volcanic regions of Kyoto and Kagoshima in Japan.   About Sencha Naturals   Welcome to our Sencha Naturals family! With a mission of \u201cGreen Tea for All", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": " we believe in transparency and accountability", "Rating": " and take the sustainable road less traveled by focusing on people and planet over profits.", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 181.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 18.0, "Rating_stringindexer_transform": 43.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Clean Ingredients - We are committed to providing products that are Non-GMO", "Price": " Gluten-Free and Veganwhen possible.", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 69.0, "Price_stringindexer_transform": 97.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "GMP Certified Facility - Based in Southern California", "Price": " all of our products are packaged in our own cGMP certified facility for highest quality control", "Discount": " food safety", "Rating": " and oversight.   Includes:   3x - 12 oz bags\"", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 285.0, "Price_stringindexer_transform": 35.0, "Discount_stringindexer_transform": 7.0, "Rating_stringindexer_transform": 59.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$14.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "LaCroix Curate Commemorative Collection Sparkling Water, Variety Pack, 12 fl oz, 24-count", "Currency": "$", "Feature": "Kosher (Circle U)   0 Calories, 0 Sweetener, 0 Sodium   Naturally Essenced Sparkling Water   8 Pineapple Strawberry, 8 Blackberry Cucumber, 8 Cherry Lime", "Product Description": "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!24-count12 fl. oz. cans288 fl. oz. Total weight8-Pineapple Strawberry (Pina Fraise), 8-Blackberry Cucumber (Mure Pepino), 8-Cherry Lime (Cerise Limon)VARIETY PACK: Variety Multi-Pack of 24 slim cans measuring 12 oz each. Includes 8 Cerise Lim\u00f3n (Cherry Lime), 8 Pi\u00f1a Fraise (Pineapple Strawberry) and 8 M\u00fare Pepino (Blackberry Cucumber). Perfect for the fridge, office, or your next family get-together!HEALTHIER: Unlike sports drinks, vitamin enhanced waters, and sodas, LaCroix is a healthy for you, natural sparkling water with 0 calories, 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.GUILT FREE: Drink with zero worries! LaCroix contains 0 calories, 0 sweeteners, and 0 sodium. Our sparkling water is vegan, gluten free, non-GMO, and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.REFRESHING: LaCroix is a wholesome, refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym, in the office or on the go!FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 9.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 4.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 68.0, "Product Description_stringindexer_transform": 13.0}, {"Sub Category": "Beverages & Water", "Price": "$8.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Lipton, Iced Tea Mix, Lemon, 5 lbs", "Currency": "$", "Feature": "Sweetened Iced Tea Mix   Natural Lemon Flavor   Kosher   Makes 38 qts   Product of Canada", "Product Description": "Store in cool, dry place", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 72.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 101.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 64.0, "Product Description_stringindexer_transform": 70.0}, {"Sub Category": "Beverages & Water", "Price": "$23.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "San Pellegrino Italian Sparkling Drink, Variety Pack, 11.15 fl oz, 24-count", "Currency": "$", "Feature": "12 - Aranciata Rossa (Orange & Blood Orange)   12 - Limonata (Lemon)   11.15 fl oz Cans   24 Total Cans", "Product Description": "(2) 6-packs of each flavor", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 5.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 42.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 41.0, "Product Description_stringindexer_transform": 8.0}, {"Sub Category": "Made with ingredients from natural origin Italian fruits\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 292.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$12.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Kirkland Signature, Organic Non-Dairy Oat Beverage, 32 oz, 6-count", "Currency": "$", "Feature": "Kosher   Non GMO   USDA Organic   100% Vegan   6-Count", "Product Description": "Made with super tasty rolled oats", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 6.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 9.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 12.0, "Product Description_stringindexer_transform": 15.0}, {"Sub Category": "20g rolled oats in every serving", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 247.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "32 oz carton\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 343.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$21.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Horizon, Organic Low-fat Milk, 8 oz, 18-Count", "Currency": "$", "Feature": "USDA Organic   Kosher   Grade A   Never Any Preservatives   18-Count", "Product Description": "8 fl oz Milk Boxes", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 3.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 107.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 50.0, "Product Description_stringindexer_transform": 27.0}, {"Sub Category": "Net Weight 144 fl oz\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 126.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$23.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Vita Coco, Coconut Water, 11.1 fl oz, 18-Count", "Currency": "$", "Feature": "Coconut Water   Replenish Lost Electrolytes   Recharge with Vital Nutrients   Hydrate with the Goodness of Coconuts   Net Weight 199.8 fl. oz.", "Product Description": "Vita Coco", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 5.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 114.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 7.0, "Product Description_stringindexer_transform": 42.0}, {"Sub Category": "18-count", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 25.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "11.1 fl oz.\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 196.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$15.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Nestle La Lechera, Sweetened Condensed Milk, 14 oz, 6-Count", "Currency": "$", "Feature": "La Lechera   Sweetened Condensed Milk   6-Count   14 oz Can   Net Weight: 84 oz", "Product Description": "No Artificial Flavors", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 20.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 11.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 13.0, "Product Description_stringindexer_transform": 25.0}, {"Sub Category": "Beverages & Water", "Price": "$12.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Kirkland Signature, Organic Coconut Water, 11.1 fl oz, 12-count", "Currency": "$", "Feature": "Kosher   USDA Organic   No Sugar Added   Not from Concentrate   100% Juice:", "Product Description": "Organic Coconut Water", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 6.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 30.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 19.0, "Product Description_stringindexer_transform": 1.0}, {"Sub Category": "11.1 fl oz (330 mL) carton", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 233.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "12 ct", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 267.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Total 3.96 L\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 218.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$13.79 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "LaCroix Sparkling Water, Grapefruit, 12 fl oz, 24-count", "Currency": "$", "Feature": "0 Calories   0 Sweetener   0 Sodium", "Product Description": "100% Natural Sparkling WaterGrapefruit (Pamplemousse)12 fl oz (355 mL) can24-countMore Information:KosherSodium freeSweetener freeZero calories", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 17.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 87.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 45.0, "Product Description_stringindexer_transform": 20.0}, {"Sub Category": "Beverages & Water", "Price": "$28.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Celsius Sparkling Energy Drink, Variety Pack, 12 fl oz, 18-count", "Currency": "$", "Feature": "6 - Peach Vibe   6 - Tropical Vibe   6 - Arctic Vibe   12 fl oz Cans   18 Total Cans", "Product Description": "6 - Peach Vibe (white peach)", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 52.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 31.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 55.0, "Product Description_stringindexer_transform": 61.0}, {"Sub Category": "6 - Tropical Vibe (starfruit pineapple)", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 68.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "6 - Arctic Vibe (frozen berry)", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 302.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "0 sugar", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 262.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Gluten free", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 79.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Kosher", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 26.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Non GMO", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 274.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Certified vegan\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 328.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$27.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Vita Coco, Coconut Water, Original, 16.9 fl oz, 12-Count", "Currency": "$", "Feature": "Kosher   Gluten Free   Soy Free   Non GMO", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 28.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 76.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 95.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Vegan\"", "Price": "Pure Coconut Water", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 176.0, "Price_stringindexer_transform": 96.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "The Original", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 125.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "16.9 fl oz (500 mL) carton", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 178.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "12-count   More Information:   100% Juice", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 339.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Never from concentrate", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 337.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Hydrate Naturally", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 112.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Full of Electrolytes and Nutrients", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 155.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Coconuts Hand-picked From Small Family Farms\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 194.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$23.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "San Pellegrino Italian Sparkling Drink, Aranciata Rossa, 11.15 fl oz, 24-count", "Currency": "$", "Feature": "Product of Italy   11.15 fl oz Cans", "Product Description": "Sparkling orange and blood orange beverage11.15 fl oz cans4 boxes of 6 cans24 total cans", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 5.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 81.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 1.0, "Product Description_stringindexer_transform": 35.0}, {"Sub Category": "Beverages & Water", "Price": "$34.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 2340 reviews.", "Title": "Vonbee Honey Citron & Ginger Tea 4.4 lb 2-pack", "Currency": "$", "Feature": "4.4 lb 2 count", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 16.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 73.0, "Title_stringindexer_transform": 112.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 26.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Honey Citron & Ginger Tea", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 149.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No Artificial Preservatives", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 266.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No Artificial Flavors or Colors\"", "Price": "Contains premium honey, citron slices, and ginger, which are harmoniously mixed togetherVonbee Honey Citron & Ginger Tea4.4 lb 2-countTeaJamSalad Dressing & More", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 254.0, "Price_stringindexer_transform": 49.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$15.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Honest Kids, Organic Juice Drink, Variety Pack, 6 fl oz, 40-Count", "Currency": "$", "Feature": "Juice Drink   USDA Organic   From Concentrate   6 oz Boxes   40-Count", "Product Description": "Variety pack: 16-Super Fruit Punch, 8-Appley Ever After, 8-Berry Berry Good Lemonade, 8-Goodness Grape", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 20.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 111.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 62.0, "Product Description_stringindexer_transform": 9.0}, {"Sub Category": "Beverages & Water", "Price": "$12.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Lipton Original Tea Bags, 312-count", "Currency": "$", "Feature": "3 Boxes", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 6.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 37.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 24.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "312 Bags Total", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 143.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Served Hot or Iced", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 162.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Rainforest Alliance Certified", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 172.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Kosher\"", "Price": "Original Lipton Tea Bags104 bags per box3 boxes 312 bags totalServed hot or icedRainforest Alliance CertifiedKosher", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 23.0, "Price_stringindexer_transform": 85.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$23.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "San Pellegrino Italian Sparkling Drink, Melograno & Arancia, 11.15 fl oz, 24-count", "Currency": "$", "Feature": "Product of Italy   11.15 fl oz Cans", "Product Description": "Sparkling orange and pomegranate beverage11.15 fl oz cans4 boxes of 6 cans24 total cans", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 5.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 50.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 1.0, "Product Description_stringindexer_transform": 6.0}, {"Sub Category": "Beverages & Water", "Price": "$39.99 ", "Discount": "After $5 OFF", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "5-hour Energy Shot, Regular Strength, Grape, 1.93 fl. oz, 24 Count", "Currency": "$", "Feature": "Regular Strength Energy Shot   Grape Flavor   Sugar free   1.93 fl oz Bottle   24 Count", "Product Description": "Regular Strength Energy Shot", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 7.0, "Discount_stringindexer_transform": 3.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 108.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 5.0, "Product Description_stringindexer_transform": 24.0}, {"Sub Category": "Grape Flavor", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 62.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Sugar free", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 77.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "1.93 fl oz Bottle", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 345.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "24 Count\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 209.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$16.49 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Pepsi Mini, 7.5 fl oz, 30-count", "Currency": "$", "Feature": "Original   7.5 fl oz Cans   30 Total Cans   100 Calories per Can", "Product Description": "0g saturated fat", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 109.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 86.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 60.0, "Product Description_stringindexer_transform": 51.0}, {"Sub Category": "20mg sodium", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 299.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "26g total sugar\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 147.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$549.99 ", "Discount": "No Discount", "Rating": "Rated 3.6 out of 5 stars based on 15 reviews.", "Title": "100% Spring Water, 2.5 Gallon, 2-count, 48 Case Pallet", "Currency": "$", "Feature": "Brand Varies by State   Full Pallet of Single Brand:   Arrowhead   Ice Mountain   Ozarka   Deer Park   Poland Spring   Zephyrhills", "Product Description": "Brand varies by geographical location.", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 78.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 34.0, "Title_stringindexer_transform": 49.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 101.0, "Product Description_stringindexer_transform": 50.0}, {"Sub Category": "Bottle Fee will apply to shipments going to California", "Price": " Connecticut", "Discount": " Delaware", "Rating": " Michigan", "Title": " New York", "Currency": " Oregon", "Feature": " Vermont and Maine.   100% spring water", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 319.0, "Price_stringindexer_transform": 71.0, "Discount_stringindexer_transform": 37.0, "Rating_stringindexer_transform": 55.0, "Title_stringindexer_transform": 19.0, "Currency_stringindexer_transform": 2.0, "Feature_stringindexer_transform": 46.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "2 - 2.5 gallon jugs per case", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 138.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "48 cases", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 154.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "96 total jugs", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 191.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "240 total gallons of water   Click here to view PDF of Regional Waters by State   State", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 190.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Regional Water Brand   AL", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 276.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Deer Park   AR", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 90.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ozarka   AZ", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 212.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead   CA", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 161.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead   CO", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 242.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead   CT", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 344.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Poland Spring   DC", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 41.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Deer Park   DE", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 320.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Deer Park   FL", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 110.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Zephyrhills   GA", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 56.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Deer Park   IA", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 39.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   ID", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 140.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead   IL", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 46.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   IN", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 43.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   KS", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 61.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead   KY", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 269.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   LA", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 244.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ozarka   MA", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 335.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Poland Spring   MD", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 187.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Deer Park   ME", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 326.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Poland Spring   Ml", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 70.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   MN", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 283.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   MO", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 131.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   MS", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 215.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ozarka   MT", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 132.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead   NC", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 354.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Deer Park   ND", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 122.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   NE", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 113.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   NH", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 98.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Poland Spring   NJ", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 64.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Poland Spring   NM", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 71.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead   NV", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 298.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead   NY", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 338.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Poland Spring   OH", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 334.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   OK", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 108.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ozarka   OR", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 203.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead   PA", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 33.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Deer Park   RI", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 88.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Poland Spring   sc", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 186.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Deer Park   SD", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 45.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   TN", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 295.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Deer Park   TX", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 183.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ozarka   UT", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 219.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead   VA", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 104.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Deer Park   VT", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 240.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Poland Spring   WA", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 58.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead   Wl", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 114.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Ice Mountain   WV", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 273.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Deer Park   WY", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 165.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Arrowhead\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 164.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$17.49 ", "Discount": "After $4.50 OFF", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Stash Tea, Variety Pack, 180-count", "Currency": "$", "Feature": "Stash Tea Bags   Green Tea   30 bags per box   6-boxes", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 83.0, "Discount_stringindexer_transform": 47.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 94.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 77.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "180-bags\"", "Price": "Variety pack:", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 84.0, "Price_stringindexer_transform": 104.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "1-Chai Spice Black Tea", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 263.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "1-Chamomile Herbal Tea (Caffeine Free)", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 97.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "1-Earl Grey Black Tea", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 123.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "1-English Breakfast Black Tea", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 268.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "1-Peppermint Herbal Tea (Caffeine Free)", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 296.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "1-Premium Green Tea\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 142.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$25.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "C2O Coconut Water Hydration Pack, The Original, 17.5 fl oz, 15-count", "Currency": "$", "Feature": "Never From Concentrate   Plant Based Hydration   Electrolytes in Every Can   Non-GMO   Chill before serving", "Product Description": "Coconut Water Hydration PackThe Original17.5 fl oz (518 mL) can15-countMore Information:Non-GMOChill before serving", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 53.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 100.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 31.0, "Product Description_stringindexer_transform": 53.0}, {"Sub Category": "Beverages & Water", "Price": "$11.69 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Oregon Chai, Original Organic Chai Tea Latte Concentrate, 32 fl. oz., 3-Count", "Currency": "$", "Feature": "Chai Tea Latte Concentrate   USDA Organic   Just Add Milk   Enjoy Hot   Enjoy Cold", "Product Description": "Original Blend of Premium Black Tea, Vanilla, Chai Spices and Honey", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 66.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 15.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 43.0, "Product Description_stringindexer_transform": 74.0}, {"Sub Category": "32 fl oz cartons", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 243.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "3 count", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 260.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Net Weight: 3 qt\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 310.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 4.8 out of 5 stars based on 312 reviews.", "Title": "Tiesta Tea Blueberry Wild Child, 2 - 1 Pound Bags & 5.5oz Tin", "Currency": "$", "Feature": "Non-GMO Project Verified", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 1.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 45.0, "Title_stringindexer_transform": 109.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 97.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$69.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 777 reviews.", "Title": "Pressed Cold-Pressed Juice & Shot Bundle -18 Bottles, 9 Juices & 9 Shots", "Currency": "$", "Feature": "9 - 12 oz. Bottles   9 - 2 oz.. Shots   No Sugars Added, No Added Water, 100% Fruits and Vegetables   Kosher   No Preservatives", "Product Description": "Due to the perishable nature of this item, orders do not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm PST on Tuesday will not ship until the following Monday.   Pressed Juicery is on a mission to make high nutrition a realistic option for all. Our cold-pressed juices are made with all-natural fruits and vegetables - no preservatives and no added sugars.", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 100.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 23.0, "Title_stringindexer_transform": 27.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 75.0, "Product Description_stringindexer_transform": 49.0}, {"Sub Category": "Roots - We've blended carrots and beets to create delicious juices for all taste buds-from earthy to sweet! Known for their rich color and sweet flavor", "Price": " root vegetables contain powerful benefits that promote liver health", "Discount": " fight free radicals", "Rating": " soothe the nervous system", "Title": " protect your eyesight", "Currency": " and more! Grown deep in the ground", "Feature": " root vegetables absorb high amounts of vitamins and minerals from the soil. They have distinct", "Product Description": " earthy flavors and are packed with fiber and complex carbohydrates", "Sub Category_stringindexer_transform": 207.0, "Price_stringindexer_transform": 122.0, "Discount_stringindexer_transform": 21.0, "Rating_stringindexer_transform": 58.0, "Title_stringindexer_transform": 59.0, "Currency_stringindexer_transform": 10.0, "Feature_stringindexer_transform": 53.0, "Product Description_stringindexer_transform": 22.0}, {"Sub Category": "Citrus Juices - Our citrus blend is refreshing", "Price": " hydrating and crisp. It contains ingredients like lemon and mint that are known to stimulate and alkalize the system", "Discount": " aid in digestion", "Rating": " and provide a pick-me-up when you're feeling down.", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 34.0, "Price_stringindexer_transform": 46.0, "Discount_stringindexer_transform": 29.0, "Rating_stringindexer_transform": 7.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Green Juices - Made from the freshest", "Price": " highest-quality green vegetables we can find", "Discount": " our green juice is a simple and easy addition to a healthy lifestyle. Leafy green vegetables are known for their antioxidants", "Rating": " phytonutrients", "Title": " as well as enhancing oxygen transport and serving as a natural source of energy. Our green juice is perfectly blended so you never have to compromise taste for nutrition.", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 341.0, "Price_stringindexer_transform": 51.0, "Discount_stringindexer_transform": 22.0, "Rating_stringindexer_transform": 64.0, "Title_stringindexer_transform": 66.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Shots - Our shots pack a powerful punch of fresh pressed ingredients that you can feel working! Throw one back for a quick pick-me-up or pour over your favorite juice for an extra boost of flavor.   Cold pressed juice and shots", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 150.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "All natural fruits and vegetables", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 193.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No sugars added", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 195.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No preservatives", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 8.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "High-pressured processed (HPP)", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 311.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Kosher", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 26.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Individually labeled", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 105.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Keep refrigerated", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 291.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Includes 3 greens with ginger", "Price": " 3 spicy roots", "Discount": " 3 sweet citrus", "Rating": " 3 wellness shots", "Title": " 3 vitality shots", "Currency": " 3 elderberry shots\"", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 185.0, "Price_stringindexer_transform": 39.0, "Discount_stringindexer_transform": 34.0, "Rating_stringindexer_transform": 50.0, "Title_stringindexer_transform": 5.0, "Currency_stringindexer_transform": 5.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$21.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Ito En Jasmine Green Tea, Unsweetened, 16.9 fl oz, 12-count", "Currency": "$", "Feature": "Unsweetened   Refrigerate After Opening   Non GMO   16.9 oz Bottle   12-count", "Product Description": "Jasmine Green TeaUnsweetened16.9 oz bottle12-count", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 3.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 65.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 4.0, "Product Description_stringindexer_transform": 54.0}, {"Sub Category": "Beverages & Water", "Price": "$19.99 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Pure Leaf Tea, Sweet Tea, 16.9 fl oz, 18-count", "Currency": "$", "Feature": "Sweet   16.9 fl oz Bottles   18 Total Bottles", "Product Description": "Real brewed tea - never from powder", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 4.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 82.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 40.0, "Product Description_stringindexer_transform": 39.0}, {"Sub Category": "No artificial flavors", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 315.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "No artificial sweeteners\"", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 331.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "Beverages & Water", "Price": "$21.79 ", "Discount": "No Discount", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "Ito En Oi Ocha Unsweetened Green Tea, 16.9 fl oz, 12-count", "Currency": "$", "Feature": "Non-GMO   Sugar Free   Fat Free   Product Of Taiwan", "Product Description": "Made With Japanese Green Tea12-count16.9 fl oz BottlesTotal Net Volume: 202.8 fl oz", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 116.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 83.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 8.0, "Product Description_stringindexer_transform": 63.0}, {"Sub Category": "Beverages & Water", "Price": "$99.99 ", "Discount": "No Discount", "Rating": "Rated 4.1 out of 5 stars based on 753 reviews.", "Title": "Pressed 3-Day Cleanse Bundle (18 Juices & 6 Shots)", "Currency": "$", "Feature": "24 Bottles   No Sugars Added   100% Fruits and Vegetables   No Preservatives   Kosher", "Product Description": "Due to the perishable nature of this item, orders do not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm PST on Tuesday will not ship until the following Monday.   Pressed is on a mission to make high nutrition a realistic option for all. Our cold-pressed juices are made with all-natural fruits and vegetables - no preservatives and no added sugars.   How to cleanse - Although everyone is different and needs to listen to their body as they cleanse, Pressed\u2019s juice plan recommends drinking 1 juice every 2 hours in the following recommended order: Greens with Ginger, Orange Turmeric, Roots with Ginger, Greens with Ginger, Sweet Citrus, Avocado Greens Smoothies. Drink the first one when you wake up in the morning, and try to drink the last one two hours before sleeping. Add one Wellness shot and one Vitality shot at any point of the day to boost your cleanse. Juice cleansing is intended to replace solid meals, though again everyone is different and should consume food, water and juice as they need. Be prepared for changes in your digestion and even sleep rhythms as your body adjusts to the cleanse, and make sure you stay hydrated with water throughout, as you might find shifting energy levels and mood in your first juice cleanse.   Green with Ginger - Made from the freshest, highest-quality green vegetables we can find, our green juice is a simple and easy addition to a healthy lifestyle. Leafy green vegetables are known for their antioxidants, phytonutrients, as well as enhancing oxygen transport and serving as a natural source of energy. Our green juice is perfectly blended, so you never have to compromise taste for nutrition.   Orange Turmeric - Orange Turmeric is a blend of orange, apple aloe vera, turmeric, lemon, and black pepper. Our Orange Turmeric elevates everyday OJ with a vibrant blend of orange juice, black pepper, and turmeric from Fiji.   Roots with Ginger - We've blended carrots and beets to create delicious juices for all taste buds-from earthy to sweet! Known for their rich color and sweet flavor, root vegetables contain powerful benefits that promote liver health, fight free radicals, soothe the nervous system, protect your eyesight, and more! Grown deep in the ground, root vegetables absorb high amounts of vitamins and minerals from the soil. They have distinct, earthy flavors and are packed with fiber and complex carbohydrates, which help the body to break down sugar.   Sweet Citrus - Our citrus blend is refreshing, hydrating and crisp. It contains ingredients like lemon and mint that are known to stimulate and alkalize the system, aid in digestion, and provide a pick-me-up when you're feeling down.   Avocado Greens Smoothie - Expertly blended and ready to go, this clean and simple recipe is packed with power greens like spinach, kale, and spirulina, mixed with banana, avocado, and matcha for a creamy-smooth taste.   Wellness Shots", "Sub Category_stringindexer_transform": 0.0, "Price_stringindexer_transform": 8.0, "Discount_stringindexer_transform": 1.0, "Rating_stringindexer_transform": 72.0, "Title_stringindexer_transform": 29.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 20.0, "Product Description_stringindexer_transform": 62.0}, {"Sub Category": "These shots are lemony with a powerful kick from ginger and cayenne. Ginger's spicy goodness contains anti-inflammatory properties that help with circulation", "Price": " aid in digestion by soothing the stomach and support glowing skin and circulation.   Vitality Shots", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 59.0, "Price_stringindexer_transform": 45.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "These shots are milder than the wellness shots", "Price": " sweet and spicy with an earthy aftertaste. Turmeric takes the spotlight here containing a compound called curcumin. Benefit from the anti-inflammatory and antioxidant properties of curcumin to relieve joint pain and muscle aches.   24 Bottles - 18 Juices (12 oz)", "Discount": " 6 Shots (2 oz)   6 Greens with Ginger", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 182.0, "Price_stringindexer_transform": 47.0, "Discount_stringindexer_transform": 43.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}, {"Sub Category": "3 Orange Turmeric", "Price": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "Discount": "This item is not returnable.", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "Currency": "$", "Feature": "Zero Calories   Zero Sweeteners", "Product Description": "Zero sugar", "Sub Category_stringindexer_transform": 174.0, "Price_stringindexer_transform": 0.0, "Discount_stringindexer_transform": 0.0, "Rating_stringindexer_transform": 0.0, "Title_stringindexer_transform": 0.0, "Currency_stringindexer_transform": 0.0, "Feature_stringindexer_transform": 0.0, "Product Description_stringindexer_transform": 0.0}], "FE": [{"transformationsData": [{"feature_label": "Sub Category", "transformation_label": "String Indexer"}], "feature": "Sub Category", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "0 sugar", "max": "\u200bCaffeine free", "missing": "0", "distinct": "358"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Sub Category"}, {"transformationsData": [{"feature_label": "Price", "transformation_label": "String Indexer"}], "feature": "Price", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "192", "mean": "", "stddev": "", "min": " \"\"Happy Birthday\"\" is written in swirls of pastel colors and is playful enough to get any party started. Simple to serve", "max": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "missing": "308", "distinct": "124"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Price"}, {"transformationsData": [{"feature_label": "Discount", "transformation_label": "String Indexer"}], "feature": "Discount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "148", "mean": "", "stddev": "", "min": " 10-Strawberry Watermelon (0.32 oz)", "max": "This item is not returnable.", "missing": "352", "distinct": "48"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Discount"}, {"transformationsData": [{"feature_label": "Rating", "transformation_label": "String Indexer"}], "feature": "Rating", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "83", "mean": "", "stddev": "", "min": " 1 Triple chocolateTrans fat freeContains PecansKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachMade in the USAImportant Handling Instructions:If not being consumed immediately upon arrival", "max": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "missing": "417", "distinct": "75"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Rating"}, {"transformationsData": [{"feature_label": "Title", "transformation_label": "String Indexer"}], "feature": "Title", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "118", "mean": "", "stddev": "", "min": " *Spirulina.   For any questions or concerns regarding your online order", "max": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "missing": "382", "distinct": "115"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Title"}, {"transformationsData": [{"feature_label": "Currency", "transformation_label": "String Indexer"}], "feature": "Currency", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "109", "mean": "", "stddev": "", "min": " 2- pack \"", "max": "$", "missing": "391", "distinct": "12"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Currency"}, {"transformationsData": [{"feature_label": "Feature", "transformation_label": "String Indexer"}], "feature": "Feature", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "105", "mean": "", "stddev": "", "min": " Vermont and Maine.   100% spring water", "max": "Zero Calories   Zero Sweeteners", "missing": "395", "distinct": "102"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Feature"}, {"transformationsData": [{"feature_label": "Product Description", "transformation_label": "String Indexer"}], "feature": "Product Description", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "80", "mean": "", "stddev": "", "min": " 2-count", "max": "Zero sugar", "missing": "420", "distinct": "78"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Product Description"}, {"feature": "Sub Category_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "128.93", "stddev": "117.83", "min": "0.0", "max": "357.0", "missing": "0"}, "updatedLabel": "Sub Category_stringindexe..."}, {"feature": "Price_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "16.58", "stddev": "31.68", "min": "0.0", "max": "123.0", "missing": "0"}, "updatedLabel": "Price_stringindexer_trans..."}, {"feature": "Discount_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "2.5", "stddev": "8.11", "min": "0.0", "max": "47.0", "missing": "0"}, "updatedLabel": "Discount_stringindexer_tr..."}, {"feature": "Rating_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "5.58", "stddev": "15.65", "min": "0.0", "max": "74.0", "missing": "0"}, "updatedLabel": "Rating_stringindexer_tran..."}, {"feature": "Title_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "13.12", "stddev": "28.81", "min": "0.0", "max": "114.0", "missing": "0"}, "updatedLabel": "Title_stringindexer_trans..."}, {"feature": "Currency_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "0.13", "stddev": "1.0", "min": "0.0", "max": "11.0", "missing": "0"}, "updatedLabel": "Currency_stringindexer_tr..."}, {"feature": "Feature_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "10.31", "stddev": "24.33", "min": "0.0", "max": "101.0", "missing": "0"}, "updatedLabel": "Feature_stringindexer_tra..."}, {"feature": "Product Description_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "6.01", "stddev": "16.57", "min": "0.0", "max": "77.0", "missing": "0"}, "updatedLabel": "Product Description_strin..."}], "samplecount": 500, "message": "Successfully executed", "status": 1, "userid": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "FEGraph": [{"values": {"label": ["Bakery & Desserts", "Certified Kosher OU-D", "14 Servings\"", "Cake Filling: Cream Cheese Frosting", "Cake Frosting: Cream Cheese Frosting", "Topped with Pink Silk Cherry Blossom Flowers (cherry blossom flowers are not edible", "Dimensions: 9\u201d diameter", "Serves 16-22", "Each Cake Arrives With It\u2019s Own Cake Care Card", "Allergens: Contains Wheat", "Ships Frozen\"", "Individually wrapped", "Made in and Imported from France", "Free-range eggs", "Non-GMO ingredients\"", "32 oz 2-Pack", "No Preservatives", "Contains Nuts\"", "Serves 14\"", "Strawberry Cheesecake", "Mango Cheesecake", "Kosher OU-D certified\"", "Baked in", "Non-GMO", "French traditional style Butter Cookies accented with sea salt", "Large round and crispy cookies stamped with the mark of St Michel\u2019s heritage\"", "No Sugar Added", "Kosher OU-Dairy\"", "12 Chocoloate Chunk Cookies", "Kosher Dairy OUD\"", "Cake Filling: Chocolate Ganache and Mousse Malted Cream", "Cake Frosting: Fudge Frosting topped with Fleur de Sel", "Kosher OU-D certified", "Serves approximately 12 people", "Weight: 7 lbs.", "Ships in Cooler with Dry Ice to Maintain Quality & Freshness\"", "Perfect for celebrating any happy or festive occasion -for kids and adults alike!   Features:   1 - 10 in Rainbow Cake", "Diameter: 10\"\" each", "Ships in Cooler with Dry Ice to Maintain Quality & Freshness", "Made in the USA   Some of our products may contain nuts. Our facility is NOT a nut-free facility", "If not being consumed immediately upon arrival", "Cake Filling: Raspberry Jam with Lemon Curd", "Cake Frosting: Lemon Buttercream", "Bottom Tier: 9\u201d Diameter", "Top Tier: 7\u201d Diameter", "Bake and Serve", "No Added Preservatives", "Kosher\"", "Fudgy Filling and Ganache Frosting", "Serves 16\"", "Decedent cake is simply irresistible. Chocolate cake with Hand decorated", "No added preservatives", "Fudgy filling and ganache frosting   This cake serves. (Approximately) 16 people", "Weight: 3.75 lbs..", "OU-D certified", "1 Turtle Style", "1 Triple Chocolate", "Kosher OU-D Certified", "Serves 28\"", "Layers of Ladyfingers Soaked in Coffee Syrup", "Filled with Vanilla Mascarpone Cheese Mousse\"", "Almond Flavored Cake with Pixie Fetti\u00ae Confetti", "Cake Filling: Almond Flavored Buttercream", "Cake Frosting: Almond Flavored Buttercream", "Devil\u2019s Food Cake", "Dark Chocolate Mousse Topped with Dark Chocolate Ganache\"", "PRODUCEDIN AFACILITYWHERENUTS", "We take the extra step of baking two", "Each Cake services 10-12 people", "Classic Flavors of Espresso and Mascarpone\"", "Almond Joconde Cake With Lemon Syrup", "Layered with White Chocolate Mousse & Lemon Curd\"", "2.2 lb Tin\"", "8 Jumbo Reese\u2019s Peanut Butter Cup Cookies", "7 Types of Cookies\"", "A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather", "Includes:   Rainbow Tricolori Cookies", "Fudge-swirled Cookies", "Pignoli Cookies", "Coconut Cookies", "Plan Sandwich Cookies", "Half Moon Cookies", "Torrincino Cookies   PRODUCED IN A FACILITY WHERE NUTS", "24 Mini Plain Filled Cannoli", "24 Mini Hand Dipped Belgian Chocolate Cannoli", "Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness", "Chocolate Cannoli: After thawing should be eaten within 48 hours", "Frozen: Can be stored up to one year   PRODUCED IN A FACILITY WHERE NUTS", "Frozen: Can be stored up to a year\"", "Variety of 4 Mary Macleod's Shortbread Handcrafted", "Multipack of 3 Tins of Shortbread Cookies.", "CONTAINS: Seventy-Two (72) TOTAL all-butter shortbread cookies in 4 flavors. Each tin has Twenty-Four (24) Variety Shortbread Cookies [3 tins total", "Each premium tin comes with four different flavors of our delectable shortbread cookies", "Struffoli Honey Balls\"", "Some of our products may contain nuts. Our facility is NOT a nut-free facility", "Important Handling Instructions:", "This product contains nuts.", "One taste and you\u2019ll see why our Huge Apple Pie has been delighting customers across the country for over 35 years!", "Beverages & Water", "Add a wellness shot to your juice or smoothie for an extra boost of nutrients", "Pair a shot with your favorite healthy snack for a delicious treat", "Take a wellness shot before your workout to energize your body   100% Organic Ingredients:   Ginger: Organic Apple", "Turmeric: Organic Pineapple", "Elderberry: Organic Apple", "Wheatgrass: Organic Pineapple", "Variety pack: 10-Ice Pop (0.35 oz)", "25 calories per bottle", "250 mg BCAA", "10% coconut water", "The ultimate recovery support", "Drink in rapid replenishment and intensely refreshing flavors", "30-Count\"", "\u200bCaffeine free", "250mg BCAAs", "B vitamins", "Antioxidants", "835mg electrolytes\"", "200mg caffeine\"", "5g sugar or less", "Immunity sidekick\"", "Zero Calories", "No Artificial Color or Flavors", "Minerals Added for a Pure Refreshing Taste\"", "32 oz. container", "30 calories per serving", "Free of dairy", "Net Weight 192 oz.\"", "Non-Dairy Beverage", "Made with California Almonds", "12-count", "1 qt Cartons", "Net Weight: 3 Gal\"", "8.25 oz. Chocolate Milks", "37% Less Fat than Whole Milk", "With Vitamins A & D", "UHT Pasteurized\"", "11 fl oz cans", "Total Volume 3.9 L\"", "0 sweeteners", "Water infused with fruit essences & other natural flavors\"", "SIMPLE PLANT-BASED INGREDIENTS: Califia Farms Caf\u00e9 Almond Milks are made with plant-based", "BLENDS SMOOTHLY INTO COFFEE: This plant-based non-dairy Caf\u00e9 Almond Milk blends beautifully into both hot and iced coffee", "BARISTA'S CHOICE DAIRY-FREE MILK: Califia Farms Caf\u00e9 Almond Milks are favored by professional baristas across the country for their ability to froth", "Refrigerate after opening\"", "Exclusive 3-day Juice Cleanse \u2013 organic cold pressed juices and elixirs used to detoxify your body and help you feel great! For best results", "3 Spicy Lemon", "3 Red Monster", "3Turbo", "3 Rinse + Rebeet   6 (2.4 oz.) Elixir Shots   3 Ginger", "3 Turmeric   Cold pressed", "Rich in vitamins and minerals", "Certified Organic", "Certified Kosher", "No heat pasteurization", "No preservatives", "No added sugar", "No additives (colors", "Vegan", "Gluten Free", "Product of Canada   Expiration Codes   January - JA", "February - FE", "March: - MR", "Aprill - AL", "May - MA", "June - JN", "July - JL", "August: - AU", "September - SE", "October: - OC", "November - NO", "December - DE   Instructions;   Refrigerate upon delivery", "Juices should be sealed and cool to the touch", "Organize according to provided cleanse guide", "Consume recommended juices 2 to 2.5 hours apart", "Drink water or organic herbal tea between each juice", "Avoid eating for best results", "If needed", "A perfect complement to any meal or occasion", "Made from recycled plastic bottles (excludes cap and label)\"", "Purified water", "Enhanced with minerals for a crisp taste\"", "Soft", "Natural electrolytes from tropical rain filtered through volcanic rock", "Bottled from a natural artesian aquifer in the remote Fiji Islands\"", "15.2 fl oz bottle\"", "Variety pack: 6-Root Beer", "Delicious", "2-5g sugar", "9g fiber", "Prebiotics", "No artificial sweeteners", "Gluten-free", "Paleo-Friendly", "Keto-Friendly", "Non-GMO Project Verified\"", "Dairy Free", "Soy Free", "6-count", "32 oz Cartons\"", "0g Calories", "Naturally Caffeinated (sourced from green tea)", "Plant-based ingredients", "3 flavors: Peach-Mango", "12 hour cold brewed", "Recyclable package", "No sugar added\"", "33.8 fl oz (1 Liter) carton", "9-count\"", "12 fl. oz. cans", "288 fl. oz. Total weight", "VARIETY PACK: Variety Multi-Pack of 24 cans measuring 12 oz each. Includes 12 Lime", "HEALTHIER: Unlike sports drinks", "GUILT FREE: Drink with zero worries! LaCroix contains 0 calories", "REFRESHING: LaCroix is a wholesome", "FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!\"", "Zero Sugar", "Zero Calories\"", "Zero calories", "Natural mineral water with natural CO2 added", "3 x 8-packs\"", "Real Horizon Milk on the GO", "8 g Protein per Serving", "18-count", "8 fl oz containers\"", "Natural minerals & electrolytes", "Sparkling water straight from the Alps\"", "Decadent Dark Chocolate Tasting Notes\"", "Premium Green Tea and Japanese Matcha", "Infused with Moringa", "Enhanced with B Vitamins and Plant-Based D3", "Prebiotic Fiber to Promote a Healthy Gut\"", "VitaCup Green Tea Instant Sticks are ideal for any tea drinker", "Premium Green Tea Leaves & Matcha Powder", "Nutrient-Dense Moringa Oleifera", "Vitamins B5", "Inulin Healthy Prebiotic Fiber", "Natural Antioxidants", "Dietitian Formulated", "12 fl. oz. can   Evaporated Milk\"", "Sugar", "Japanese Origin - Our premier non-GMO matcha comes from the lush volcanic regions of Kyoto and Kagoshima in Japan.   About Sencha Naturals   Welcome to our Sencha Naturals family! With a mission of \u201cGreen Tea for All", "Clean Ingredients - We are committed to providing products that are Non-GMO", "GMP Certified Facility - Based in Southern California", "Made with ingredients from natural origin Italian fruits\"", "20g rolled oats in every serving", "32 oz carton\"", "Net Weight 144 fl oz\"", "11.1 fl oz.\"", "11.1 fl oz (330 mL) carton", "12 ct", "Total 3.96 L\"", "6 - Tropical Vibe (starfruit pineapple)", "6 - Arctic Vibe (frozen berry)", "0 sugar", "Gluten free", "Kosher", "Non GMO", "Certified vegan\"", "Vegan\"", "The Original", "16.9 fl oz (500 mL) carton", "12-count   More Information:   100% Juice", "Never from concentrate", "Hydrate Naturally", "Full of Electrolytes and Nutrients", "Coconuts Hand-picked From Small Family Farms\"", "Honey Citron & Ginger Tea", "No Artificial Preservatives", "No Artificial Flavors or Colors\"", "312 Bags Total", "Served Hot or Iced", "Rainforest Alliance Certified", "Grape Flavor", "Sugar free", "1.93 fl oz Bottle", "24 Count\"", "20mg sodium", "26g total sugar\"", "Bottle Fee will apply to shipments going to California", "2 - 2.5 gallon jugs per case", "48 cases", "96 total jugs", "240 total gallons of water   Click here to view PDF of Regional Waters by State   State", "Regional Water Brand   AL", "Deer Park   AR", "Ozarka   AZ", "Arrowhead   CA", "Arrowhead   CO", "Arrowhead   CT", "Poland Spring   DC", "Deer Park   DE", "Deer Park   FL", "Zephyrhills   GA", "Deer Park   IA", "Ice Mountain   ID", "Arrowhead   IL", "Ice Mountain   IN", "Ice Mountain   KS", "Arrowhead   KY", "Ice Mountain   LA", "Ozarka   MA", "Poland Spring   MD", "Deer Park   ME", "Poland Spring   Ml", "Ice Mountain   MN", "Ice Mountain   MO", "Ice Mountain   MS", "Ozarka   MT", "Arrowhead   NC", "Deer Park   ND", "Ice Mountain   NE", "Ice Mountain   NH", "Poland Spring   NJ", "Poland Spring   NM", "Arrowhead   NV", "Arrowhead   NY", "Poland Spring   OH", "Ice Mountain   OK", "Ozarka   OR", "Arrowhead   PA", "Deer Park   RI", "Poland Spring   sc", "Deer Park   SD", "Ice Mountain   TN", "Deer Park   TX", "Ozarka   UT", "Arrowhead   VA", "Deer Park   VT", "Poland Spring   WA", "Arrowhead   Wl", "Ice Mountain   WV", "Deer Park   WY", "Arrowhead\"", "180-bags\"", "1-Chai Spice Black Tea", "1-Chamomile Herbal Tea (Caffeine Free)", "1-Earl Grey Black Tea", "1-English Breakfast Black Tea", "1-Peppermint Herbal Tea (Caffeine Free)", "1-Premium Green Tea\"", "32 fl oz cartons", "3 count", "Net Weight: 3 qt\"", "Roots - We've blended carrots and beets to create delicious juices for all taste buds-from earthy to sweet! Known for their rich color and sweet flavor", "Citrus Juices - Our citrus blend is refreshing", "Green Juices - Made from the freshest", "Shots - Our shots pack a powerful punch of fresh pressed ingredients that you can feel working! Throw one back for a quick pick-me-up or pour over your favorite juice for an extra boost of flavor.   Cold pressed juice and shots", "All natural fruits and vegetables", "No sugars added", "High-pressured processed (HPP)", "Individually labeled", "Keep refrigerated", "Includes 3 greens with ginger", "No artificial flavors", "No artificial sweeteners\"", "These shots are lemony with a powerful kick from ginger and cayenne. Ginger's spicy goodness contains anti-inflammatory properties that help with circulation", "These shots are milder than the wellness shots", "3 Orange Turmeric"], "data": [33, 4, 1, 1, 1, 1, 3, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 5, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 66, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Sub Category", "count": 358, "min": "0 sugar", "max": "\u200bCaffeine free"}, {"values": {"label": ["$56.99 ", "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "A cake the dessert epicure will die for!Our Top Selling Cake! Fudge brownie base, layered in velvety smooth peanut butter mousse, rich chocolate cake, topped with brownie chunks, handful of peanut butter chips, drizzled in fudge. This cake is the thoughtful gift idea that\u2019s perfect for family, friends, coworkers, or to anyone you care about in your life. -\tGenerously sized precut slices, a cake lover\u2019s dreams come true! Includes:Measures 10\u201d diameterWeighs in at 6.8 lbs.14 servings OU-D certified, the most trusted kosher certification in the U.S.All natural with no added preservativesSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "$159.99 ", " please do not consume", " 7\u201d high", " Milk", "$44.99 ", "Moist and buttery sponge cakes with the traditional European madeleine flavor of almond. The Classic Madeleine is baked in the shape of seashell with ridges on one side and a \u201cbelly\u201d on the other. Each madeleine is individually-wrapped for portion control and convenience.The Origin of the Madeleine: 18th century King Stanislas 1st, Duke of Lorraine During a festive dinner party in Commercy, France, the king\u2019s chef abruptly left the kitchen. Seeking a solution to feed his guests dessert, a servant girl in the kitchen offered to make her family\u2019s traditional pastry. The king enjoyed the little cake so much that he named it after the servant: Madeleine. Baked with non-GMO ingredients and free-range eggs. No preservatives, palm oil, hydrogenated oil or colorings. Baked with love in France.We all have our Madeleine moment:Enjoy everyday for breakfast, snack or dessert (Just as the French do!)Pack in lunches or backpacks for schoolServe during business, book club or PTA meetingsCut in half and fill with jelly or chocolate hazelnut spreadDecorate cakes or cupcakes with classic seashell shapeIncludes:100 countIndividually wrappedFree-range eggsNon-GMO ingredients", "$39.99 ", "These delectable butter pecan meltaways are the perfect snack or dessert for the whole family. The treats are made with pure creamy butter and large pecan chunks and have just the right amount of powdered sugar to satisfy your sweet tooth.Includes:Includes: 2 Tins (32 oz. each)Contains nutsNo preservativesEnjoy with your morning coffee or teaCookies can be stored at room temperature for up to 60 daysEach tin contains approximately 64 cookiesKosher OU-DSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "$59.99 ", "A cake the dessert epicure will die for!To the ultimate chocolate lover - We've baked your dream cake! Four split layers of our rich chocolate cake, filled with a smooth milk chocolate mousse, finished in chocolate ganache & covered in dark chocolate bark pieces. This cake is the thoughtful gift idea that\u2019s perfect for family, friends, coworkers, or to anyone you care about in your life. Generously sized precut slices, A cake lover\u2019s dreams come true! Includes:1 - 10\u201d Premier Chocolate Overload CakeWeighs in at 7.2 lbs.14 Servings OU-D certified, the most trusted kosher certification in the U.S.All natural with no added preservativesSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "\"Strawberry Cheesecake: There's only one way to make our cheesecakes taste even better - add fruit! We've topped off our plain New York cheesecake with a generous helping of strawberry preserves for a taste that's to die for. Each slice is packed with loads of creamy filling, graham crust and sweet strawberries.Mango Cheesecake: We've done it again with our Mango Cheesecake. It's a 10\"\" cake with swirls of mango on top of a creamy cheesecake and delicious crust. This mix of cream cheese", "$74.99 ", " and Imported from", " No Trans Fat", "Creamy Dreamy:This smooth creamy cheesecake has no sugar added and no flour. It\u2019s hard to believe we\u2019ve taken that out, and what remains is a light luscious dessert with no unpleasant aftertaste.Marble Truffle:A layer of our rich, delicious, flourless, no-sugar-added (NSA) chocolate truffle cake is topped with a layer of our wonderful no-sugar-added cheesecake, then swirled with a bit of chocolate on top. The combination results in a flourless cake that is the perfect blend of rich sinful chocolate balanced with cool creamy cheesecake. Perfect for chocolate lovers as well as cheesecake lovers.Includes:1 - Creamy Dreamy Cheesecake 1- Marble Truffle CheesecakeEach Cheesecake serves approximately 14 people28 slices totalWeight: Approximately 3 lbs. 5 oz. EachShips in Cooler with Dry Ice to Maintain Quality & FreshnessMade in the USAKosher OU-DairySome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: If not being consumed immediately upon arrival, cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.", "$29.99 ", "Due to the perishable nature of this product orders will only ship on Monday and Tuesday for Thursday and Friday delivery. Orders will not ship over the weekend. Orders placed after 9 am PST on Tuesday will not ship until the following Monday.David\u2019s Cookies has perfected the art of the chocolate chunk cookie by using only the best ingredients. Our recipe calls for fresh eggs, milk, velvety butter, and loads of big Chocolate chunks to create the most irresistible cookies on this planet.Chocolate Chunk:Approximately 12 cookies/servingsKosher Dairy OUDCan be frozen for up to 6 months Brownie Tray:Fudgy chocolate brownie made with pure melted chocolate. Filled with walnuts, chocolate chips, peanut butter chips and topped with chocolate ganache drizzle. Approximately 6 servingsKosher Dairy OUDCan be frozen for up to 6 monthsSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "$62.99 ", "A cake the dessert epicure will die for! Five bright and colorful layers of this delightful cake are perfect for celebrating any happy or festive occasion! We\u2019ve decorated this dessert with a lightly flavored vanilla icing to keep this colorful surprise a secret until you cut the first slice.", " and as a result it is possible that any product may have come in contact with nut or nut oils   Important Handling Instructions:", " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.\"", "$299.99 ", " 3 1/2\u201d High", "$54.99 ", "There is nothing like eating a warm just baked cookie right from your own oven. Featuring David\u2019s Cookies world famous Preformed Gourmet Chocolate Chunk Cookie Dough made with pure, fresh ingredients like milk, flour, sugar, eggs and butter. Our preformed Chocolate Chunk cookie dough makes baking cookies fun and easier than ever. It's a simple One-Step process: put the sheet in the oven, bake and you're done! Features:Includes 90 Pieces of 1.5 oz Preformed Gourmet Chocolate Chunk Frozen Cookie DoughApprox. 8.5 pounds of cookie doughNo Added PreservativesBake and ServeShips in Cooler with Dry Ice to Maintain Quality & FreshnessKosher OU-D CertifiedSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils.Important Handling Instructions: Freeze for up to six months in a freezer safe container.Baking Instructions: Preheat oven to 350\uf0b0 degrees F. (Keep dough frozen until ready to use). Place cookies on ungreased baking sheet at least 3\u201d apart. Bake until slightly golden brown, approximately 12-14 minutes. Let Cool.", "\"It's not just the birthday girl or boy that will be smiling when they enjoy David's Cookies 10\"\" Chocolate Birthday Cake. From the moist dark chocolate with a fudgy filling to the candy confetti", " \"\"Happy Birthday\"\" is written in swirls of pastel colors and is playful enough to get any party started. Simple to serve", " the most respected kosher certification", " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 1 week.\"", "$89.99 ", " Chocolate", "\"We've done it again with our Turtle Cheesecake made from a recipe straight out of Brooklyn. It's a 10\"\" cake with clumps of chewy pecans drenched in a coating of caramel on top of a creamy cheesecake. This mix of cream cheese", "$49.99 ", "$99.99 ", "MILK", " three and sometimes four times a day", "$24.99 ", "Due to the perishable nature of this product orders will only ship on Monday and Tuesday for Thursday and Friday delivery. Orders will not ship over the weekend. Orders placed after 9 am PST on Tuesday will not ship until the following Monday. Whoever said that bigger isn't always better never tasted fresh baked giant cookies from David's Cookies. These lusciously JUMBO cookies, made with no added preservatives, reign supreme and comes in 4.5 oz fabulous, flavorsome, fresh baked giant cookies.Triple Chocolate:Decadent to say the least! This cookie is made from David\u2019s famous chocolate chunk cookie dough, generously topped with HERSHEY\u2019S\u00ae MINI KISSES, semi-sweet chocolate chunks & milk chocolate chunks!\tPeanut Butter:Peanut butter lovers unite! Peanut butter cookie dough is loaded with peanut butter chips and topped with chunks of REESE\u2019S\u00ae Peanut Butter Cups.Includes:2-pack Includes: 2 tins of 4 decadent 4.5oz Triple Chocolate Cookies and 4 decadent 4.5oz Peanut Butter Cookies per tinKosher OU-D certified16 Jumbo decadent 4.5oz cookies totalWeight: Approximately 4.5oz each cookieMade in the USASome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: Consume within 48 hours of receipt or freeze for up to six months in a freezer safe container.", "$72.99 ", "Ferrara\u2019s delicate & buttery cookies are the perfect companion with a cup of coffee. Using secret Old World recipes that are over 100 years old, Ferrara bakes perfect rainbow (tricolori), pignoli (almond-flavored cookies studded with pine nuts), fudge-swirled cookies & more.", " Enrico Scoppa and our great grand-uncle", " MILK", "$119.99 ", "$109.99 ", " Premium All-Butter Shortbread Cookies | Flavors: Classic", " 72 cookies total]", " each one baked to perfection using only the finest ingredients.\"", "$34.99 ", "Ferrara's Bakery of LIttle Italy in New York CityFerrara\u2019s delicate & buttery cookies are the perfect companion with a cup of coffee. Using secret Old World recipes that are over 100 years old, Ferrara bakes perfect rainbow (tricolori), pignoli (almond-flavored cookies studded with pine nuts), fudge-swirled cookies & more.Struffoli also known as Honey Balls is a Neapolitan dish made of deep fried balls of sweet dough. Crunchy on the outside and light inside, struffoli are mixed with honey and other sweet ingredients and formed into mounds or rings. They are often served for holidays and are sometimes served warm. Best stored at room temperature.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties. We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family-owned business operated by the fifth generation. That\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little.Includes:2 lb Assorted Italian Cookie Tray16 oz. Struffoli Honey BallsPRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENT", " and as a result it is possible that any product may have come in contact with nut or nut oils.", " your pie should be placed in the freezer. The pie will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 7 days. The pie is fully baked and can be enjoyed chilled or at room temperature. Thaw the pie in the fridge for about 4 hours (or on your kitchen counter for around 2 hours).\"", " your pie should be placed in the freezer. The pie will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 7 days. The pie is fully baked", " Organic Lemon", "$27.99 ", " 10-Blue Raspberry (0.34 oz)", "$21.99 ", "$20.99 ", "$19.99 ", "$439.99 ", "*Business Members please click on Business Delivery tab above to see if local delivery is available in your area.The item may also be available at your local warehouse at a lower non-delivered price.Bottle Fee will apply to shipments going to California, Connecticut, Delaware, Michigan, New York, Oregon, Vermont and Maine. Kirkland Signature bottled water\u2019s pure, fresh taste, high quality and value makes staying refreshed and hydrated easy! Our water is bottled with state-of-the-art purification, filtration and reverse osmosis technologies with the highest quality certifications in the industry. Kirkland Signature bottled water is the perfect solution for your on-the-go lifestyle!Product description:Proprietary mineral blend added to create Kirkland Signature\u2019s pure taste.Bottled using state-of-the-art purification, filtration and reverse osmosis technologies with each bottle undergoing automated digital imaging inspection.Utilization of food grade recycled PET (rPET) where feasible. Our bottle and cap are recyclable. Please use store drop off locations to recycle the printed filmFeatures:Perfect size for an on-the-go lifestyle, school lunches, sports, events and entertaining.Zero calories, no sweeteners and no artificial colors or flavors.Bottled using the highest quality standards in the industry.Minerals added for a pure, refreshing taste.16.9 oz/0.5L plastic (PET & rPET) bottles o\tVirgin and Recycled Polyethylene Terephthalate (PET & rPET) are BPA free.40 bottles per case48 cases per pallet", "$9.99 ", " lactose", "$14.99 ", "$18.99 ", "$21.49 ", "$17.99 ", " dairy-free ingredients that are Non-GMO Certified", " for a smooth and creamy cup of coffee every time.", " steam", " consume only with water and your choice of organic herbal tea.   15 (12 oz.) Cold Pressed Juices   3Hulk", " flavors)", " consume organic fruits and vegetables moderately   For any questions or concerns regarding your online order", "$23.99 ", "$4.99 ", " smooth taste", " 6-Vintage Cola", " refreshing", " plant fiber", " flavors", "$12.99 ", "$32.99 ", " Frose-Rose and Grape\"", "$13.79 ", " 6 Lemon", " vitamin enhanced waters", " 0 sweeteners", " refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym", "$23.49 ", "2-pack (two 1.87 lb cocoa tins) Each 1.87 lb. tin makes 42 servings of hot cocoaMade with ethically sourced cocoa powderStarbucks is committed to purchasing cocoa that\u2019s grown and traded in an ethical and transparent way Made with cane sugarJust add 1-cup hot milk KosherIngredients: cane sugar, cocoa (processed with alkali), vanilla powder", " Minerals", "Start your morning with a burst of energy and focus from our delicious Green Tea Instant Sticks. Sip on a smooth, satisfying green tea infusion made with traditional Japanese matcha powder, plus an infusion of moringa and essential vitamins. Each packet contains a balanced combination of nutrients, amino acids, and prebiotic fiber.", " especially the wellness warrior on-the-go! Pour one packet with 8 ounces of hot or cold water and stir until completely dissolved (about 10 seconds). You\u2019ll love the energy and detox benefts from a powerhouse blend of antioxidants and natural caffeine.   2-pack (48-counttotal)", " B6", " No Artificial Ingredients", " Supports Energy & Mood", " Sugar-Free", "$22.99 ", " Gluten", " Gluten-Free and Veganwhen possible.", " all of our products are packaged in our own cGMP certified facility for highest quality control", "$8.99 ", "$15.99 ", "$28.99 ", "Pure Coconut Water", "Contains premium honey, citron slices, and ginger, which are harmoniously mixed togetherVonbee Honey Citron & Ginger Tea4.4 lb 2-countTeaJamSalad Dressing & More", "Original Lipton Tea Bags104 bags per box3 boxes 312 bags totalServed hot or icedRainforest Alliance CertifiedKosher", "$16.49 ", "$549.99 ", " Connecticut", "$17.49 ", "Variety pack:", "$25.99 ", "$11.69 ", "$69.99 ", " root vegetables contain powerful benefits that promote liver health", " hydrating and crisp. It contains ingredients like lemon and mint that are known to stimulate and alkalize the system", " highest-quality green vegetables we can find", " 3 spicy roots", "$21.79 ", " aid in digestion by soothing the stomach and support glowing skin and circulation.   Vitality Shots", " sweet and spicy with an earthy aftertaste. Turmeric takes the spotlight here containing a compound called curcumin. Benefit from the anti-inflammatory and antioxidant properties of curcumin to relieve joint pain and muscle aches.   24 Bottles - 18 Juices (12 oz)"], "data": [1, 309, 1, 3, 1, 3, 4, 1, 1, 4, 1, 7, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 3, 1, 1, 1, 1, 1, 7, 1, 1, 2, 4, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 2, 2, 1, 4, 2, 1, 7, 1, 5, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 4, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Price", "count": 124, "min": " \"\"Happy Birthday\"\" is written in swirls of pastel colors and is playful enough to get any party started. Simple to serve", "max": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation"}, {"values": {"label": ["No Discount", "This item is not returnable.", " remove before eating)", " Soy", " and mango will take you on a tropical journey of satisfaction!Includes:2-pack Includes: 1 Strawberry Cheesecake and 1 Mango CheesecakeKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachShips in Cooler with Dry Ice to Maintain Quality & FreshnessMade in the USASome of our products may contain nuts. Our facility is NOT a nut-free facility", " France", " No Hydrogenated Oil   Palm Oil Free\"", " it's sugary heaven from top to bottom! Moist and rich", " your cake is ready to eat once thawed. Includes plates", " Caramel", " nuts and caramel is a true taste excursion. For our Triple Chocolate Cheesecake we\u2019ve melted milk chocolate on top of a creamy chocolate cheesecake center and set the whole confection on top of a layer of Devil\u2019s food cake. This exquisite dessert is the perfect choice for any gourmet chocolate lover.Features:2-pack Includes: 1 Chocolate Carmel Pecan", "EGGS", " in small batches. Because of the frequency with which we bake", " Antonio Ferrara", " EGGS", " Chocolate Crunch", " and can be enjoyed chilled", "After $30 OFF", " Organic Ginger", " Organic Turmeric", " 10-Strawberry Watermelon (0.32 oz)", "After $5 OFF", " soy", " Kosher", " and form latte art.", "After $20 OFF", " please reach out to Pulp and Press directly at support@pulpandpress.com or by phone at (866)-208-9319. A representative will be in touch with you within 24 hours.\"", " 6-Classic Grape", " and actually good for you", " and botanicals to support digestive health", " or preservatives", " and 6 Grapefruit. Perfect for the fridge", " and sodas", " and 0 sodium. Our sparkling water is vegan", " in the office or on the go!", " and Antioxidants", " B1", " Soy-Free", " Dairy-Free - Matcha is naturally free of gluten", " we believe in transparency and accountability", " food safety", " Delaware", "After $4.50 OFF", " fight free radicals", " aid in digestion", " our green juice is a simple and easy addition to a healthy lifestyle. Leafy green vegetables are known for their antioxidants", " 3 sweet citrus", " 6 Shots (2 oz)   6 Greens with Ginger"], "data": [91, 353, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Discount", "count": 48, "min": " 10-Strawberry Watermelon (0.32 oz)", "max": "This item is not returnable."}, {"values": {"label": ["Rated 4.3 out of 5 stars based on 265 reviews.", "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Rated 5 out of 5 stars based on 1 reviews.", " Egg", "Rated 4.1 out of 5 stars based on 441 reviews.", "Rated 4.7 out of 5 stars based on 9459 reviews.", "Rated 4.5 out of 5 stars based on 758 reviews.", "Rated 4.4 out of 5 stars based on 369 reviews.", " and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: If not being consumed immediately upon arrival", "Rated 4.7 out of 5 stars based on 2241 reviews.", "Once upon a time in the French coastal town of St Michel Chef-Chef, a Chef P\u00e2tissier Grellier was making delicious round butter cookies he called Galettes from his secret recipe that he baked with love in his oven. His Galettes were so delicious and popular that one day, his wife Constance had a genius idea: \u201cWhy not sell the cookies to the beachgoers visiting from Paris?\u201d The cookies were a huge hit and the French Galette was born.   This is the St Michel Bakery started in 1905. Since then, this family owned company brings you the very best of French butter cookies and other French pastry delights.   La Grande Galette is inspired from an original recipe from 1905 in the tradition of French Cookie Baking. St Michel French Butter Cookies are made only from selected wholesome ingredients like free-range eggs our specialty Gu\u00e9rande Sea Salt.   No Coloring, no preservatives, no hydrogenated fat and no palm oil guaranteed.   Includes:   6 Pack Total - Each carton holds 1.3LB (600g) per pack   Each carton holds 12 individual Pouches of 3 cookies each for freshness per pack. Total 36 cookies per carton.", "Rated 4.4 out of 5 stars based on 232 reviews.", "Rated 4.4 out of 5 stars based on 1679 reviews.", "Rated 5 out of 5 stars based on 2 reviews.", "Rated 4 out of 5 stars based on 357 reviews.", "Rated 3 out of 5 stars based on 1 reviews.", "Rated 4.7 out of 5 stars based on 273 reviews.", "Rated 4.6 out of 5 stars based on 369 reviews.", " this", " forks", "Rated 4.6 out of 5 stars based on 133 reviews.", "Rated 4.5 out of 5 stars based on 452 reviews.", " Pecan", " 1 Triple chocolateTrans fat freeContains PecansKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachMade in the USAImportant Handling Instructions:If not being consumed immediately upon arrival", "No Reviews", "Rated 4.2 out of 5 stars based on 85 reviews.", "Rated 1.5 out of 5 stars based on 2 reviews.", "Rated 3.6 out of 5 stars based on 5 reviews.", " Ferrara acquired our great reputation for quality and freshness. Today", "Rated 3 out of 5 stars based on 2 reviews.", "Rated 4.7 out of 5 stars based on 687 reviews.", "Rated 4.3 out of 5 stars based on 845 reviews.", "Rated 4.3 out of 5 stars based on 87 reviews.", " opera impresario and showman", " SOY & FLOUR ARE PRESENT\"", "Rated 2.2 out of 5 stars based on 4 reviews.", " SOY & FLOUR ARE PRESENT   24 Mini Plain Filled Cannoli", "Rated 4.2 out of 5 stars based on 181 reviews.", "Rated 4 out of 5 stars based on 16 reviews.", " Dutch Chocolate and Maple Crunch.", "Rated 4.5 out of 5 stars based on 702 reviews.", "Rated 4.2 out of 5 stars based on 137 reviews.", "Rated 3 out of 5 stars based on 5 reviews.", " at room temperature or it can be heated in a 325\u00ba oven for about 1 \u00bd hours. Thaw the pie in the fridge for about 24 hours (or on your kitchen counter for around 5 hours).\"", "Rated 4.5 out of 5 stars based on 28 reviews.", " Organic Turmeric", " Organic Black Pepper.", " Organic Elderberry extract", " Organic Wheatgrass", "Rated 4.3 out of 5 stars based on 1957 reviews.", " vegan", "Rated 4.4 out of 5 stars based on 40 reviews.", "Rated 4.8 out of 5 stars based on 33 reviews.", " 6-Orange Squeeze", " office", " LaCroix is healthy for you; natural sparkling water with 0 calories", " gluten free", "Rated 4.5 out of 5 stars based on 1911 reviews.", "Rated 4 out of 5 stars based on 138 reviews.", " B12", " Dairy-Free", "Rated 4.8 out of 5 stars based on 1150 reviews.", " sugar", " and take the sustainable road less traveled by focusing on people and planet over profits.", " and oversight.   Includes:   3x - 12 oz bags\"", "Rated 4.7 out of 5 stars based on 2340 reviews.", "Rated 3.6 out of 5 stars based on 15 reviews.", " Michigan", "Rated 4.8 out of 5 stars based on 312 reviews.", "Rated 4 out of 5 stars based on 777 reviews.", " soothe the nervous system", " and provide a pick-me-up when you're feeling down.", " phytonutrients", " 3 wellness shots", "Rated 4.1 out of 5 stars based on 753 reviews."], "data": [1, 418, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Rating", "count": 75, "min": " 1 Triple chocolateTrans fat freeContains PecansKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachMade in the USAImportant Handling Instructions:If not being consumed immediately upon arrival", "max": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather"}, {"values": {"label": ["David\u2019s Cookies Mile High Peanut Butter Cake, 6.8 lbs (14 Servings)", "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "\"The Cake Bake Shop 8\"\" Round Carrot Cake (16-22 Servings)\"", "St Michel Madeleine, Classic French Sponge Cake 100 - count", "David's Cookies Butter Pecan Meltaways 32 oz, 2-pack", "David\u2019s Cookies Premier Chocolate Cake, 7.2 lbs (Serves 14)", "David's Cookies Mango & Strawberry Cheesecake 2-count (28 Slices Total)", " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.\"", "La Grande Galette French Butter Cookies, 1.3 lb, 6-pack", "David's Cookies No Sugar Added Cheesecake & Marble Truffle Cake, 2-pack (28 Slices Total)", "David's Cookies Brownie and Cookie Combo Pack", "\"The Cake Bake Shop 8\"\" Round Chocolate Cake (16-22 Servings)\"", "\"David's Cookies 10\"\" Rainbow Cake  (12 Servings)\"", "The Cake Bake Shop 2 Tier Special Occasion Cake (16-22 Servings)", "David's Cookies 90-piece Gourmet Chocolate Chunk Frozen Cookie Dough", "David's Cookies Chocolate Fudge Birthday Cake, 3.75 lbs.  Includes Party Pack (16 Servings)", " napkins", "Ferrara\u2019s Bakery New York Cheesecake 2-pack", "David\u2019s Cookies Variety Cheesecakes, 2-pack (28 Slices Total)", "Classic Cake Tiramisu Quarter Sheet Cake (14 Pre-Cut Total Slices, 4.57 Oz. Per Slice, 4 Lbs. Total Box)", "Mary Macleod's Gluten Free Shortbread Cookies Mixed Assortment 8-Pack ", "\"The Cake Bake Shop 8\"\" Round Pixie Fetti Cake (16-22 Servings)\"", "Classic Cake Chocolate Entremet Quarter Sheet Cake (14 Pre-Cut Total Slices, 4 Oz. Per Slice, 3.5 Lbs. Total Box)", "Ferrara\u2019s Bakery 8 in. Tiramisu Cake, 2-pack", " Enrico Scoppa and our great grand-uncle", " Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892", "Classic Cake Limoncello Quarter Sheet Cake (14 Pre-Cut Total Slices, 4 Oz. Per Slice, 3.5 Lbs Total Box)", "David\u2019s Cookies Decadent Triple Chocolate made with mini Hershey\u2019s Kisses and Reese\u2019s Peanut Butter Cup Cookies Tin \u2013 2 Count", "Ferrara's Bakery 4 lbs. Italian Cookie Pack", " opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties", "\"Ferrara's Bakery 48 Mini Cannoli's (24 Plain Filled and 24 Hand Dipped Belgian Chocolate) - 1.5\"\" to 2\"\" In Length\"", "Ferrara's Bakery 24 Large Cannoli's (12 Plain Filled and 12 Hand Dipped Belgian Chocolate)", "Mary Macleod\u2019s Shortbread, Variety Tin, 3-pack, 24 cookies per tin", "Ferrara's Bakery Rainbow Cookies 1.5 lb", "Ferrara's Bakery 2 lb Italian Cookie Tray and Struffoli", "\"Tootie Pie 11\"\" Heavenly Chocolate Pie", "\"Tootie Pie 11\"\" Whiskey Pecan Pie", "\"Tootie Pie 11\"\" Huge Original Apple Pie\"", "Pulp & Press Organic Cold-Pressed Wellness Shot Pack, 48-pack", " *Spirulina.   For any questions or concerns regarding your online order", "Prime Hydration+ Sticks Electrolyte Drink Mix, Variety Pack, 30-Count", "Prime Hydration Drink, Variety Pack, 16.9 fl oz, 15-count", "Alani Nu Energy Drink, Variety Pack, 12 fl oz, 18-count", "Poppi Prebiotic Soda, Variety Pack, 12 fl oz, 15-count", "Kirkland Signature Bottled Water 16.9 fl oz, 40-count, 48 Case Pallet", "Kirkland Signature, Organic Almond Beverage, Vanilla, 32 fl oz, 6-Count", "Kirkland Signature, Almond Milk, 1 qt, 12-count", "Kirkland Signature, Organic Reduced Fat Chocolate Milk, 8.25 fl oz, 24-Count", "Kirkland Signature Colombian Cold Brew Coffee, 11 fl oz, 12-count", "Hint Flavored Water, Variety Pack, 16 fl oz, 21-count", "Califia Farms, Cafe Almond Milk, 32 oz, 6-Count", " and free from carrageenan.", "Pulp and Press 3-Day Organic Cold Pressed Juice Cleanse", "Saratoga Sparkling Spring Water, 16 fl oz, 24-count", "Pure Life Purified Water, 8 fl oz, 24-count", "Fiji Natural Artesian Water, 23.7 fl oz, 12-count", "Tropicana, Apple Juice, 15.2 fl oz, 12-Count", "Olipop 12 oz Prebiotics Soda Variety Pack, 24 Count", "SO Delicious, Organic Coconut Milk, 32 oz, 6-Count", "La Colombe Draft Latte Cold Brew Coffee, Variety Pack, 9 fl oz, 12-count", "Tropicana, 100% Orange Juice, 10 fl oz, 24-Count", "Coca-Cola Mini, 7.5 fl oz, 30-count", "Joyburst Energy Variety, 12 fl oz, 18-count", "Illy Cold Brew Coffee Drink, Classico, 8.45 fl oz, 12-count", "Kirkland Signature, Organic Coconut Water, 33.8 fl oz, 9-count", "LaCroix Sparkling Water, Variety Pack, 12 fl oz, 24-count", " or your next family get-together!", " 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.", " non-GMO", "C4 Performance Energy Drink, Frozen Bombsicle, 16 fl oz, 12-count", "San Pellegrino Sparkling Natural Mineral Water, Unflavored, 11.15 fl oz, 24-count", "Kirkland Signature Green Tea Bags, 1.5 g, 100-count", "Horizon, Organic Whole Milk, 8 oz, 18-Count", "LaCroix Sparkling Water, Lime, 12 fl oz, 24-count", "Liquid Death Sparkling Water, 16.9 fl oz, 18-count", "Starbucks Classic Hot Cocoa Mix 30 oz, 2-pack", "VitaCup Green Tea Instant Packets with Matcha, Enhance Energy & Detox, 2-pack (48-count total)", " B9 & D3", " Gluten-Free\"", "San Pellegrino Essenza, Variety Pack, 11.15 fl oz, 24-count", "Carnation, Evaporated Milk, 12 fl oz, 12-Count", "Sencha Naturals Everyday Matcha Green Tea Powder, 3-pack", " and dairy", "LaCroix Curate Commemorative Collection Sparkling Water, Variety Pack, 12 fl oz, 24-count", "Lipton, Iced Tea Mix, Lemon, 5 lbs", "San Pellegrino Italian Sparkling Drink, Variety Pack, 11.15 fl oz, 24-count", "Kirkland Signature, Organic Non-Dairy Oat Beverage, 32 oz, 6-count", "Horizon, Organic Low-fat Milk, 8 oz, 18-Count", "Vita Coco, Coconut Water, 11.1 fl oz, 18-Count", "Nestle La Lechera, Sweetened Condensed Milk, 14 oz, 6-Count", "Kirkland Signature, Organic Coconut Water, 11.1 fl oz, 12-count", "LaCroix Sparkling Water, Grapefruit, 12 fl oz, 24-count", "Celsius Sparkling Energy Drink, Variety Pack, 12 fl oz, 18-count", "Vita Coco, Coconut Water, Original, 16.9 fl oz, 12-Count", "San Pellegrino Italian Sparkling Drink, Aranciata Rossa, 11.15 fl oz, 24-count", "Vonbee Honey Citron & Ginger Tea 4.4 lb 2-pack", "Honest Kids, Organic Juice Drink, Variety Pack, 6 fl oz, 40-Count", "Lipton Original Tea Bags, 312-count", "San Pellegrino Italian Sparkling Drink, Melograno & Arancia, 11.15 fl oz, 24-count", "5-hour Energy Shot, Regular Strength, Grape, 1.93 fl. oz, 24 Count", "Pepsi Mini, 7.5 fl oz, 30-count", "100% Spring Water, 2.5 Gallon, 2-count, 48 Case Pallet", " New York", "Stash Tea, Variety Pack, 180-count", "C2O Coconut Water Hydration Pack, The Original, 17.5 fl oz, 15-count", "Oregon Chai, Original Organic Chai Tea Latte Concentrate, 32 fl. oz., 3-Count", "Tiesta Tea Blueberry Wild Child, 2 - 1 Pound Bags & 5.5oz Tin", "Pressed Cold-Pressed Juice & Shot Bundle -18 Bottles, 9 Juices & 9 Shots", " protect your eyesight", " as well as enhancing oxygen transport and serving as a natural source of energy. Our green juice is perfectly blended so you never have to compromise taste for nutrition.", " 3 vitality shots", "Ito En Jasmine Green Tea, Unsweetened, 16.9 fl oz, 12-count", "Pure Leaf Tea, Sweet Tea, 16.9 fl oz, 18-count", "Ito En Oi Ocha Unsweetened Green Tea, 16.9 fl oz, 12-count", "Pressed 3-Day Cleanse Bundle (18 Juices & 6 Shots)"], "data": [1, 383, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Title", "count": 115, "min": " *Spirulina.   For any questions or concerns regarding your online order", "max": "deMilan Panettone Classico Tin Cake 2.2 lb Tin"}, {"values": {"label": ["$", " candles and confetti. A party in a box!   Features:   10\"\" Hand-decorated Chocolate Fudge Birthday Cake", " Antonio Ferrara", " the spirit", " 2- pack \"", " 2-pack\"", " please reach out to Pulp and Press directly at support@pulpandpress.com or by phone at (866)-208-9319. A representative will be in touch with you within 24 hours.\"", " and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.", " making it incredibly versatile for daily use in many food and drink recipes.   Balanced Caffeine - With about 1/3 the amount of caffeine as a cup of coffee", " Oregon", " and more! Grown deep in the ground", " 3 elderberry shots\""], "data": [488, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Currency", "count": 12, "min": " 2- pack \"", "max": "$"}, {"values": {"label": ["\"\"\"10\"\"\"\" Peanut Butter Cake", "Zero Calories   Zero Sweeteners", "Spiced Carrot Cake with Cream Cheese Frosting   Silk Cherry Blossom Flowers (Not Edible)   No Nuts or Raisins   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "100 count", "Butter Pecan Meltaways", "\"\"\"10\"\" Four Layer Chocolate Cake", "2-count", "1.3 lb, 6-count", "6 Rocky Road Brownies", "3 Layers of French Valrhona Chocolate Cake   Mousse Malted Cream & Fudge Frosting   Topped with Fleur de Sel & Does Not Come with Flower   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "\"10\"\" Rainbow Cake", "Peony Flower & Plate Not Included   Flavor: Lemon Cake with Pearl White Pixie Glitter\u00ae   Cake Filling: Raspberry Jam with Lemon Curd & Cake Frosting: Lemon Buttercream   Bottom Tier: 9\u201d Diameter, 3 1/2\u201d High & Top Tier: 7\u201d Diameter, 3 1/2\u201d High   16-22 Servings", "90 Pieces Frozen Gourmet Chocolate Cookie Dough", "10 inch Chocolate Fudge Birthday Cake", "8 inch New York Cheesecake 2 pack   Each Cake services 10-12 people", "\"\"\"10\"\"\"\" Cheesecakes", "Quarter Sheet Cake (14 - 4.57 Oz Pre-Cut Slices Total)   Layers of Ladyfingers Soaked in Coffee Syrup   Filled with Vanilla Mascarpone Cheese Mousse", "Gluten Free Chocolate Crunch Shortbread 4-boxes   Gluten Free The Classic Shortbread - 4 boxes", "Almond Flavored Cake with Pixie Fetti\u00ae Confetti   Almond Flavored Buttercream   Topped with Pastel Pixie Fetti\u00ae Confetti   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "Quarter Sheet Cake (14 - 4 Oz Pre-Cut Slices Total)   Devil\u2019s Food Cake   Dark Chocolate Mousse Topped with Dark Chocolate Ganache", "8 inch Tiramisu Cake 2-pack   Each Cake services 10-12 people   Classic Flavors of Espresso and Mascarpone", " opera impresario and showman", " recipes and devotion to quality has changed very little.   Ingredients\u2013 Heavy Cream", "Quarter Sheet Cake (14 - 4 Oz. Pre-Cut Slices Total)   Almond Joconde Cake With Lemon Syrup   Layered with White Chocolate Mousse & Lemon Curd", "Panettone Classic   Italian Cake   Milan Specialty", "8 Jumbo Triple Chocolate made with mini Hershey\u2019s Kisses", "4 lbs. Italian Cookies", " recipes and devotion to quality has changed very little.", "24 Mini Plain Filled Cannoli   24 Mini Hand Dipped Belgian Chocolate Cannoli   Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness   Chocolate Cannoli: After thawing should be eaten within 48 hours   Frozen: Can be stored up to a year", "12 Large Plain Filled Cannoli   12 Large Hand Dipped Belgian Chocolate Cannoli   Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness   Chocolate Cannoli: After thawing should be eaten within 48 hours   Frozen: Can be stored up to a year", "Three elegant keepsake tins   All-butter artisan shortbread cookies   Variety of 4 flavors in each tin   Perfect for all your gifting needs   Certified Women Owned bakery", "\"Tricolor Rainbow Cookies   Each cookie is approximately 1.5 x 2\"\"   Small Batch Baking   Can be frozen for up to 6 months\"", "Assorted Italian Cookie Tray", "$", "\"One 11\"\" Apple Pie   Serves Approximately 10-12 people   Diameter: 11\"\" Each and Weight: 6 lbs.   Ships with Dry Ice to Maintain Quality & Freshness   Made in the USA\"", "12 Ginger, 12 Turmeric, 12 Wheatgrass and 12 Elderberry   Certified Organic   No Preservatives, Added Sugar, Additives (Colors, Flavors)   Vegan and Gluten Free", "Activate with Water   No Added Sugar   Antioxidants + Electrolytes   Caffeine Free   Gluten Free", "5 - Tropical Punch   5 - Lemon Lime   5 - Blue Raspberry   16.9 fl oz Bottles   15 Total Bottles", "6 - Juicy Peach   6 - Cosmic Stardust   6 - Cherry Slush   12 fl oz Cans   18 Total Cans", "5 - Doc Pop   5 - Grape   5 - Root Beer   12 fl oz Cans   15 Total Cans", "5 - Strawberry Lemon   5 - Orange   5 - Cherry Limeade   12 fl oz Cans   15 Total Cans", "Business Members* Click the Business Delivery Tab for Local Delivery Options", "Unsweetened   Non-Dairy Beverage   USDA Certified Organic   No Sugar Added   Vegan", "Kosher   Vegan   Free of Dairy, Lactose, Soy   No Added Sugar   Made in the USA", "USDA Certified Organic   2% Milk Fat   Grade A   Excellent Source of Calcium   Net Weight 198 fl. oz.", "Cold Brewed   Product of Colombia   Roasted and Packaged in the USA   100% Colombian   12-count", "7 - Blackberry   7 - Watermelon   7 - Peach   16 fl oz Bottles   21 Total Bottles", "Non GMO   Vegan   Kosher   Soy Free   Dairy Free", "6 (2.4 oz.) Elixir Shots   15 (12 oz.) Cold Pressed Juices   Cold pressed   Certified Organic   Product of Canada", "Spring Water   16 fl oz Bottles   24 Total Bottles   0 Calories per Bottle", "Purified Water   8 fl oz Bottles   24 Total Bottles", "Natural Artesian Water   23.7 fl oz Bottle with Sports Cap   12 Total Bottles", "100% Juice   100% Daily Value of Vitamin C   From Concentrate with Other Natural Flavors and Ingredients   Marked for Resale   12-Count", "24 count (12 oz each)   Prebiotics, plant fiber, and botanicals to support digestive health   Variety pack: 6-Root Beer, 6-Vintage Cola, 6-Classic Grape, 6-Orange Squeeze   No artificial sweeteners, flavors, or preservatives   Non-GMO Project Verified, Gluten-free, Vegan, Keto & Paleo", "USDA Organic   Kosher   Certified Gluten-Free   Non GMO Project Verified   Certified Vegan", "Variety Pack   4 - Triple Draft Latte   4 - Mocha Draft Latte   4 - Vanilla Draft Latte   100% Arabica Coffee", "Orange Juice   Made From Concentrate   100% DV Vitamin C per Serving   10 fl. oz. Bottle   Net Weight 240 fl. oz.", "Original   7.5 fl oz Cans   30 Total Cans   90 Calories per Can", "0g of sugar   0g Calories   Naturally Caffeinated (sourced from green tea)   Plant-based ingredients   3 flavors: Peach-Mango, Frose-Rose and Grape", "Classico   8.45 fl oz Cans   12 Total Cans   100% Arabica Coffee   5 Calories per Can", "No Sugar Added   Not From Concentrate   100% Juice   USDA Organic   Kosher", "Kosher (Circle U)   0 Calories, 0 Sweetener, 0 Sodium   Naturally Essenced Sparkling Water   6 Lemon, 12 Lime, 6 Grapefruit", "Frozen Bombsicle   16 fl oz Cans   12 Total Cans   Zero Sugar   200mg Caffeine", "Zero Calories   Unflavored Original", "100-count   1.5 g. bags   A Blend of Sencha & Matcha   Hot & Cold Brewing   Product of Japan", "USDA Organic   Kosher   Grade A   Never any Preservatives   Net Weight: 144 fl oz", "Kosher (Circle U)   0 Calories   0 Sweetener   0 Sodium   Naturally Essenced Sparkling Water", "100% Mountain Water   16.9 fl oz Cans   18 Total Cans", "Rich Velvety Cocoa", "2-pack (48-count total)", "Vitamin D Added   The Cooking Milk   Replace Drinking Milk in Recipes   Adds Extra Creaminess and Rich Flavor   Net Weight 144 fl oz", "Sourced From Japan   Certified Non-GMO   Perfect for Drinking, Blending and Baking   225 Servings", " matcha provides a sense of calm focus without the jitters.", "Kosher (Circle U)   0 Calories, 0 Sweetener, 0 Sodium   Naturally Essenced Sparkling Water   8 Pineapple Strawberry, 8 Blackberry Cucumber, 8 Cherry Lime", "Sweetened Iced Tea Mix   Natural Lemon Flavor   Kosher   Makes 38 qts   Product of Canada", "12 - Aranciata Rossa (Orange & Blood Orange)   12 - Limonata (Lemon)   11.15 fl oz Cans   24 Total Cans", "Kosher   Non GMO   USDA Organic   100% Vegan   6-Count", "USDA Organic   Kosher   Grade A   Never Any Preservatives   18-Count", "Coconut Water   Replenish Lost Electrolytes   Recharge with Vital Nutrients   Hydrate with the Goodness of Coconuts   Net Weight 199.8 fl. oz.", "La Lechera   Sweetened Condensed Milk   6-Count   14 oz Can   Net Weight: 84 oz", "Kosher   USDA Organic   No Sugar Added   Not from Concentrate   100% Juice:", "0 Calories   0 Sweetener   0 Sodium", "6 - Peach Vibe   6 - Tropical Vibe   6 - Arctic Vibe   12 fl oz Cans   18 Total Cans", "Kosher   Gluten Free   Soy Free   Non GMO", "Product of Italy   11.15 fl oz Cans", "4.4 lb 2 count", "Juice Drink   USDA Organic   From Concentrate   6 oz Boxes   40-Count", "3 Boxes", "Regular Strength Energy Shot   Grape Flavor   Sugar free   1.93 fl oz Bottle   24 Count", "Original   7.5 fl oz Cans   30 Total Cans   100 Calories per Can", "Brand Varies by State   Full Pallet of Single Brand:   Arrowhead   Ice Mountain   Ozarka   Deer Park   Poland Spring   Zephyrhills", " Vermont and Maine.   100% spring water", "Stash Tea Bags   Green Tea   30 bags per box   6-boxes", "Never From Concentrate   Plant Based Hydration   Electrolytes in Every Can   Non-GMO   Chill before serving", "Chai Tea Latte Concentrate   USDA Organic   Just Add Milk   Enjoy Hot   Enjoy Cold", "Non-GMO Project Verified", "9 - 12 oz. Bottles   9 - 2 oz.. Shots   No Sugars Added, No Added Water, 100% Fruits and Vegetables   Kosher   No Preservatives", " root vegetables absorb high amounts of vitamins and minerals from the soil. They have distinct", "Unsweetened   Refrigerate After Opening   Non GMO   16.9 oz Bottle   12-count", "Sweet   16.9 fl oz Bottles   18 Total Bottles", "Non-GMO   Sugar Free   Fat Free   Product Of Taiwan", "24 Bottles   No Sugars Added   100% Fruits and Vegetables   No Preservatives   Kosher"], "data": [1, 396, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Feature", "count": 102, "min": " Vermont and Maine.   100% spring water", "max": "Zero Calories   Zero Sweeteners"}, {"values": {"label": ["Zero sugar", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn\u2019s moist and delicious carrot cake is made with hand peeled and freshly grated carrots. Perfectly spiced with just the right amount of cinnamon, this cake has no nuts and no raisins. The three layers of spiced carrot cake are then filled and frosted with Gwendolyn's signature homemade cream cheese frosting. Topped with decorative pink silk cherry blossom flowers.   Features:   Flavor: Spiced Carrot Cake", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Peony flower and plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn's famous Earl's Court Chocolate Cake is the most popular cake in her bakeries. This decadent chocolate cake is three layers of French Valrhona chocolate cake, filled with silky Callebaut Belgian chocolate ganache and mousse-like chocolate malted cream. Frosted with her signature dark fudge Callebaut frosting and topped with a sprinkling of Fleur de Sel Sea salt that comes from the \u00cele de R\u00e9 in the South of France. This salt is only harvested three months out of the year and is the perfect topping for her cake.   Features:   Flavor: Valrhona Chocolate Cake", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Peony flower and plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn's Two Tier Special Occasion Cake is beautiful, delicious and perfect for any special occasion. Ideal for weddings, anniversaries, baby showers and other special celebrations, this two tier cake has two three-layer cakes. The bottom tier is 8\"", "Ferrara's Bakery of Little Italy in New York CityFerrara\u2019s specialty NY cheesecake is smooth and creamy with a classic graham cracker crust. Made with the perfect balance of 100% Philadelphia brand cream cheese and sour cream. Ferrara\u2019s NY cheesecake is creamy without being heavy and melts in your mouth.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little. 8 inch New York Cheesecake 2 pack Each Cake services 10-12 peopleEach cake can be refrigerated for up to 4 days (preferably in an airtight container) or frozen for up to 6 months. Defrost in the refrigerator one day in advance, or at room temperature for 3 hours.PRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENTCake plate and Cake stand are not included.", " 2-count", "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. While everyone\u2019s palette may differ, our Italian-inspired Tiramisu is a true customer favorite. Layers of Ladyfingers soaked in Coffee Syrup then filled with Vanilla Mascarpone Cheese Mousse and topped with a dusting of rich cocoa powder will whisk you away to Italy without taking flight. Whether you prefer with a cup of Espresso or your favorite after dinner cordial, our Tiramisu is the perfect accompaniment.   Includes:   Quarter Sheet Cake (14 - 4.57 Oz Pre-Cut Slices Total)", "Shortbread is a right, not a privilege. And those who eat gluten-free should be no exception. That\u2019s why the bold bakers at Mary Macleod\u2019s Shortbread stopped at nothing on their quest to create gluten-free shortbread that rivals their original recipes.The gluten-free getting is good with this multipack of eight peaked boxes, each holding six all-butter shortbread cookies that can make any gluten glutton question their life choices. Each multipack contains four boxes of GF Classic Shortbread and four boxes of GF Chocolate Crunch so you can share the love (if you\u2019re feeling generous).Gluten Free The Classic: Gluten-free glory is yours with these light, crispy butter cookies crafted with premium almond and coconut flours. It only took about 117 tries to get the recipe just right, and it was 117% worth it.Gluten Free Chocolate Crunch: A crowning chocolate chunk atop buttery shortbread with almond and coconut flours. It\u2019s our signature cookie, now deliciously gluten free. Warning: they tend to go fast, but we promise we\u2019ll bake more.About Mary's legacy, we continue to bake authentic all-butter shortbread cookies from our family recipes. Our dedicated bakers use top quality ingredients and follow artisan small-batch methods. The result is unforgettably delicious cookies.Includes:Mary Macleod\u2019s Shortbread Multipack of 8 Blue Peaked Boxes in a Gluten-Free Mixed Assortment.Gluten Free Chocolate Crunch Shortbread 4-boxesGluten Free The Classic Shortbread - 4 boxesEach elegant box contains 6 handcrafted shortbread cookies", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. The Cake Bake Shop's Pixie Fetti\u00ae Birthday Cake has three layers of fluffy white vanilla bean cake with a hint of almond flavor. Pixie Fetti\u00ae is gently folded into each layer and baked. Each layer is filled and frosted with a lightly flavored almond buttercream. The cake is topped with a piped decorative border and the center is filled with Gwendolyn's custom blend of pastel Pixie Fetti\u00ae confetti. This fun, celebratory birthday cake is perfect for any party.   Features:   Flavor: Almond Vanilla Bean Cake", "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. Topping the list of customers favorites is by far our Chocolate Entremet \u2013 a deep, rich dessert that combines luscious layers of Devil\u2019s Food Cake and dark chocolate mousse with a rich, dark chocolate ganache. It is a chocolate lover\u2019s dream with caffe latte, French press or yes, regular coffee or big glass of milk.   Includes:   Quarter Sheet Cake (14 - 4 Oz Pre-Cut Slices Total)", "Ferrara\u2019s specialty tiramisu features homemade Savoiardi (Ladyfinger cookies) that we douse with espresso & coffee liqueur and layer with sweet mascarpone.", " opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties", " Sugar", "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. In listening to our customers, we found more and more looking for a lighter, refreshing dessert with the same decadence. This gave way to our one-of-a-kind Limoncello created with almond joconde cake soaked with lemon syrup then layered with white chocolate mousse and a delicious lemon curd. The deliciousness doesn\u2019t stop there. The cake is finished with white chocolate shavings, combining a sweet and tart flavor that is delightfully light.   Includes:   Quarter Sheet Cake (14 - 4 Oz. Pre-Cut Slices Total)", "\"deMilan is baked using the traditional recipe of \"\"Panettone Milano\"\". Panettone is produced according to the traditional recipe through a slow and natural process. All the ingredients", "\"Ferrara's Bakery of Little Italy in New York City 24 Mini Plain Filled Cannoli and 24 Mini Hand Dipped Belgian Chocolate Cannoli   The Cannoli is a Sicilian pastry. First introduced more than 125 years ago by Cafe\u2019 Ferrara. A light crispy shell, sweet, velvety, creamy ricotta with chocolate chips & citron. Ferrara dips their traditional crispy cannoli shells by hand in rich Belgian chocolate before filling them with sweet ricotta cream studded with chocolate chips   A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties   We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little   Cannolis are made fresh, frozen and shipped on dry ice   1 1/2-2\"\" In length", "Ferrara's Bakery of Little Italy in New York City 12 Large Plain Filled Cannoli and 12 Large Hand Dipped Belgian Chocolate CannoliThe Cannoli is a Sicilian pastry. First introduced more than 125 years ago by Cafe\u2019 Ferrara. A light crispy shell, sweet, velvety, creamy ricotta with chocolate chips & citron. Ferrara dips their traditional crispy cannoli shells by hand in rich Belgian chocolate before filling them with sweet ricotta cream studded with chocolate chipsA little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very littleCannolis are made fresh, frozen and shipped on dry ice 12 Large Plain Filled Cannoli12 Large Hand Dipped Belgian Chocolate CannoliPlain Cannoli: After thawing should be eaten within 2 hours for maximize crispnessChocolate Cannoli: After thawing should be eaten within 48 hoursFrozen: Can be stored up to a yearPRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENT", "Mary Macleod\u2019s Shortbread tastes like true love in pure, buttery cookie form. Inside each tin are handcrafted, all-butter, gourmet shortbread cookies in Mary Macleod's most popular flavors. The keepsake tin is gorgeous featuring gold foil embellishments for a touch of timeless elegance. The combination of luxurious packaging and melt-in-your-mouth cookies will create a lasting memory. Each tin is filled with 24 shortbread cookies in 4 of Mary Macleod\u2019s premium flavors: The Classic, Chocolate Crunch, Dutch Chocolate and Maple Crunch. Handcrafted and baked to perfection, every cookie is made with care and attention to detail, ensuring the highest quality and taste. This is the perfect corporate gift to show your appreciation to coworkers, clients, partners, suppliers and more. They are also fantastic and versatile for personal occasions - birthdays, weddings, anniversaries, holidays or just to say hello. With a multipack of 3 luxurious tins, this is a smart choice for all your gifting needs.   Includes:   Elegant Keepsake Blue Tin of Shortbread Cookies with Gold Foil Embellishments.", "\"Ferrara's Bakery of Little Italy in New York CityWith our secret recipes that span three centuries, this fifth-generation family-owned bakery continues to handcraft Italian desserts from the same location in NYC\u2019s Little Italy since 1892.Ferrara\u2019s traditional rainbow (tricolori) cookies are made in-house daily from a secret recipe that Antonio Ferrara used when he opened the bakery. This Tri-color or Rainbow cookie features layers of cake made from almond & macaroon paste that are sandwiched with apricot jam and coated in chocolate.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties.We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little.Rainbow Cookies can be refrigerated for up to a week or frozen for up to 6 months. Once opened, store in an airtight container and serve at room temperature.1.5 lb's Tricolor Rainbow CookiesEach cookie is approximately 1.5 x 2\"\"PRODUCED IN A FACILITY WHERE NUTS", "\"Two   11\"\" Heavenly Chocolate Pie   1 Pie Serves Approximately 8-10 People   Each Pie is Diameter: 11\"\" Each and Weight:   3.5 lbs.   Ships with Dry Ice to Maintain Quality & Freshness   Made in the USA\"", "\"Two 11\"\" Whiskey Pecan Pie   1 Pie Serves Approximately 8-10 people   Each Pie is Diameter: 11\"\" Each", "Made with Tootie\u2019s original recipe from 1985, our Huge Apple Pie is 6 pounds of sliced apples, mixed with the perfect blend of spices and our famous handcrafted, golden-brown flaky crust. Standing almost 4 inches tall, it makes a great gift or the perfect centerpiece for all your family get-togethers.", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders only ship Monday, Tuesday and Wednesday for Wednesday, Thursday, Friday deliveries.   At Pulp & Press, we're dedicated to making healthy living convenient and accessible to everyone. Our cold-pressed juices and wellness shots are made with only the highest quality, 100% organic, plant-based, and raw ingredients, so you can be sure you're getting the most nutritional value out of every sip. Say hello to a healthier you with our wellness shot elixirs!   12 Ginger Wellness Shot Elixir   A zesty blend of lemon, ginger, and turmeric - balanced with apple, that's perfect for supporting your immune system and aiding digestion.   12 Turmeric Wellness Shot Elixir   Loaded with superfoods like turmeric, lemon, and pineapple, plus black pepper to boost nutrient absorption.   12 Wheatgrass Wellness Shot Elixir   Boost your daily greens with this deliciously green elixir, packed with superfoods like pineapple, lemon, ginger, wheatgrass, and spirulina.   12 Elderberry Wellness Shot Elixir   Packed with antiviral ingredients like elderberry and ginger, these bright-colored shots can help support the immune system.   Fun Ways to Incorporate Wellness Shots Into Your Daily Routine:   Enjoy a shot as a refreshing start to your day", "Hydration+ Sticks Electrolyte Drink Mix", "Limit 5 per member   Gluten free", "Prebiotics for a healthy gut", "6-count", "Original Unsweetened", "24-count", "Cold Brewed", "0 calories", "Upgrade your latte. Caf\u00e9 Almond Milk froths, foams, and steams perfectly for all your espresso creations. Neutral in taste and creamy in texture, it blends beautifully into hot or iced coffee. Simple, dairy-free, plant-based goodness.\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b   FROTH + STEAM PERFECT LATTES: With Caf\u00e9 Almond Milk you can froth and steam perfect dairy-free lattes at home. Naturally creamy with a neutral taste, Caf\u00e9 Almond Milk is made for lattes.", "Due to the perishable nature of our products, Pulp & Press can not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm EST on Tuesday will not ship until the following Monday.", "Lively bubbles that refresh the palate", "100% pure quality", "Perfect for hiking, traveling and on-the-go hydration", "Apple Juice", "OLIPOP is a new kind of soda\u2122 that's delicious, refreshing, and actually good for you. OLIPOP combines the classic soda flavor you know and love with prebiotics, plant fiber, and botanicals to support your microbiome and digestive health. Every flavor has 2-5 grams of sugar and includes 9 grams of dietary fiber (about 1/3 of your daily recommended fiber intake)!   24 count (12 oz each)", "Unsweetened Coconut Milk", "Cold brew coffee drinkVariety pack: 4-Triple Shot, 4-Mocha, 4-VanillaFoamy nitrous-infused milk9 oz can", "Product may not be available in all areas due to local municipality requirements.   24-count", "Sip-sized cans", "Natural Energy, with clean, simple ingredients and green-tea caffeine. Joyburst is a better-for-you refreshing sparkling beverage without the unhealthy sugars and synthetic caffeine sources that other energy drinks have. Three delicious fruit-based flavors with a hint of sweetness, naturally-derived caffeine and refreshing sparkling water.   Features:   0g of sugar", "Illy Blend", "Organic Coconut Water", "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!   24-count", "Performance Energy Drink", "Bottled at the source, San Pellegrino Terme (Bergamo) Italy", "100-count1.5 g. bags150 g. Total net weightProduct of Japan", "Certified B Corporation", "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!24-count12 fl. oz. cans288 fl. oz. Total weightMULTI PACK: Comes with 2 packs of 12 cans (24 Cans total). Lime 12 oz cans, perfect for the fridge, office, or your next family get-together!HEALTHIER: Unlike sports drinks, vitamin enhanced waters, and sodas, LaCroix is healthy for you; natural sparkling water with 0 calories, 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.GUILT FREE: Drink with zero worries! LaCroix contains 0 calories, 0 sweeteners, and 0 sodium. Our sparkling water is vegan, gluten free, non-GMO, and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.REFRESHING: LaCroix is a wholesome, refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym, in the office or on the go!FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!", "Sourced from beneath hundreds of feet of stone", "Flavored Mineral Water24 x 11.5 fl oz8 each of Tangerine & Wild Strawberry, Blood Orange & Black Raspberry, Dark Morello Cherry & Pomegranate", "12-count", "About Matcha   Made of finely-ground green tea leaves, matcha powder is a highly versatile superfood you drink hot or cold or can add to your favorite smoothies, desserts, and countless other recipes.   Antioxidant Benefits \u2013 Matcha is naturally high in powerful antioxidants for the all-over wellbeing of your body and mind.", "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!24-count12 fl. oz. cans288 fl. oz. Total weight8-Pineapple Strawberry (Pina Fraise), 8-Blackberry Cucumber (Mure Pepino), 8-Cherry Lime (Cerise Limon)VARIETY PACK: Variety Multi-Pack of 24 slim cans measuring 12 oz each. Includes 8 Cerise Lim\u00f3n (Cherry Lime), 8 Pi\u00f1a Fraise (Pineapple Strawberry) and 8 M\u00fare Pepino (Blackberry Cucumber). Perfect for the fridge, office, or your next family get-together!HEALTHIER: Unlike sports drinks, vitamin enhanced waters, and sodas, LaCroix is a healthy for you, natural sparkling water with 0 calories, 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.GUILT FREE: Drink with zero worries! LaCroix contains 0 calories, 0 sweeteners, and 0 sodium. Our sparkling water is vegan, gluten free, non-GMO, and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.REFRESHING: LaCroix is a wholesome, refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym, in the office or on the go!FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!", "Store in cool, dry place", "(2) 6-packs of each flavor", "Made with super tasty rolled oats", "8 fl oz Milk Boxes", "Vita Coco", "No Artificial Flavors", "100% Natural Sparkling WaterGrapefruit (Pamplemousse)12 fl oz (355 mL) can24-countMore Information:KosherSodium freeSweetener freeZero calories", "6 - Peach Vibe (white peach)", "Sparkling orange and blood orange beverage11.15 fl oz cans4 boxes of 6 cans24 total cans", "Variety pack: 16-Super Fruit Punch, 8-Appley Ever After, 8-Berry Berry Good Lemonade, 8-Goodness Grape", "Sparkling orange and pomegranate beverage11.15 fl oz cans4 boxes of 6 cans24 total cans", "Regular Strength Energy Shot", "0g saturated fat", "Brand varies by geographical location.", "Coconut Water Hydration PackThe Original17.5 fl oz (518 mL) can15-countMore Information:Non-GMOChill before serving", "Original Blend of Premium Black Tea, Vanilla, Chai Spices and Honey", "Due to the perishable nature of this item, orders do not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm PST on Tuesday will not ship until the following Monday.   Pressed Juicery is on a mission to make high nutrition a realistic option for all. Our cold-pressed juices are made with all-natural fruits and vegetables - no preservatives and no added sugars.", " earthy flavors and are packed with fiber and complex carbohydrates", "Jasmine Green TeaUnsweetened16.9 oz bottle12-count", "Real brewed tea - never from powder", "Made With Japanese Green Tea12-count16.9 fl oz BottlesTotal Net Volume: 202.8 fl oz", "Due to the perishable nature of this item, orders do not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm PST on Tuesday will not ship until the following Monday.   Pressed is on a mission to make high nutrition a realistic option for all. Our cold-pressed juices are made with all-natural fruits and vegetables - no preservatives and no added sugars.   How to cleanse - Although everyone is different and needs to listen to their body as they cleanse, Pressed\u2019s juice plan recommends drinking 1 juice every 2 hours in the following recommended order: Greens with Ginger, Orange Turmeric, Roots with Ginger, Greens with Ginger, Sweet Citrus, Avocado Greens Smoothies. Drink the first one when you wake up in the morning, and try to drink the last one two hours before sleeping. Add one Wellness shot and one Vitality shot at any point of the day to boost your cleanse. Juice cleansing is intended to replace solid meals, though again everyone is different and should consume food, water and juice as they need. Be prepared for changes in your digestion and even sleep rhythms as your body adjusts to the cleanse, and make sure you stay hydrated with water throughout, as you might find shifting energy levels and mood in your first juice cleanse.   Green with Ginger - Made from the freshest, highest-quality green vegetables we can find, our green juice is a simple and easy addition to a healthy lifestyle. Leafy green vegetables are known for their antioxidants, phytonutrients, as well as enhancing oxygen transport and serving as a natural source of energy. Our green juice is perfectly blended, so you never have to compromise taste for nutrition.   Orange Turmeric - Orange Turmeric is a blend of orange, apple aloe vera, turmeric, lemon, and black pepper. Our Orange Turmeric elevates everyday OJ with a vibrant blend of orange juice, black pepper, and turmeric from Fiji.   Roots with Ginger - We've blended carrots and beets to create delicious juices for all taste buds-from earthy to sweet! Known for their rich color and sweet flavor, root vegetables contain powerful benefits that promote liver health, fight free radicals, soothe the nervous system, protect your eyesight, and more! Grown deep in the ground, root vegetables absorb high amounts of vitamins and minerals from the soil. They have distinct, earthy flavors and are packed with fiber and complex carbohydrates, which help the body to break down sugar.   Sweet Citrus - Our citrus blend is refreshing, hydrating and crisp. It contains ingredients like lemon and mint that are known to stimulate and alkalize the system, aid in digestion, and provide a pick-me-up when you're feeling down.   Avocado Greens Smoothie - Expertly blended and ready to go, this clean and simple recipe is packed with power greens like spinach, kale, and spirulina, mixed with banana, avocado, and matcha for a creamy-smooth taste.   Wellness Shots"], "data": [421, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Product Description", "count": 78, "min": " 2-count", "max": "Zero sugar"}, {"values": {"label": ["0.0 - 35.7", "35.7 - 71.4", "71.4 - 107.1", "107.1 - 142.8", "142.8 - 178.5", "178.5 - 214.2", "214.2 - 249.9", "249.9 - 285.6", "285.6 - 321.3", "321.3 - 357.0"], "data": [178, 36, 36, 35, 36, 36, 35, 36, 36, 36]}, "label": "Sub Category_stringindexer_transform", "count": 10, "min": 0.0, "max": 357.0}, {"values": {"label": ["0.0 - 12.3", "12.3 - 24.6", "24.6 - 36.9", "36.9 - 49.2", "49.2 - 61.5", "61.5 - 73.8", "73.8 - 86.1", "86.1 - 98.4", "98.4 - 110.7", "110.7 - 123.0"], "data": [368, 29, 16, 13, 12, 12, 13, 12, 12, 13]}, "label": "Price_stringindexer_transform", "count": 10, "min": 0.0, "max": 123.0}, {"values": {"label": ["0.0 - 4.7", "4.7 - 9.4", "9.4 - 14.1", "14.1 - 18.8", "18.8 - 23.5", "23.5 - 28.2", "28.2 - 32.9", "32.9 - 37.6", "37.6 - 42.3", "42.3 - 47.0"], "data": [455, 7, 5, 4, 5, 5, 4, 5, 5, 5]}, "label": "Discount_stringindexer_transform", "count": 10, "min": 0.0, "max": 47.0}, {"values": {"label": ["0.0 - 7.4", "7.4 - 14.8", "14.8 - 22.2", "22.2 - 29.6", "29.6 - 37.0", "37.0 - 44.4", "44.4 - 51.8", "51.8 - 59.2", "59.2 - 66.6", "66.6 - 74.0"], "data": [433, 7, 8, 7, 7, 8, 7, 8, 7, 8]}, "label": "Rating_stringindexer_transform", "count": 10, "min": 0.0, "max": 74.0}, {"values": {"label": ["0.0 - 11.4", "11.4 - 22.8", "22.8 - 34.2", "34.2 - 45.6", "45.6 - 57.0", "57.0 - 68.4", "68.4 - 79.8", "79.8 - 91.2", "91.2 - 102.6", "102.6 - 114.0"], "data": [397, 11, 12, 11, 11, 12, 11, 12, 11, 12]}, "label": "Title_stringindexer_transform", "count": 10, "min": 0.0, "max": 114.0}, {"values": {"label": ["0.0 - 1.1", "1.1 - 2.2", "2.2 - 3.3", "3.3 - 4.4", "4.4 - 5.5", "5.5 - 6.6", "6.6 - 7.7", "7.7 - 8.8", "8.8 - 9.9", "9.9 - 11.0"], "data": [490, 1, 1, 1, 1, 1, 1, 1, 1, 2]}, "label": "Currency_stringindexer_transform", "count": 10, "min": 0.0, "max": 11.0}, {"values": {"label": ["0.0 - 10.1", "10.1 - 20.2", "20.2 - 30.3", "30.3 - 40.4", "40.4 - 50.5", "50.5 - 60.6", "60.6 - 70.7", "70.7 - 80.8", "80.8 - 90.9", "90.9 - 101.0"], "data": [409, 10, 10, 10, 10, 10, 10, 10, 10, 11]}, "label": "Feature_stringindexer_transform", "count": 10, "min": 0.0, "max": 101.0}, {"values": {"label": ["0.0 - 7.7", "7.7 - 15.4", "15.4 - 23.1", "23.1 - 30.8", "30.8 - 38.5", "38.5 - 46.2", "46.2 - 53.9", "53.9 - 61.6", "61.6 - 69.3", "69.3 - 77.0"], "data": [430, 8, 8, 7, 8, 8, 7, 8, 8, 8]}, "label": "Product Description_stringindexer_transform", "count": 10, "min": 0.0, "max": 77.0}], "stageId": "665a814e3dfe9400ae3e1814", "FESamplePath": "/FileStore/platform/sampleData/665a814e3dfe9400ae3e1814_AutoFE/part-00000-f5482577-318c-4299-94df-2cfd3e957121-c000.csv", "manualfesamplepath": "/FileStore/platform/sampleData/665a814e3dfe9400ae3e1814_AutoFE/part-00000-f5482577-318c-4299-94df-2cfd3e957121-c000.csv", "originalcount": 7420, "graphdata": {"Sub Category": {"label": ["Bakery & Desserts", "Certified Kosher OU-D", "14 Servings\"", "Cake Filling: Cream Cheese Frosting", "Cake Frosting: Cream Cheese Frosting", "Topped with Pink Silk Cherry Blossom Flowers (cherry blossom flowers are not edible", "Dimensions: 9\u201d diameter", "Serves 16-22", "Each Cake Arrives With It\u2019s Own Cake Care Card", "Allergens: Contains Wheat", "Ships Frozen\"", "Individually wrapped", "Made in and Imported from France", "Free-range eggs", "Non-GMO ingredients\"", "32 oz 2-Pack", "No Preservatives", "Contains Nuts\"", "Serves 14\"", "Strawberry Cheesecake", "Mango Cheesecake", "Kosher OU-D certified\"", "Baked in", "Non-GMO", "French traditional style Butter Cookies accented with sea salt", "Large round and crispy cookies stamped with the mark of St Michel\u2019s heritage\"", "No Sugar Added", "Kosher OU-Dairy\"", "12 Chocoloate Chunk Cookies", "Kosher Dairy OUD\"", "Cake Filling: Chocolate Ganache and Mousse Malted Cream", "Cake Frosting: Fudge Frosting topped with Fleur de Sel", "Kosher OU-D certified", "Serves approximately 12 people", "Weight: 7 lbs.", "Ships in Cooler with Dry Ice to Maintain Quality & Freshness\"", "Perfect for celebrating any happy or festive occasion -for kids and adults alike!   Features:   1 - 10 in Rainbow Cake", "Diameter: 10\"\" each", "Ships in Cooler with Dry Ice to Maintain Quality & Freshness", "Made in the USA   Some of our products may contain nuts. Our facility is NOT a nut-free facility", "If not being consumed immediately upon arrival", "Cake Filling: Raspberry Jam with Lemon Curd", "Cake Frosting: Lemon Buttercream", "Bottom Tier: 9\u201d Diameter", "Top Tier: 7\u201d Diameter", "Bake and Serve", "No Added Preservatives", "Kosher\"", "Fudgy Filling and Ganache Frosting", "Serves 16\"", "Decedent cake is simply irresistible. Chocolate cake with Hand decorated", "No added preservatives", "Fudgy filling and ganache frosting   This cake serves. (Approximately) 16 people", "Weight: 3.75 lbs..", "OU-D certified", "1 Turtle Style", "1 Triple Chocolate", "Kosher OU-D Certified", "Serves 28\"", "Layers of Ladyfingers Soaked in Coffee Syrup", "Filled with Vanilla Mascarpone Cheese Mousse\"", "Almond Flavored Cake with Pixie Fetti\u00ae Confetti", "Cake Filling: Almond Flavored Buttercream", "Cake Frosting: Almond Flavored Buttercream", "Devil\u2019s Food Cake", "Dark Chocolate Mousse Topped with Dark Chocolate Ganache\"", "PRODUCEDIN AFACILITYWHERENUTS", "We take the extra step of baking two", "Each Cake services 10-12 people", "Classic Flavors of Espresso and Mascarpone\"", "Almond Joconde Cake With Lemon Syrup", "Layered with White Chocolate Mousse & Lemon Curd\"", "2.2 lb Tin\"", "8 Jumbo Reese\u2019s Peanut Butter Cup Cookies", "7 Types of Cookies\"", "A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather", "Includes:   Rainbow Tricolori Cookies", "Fudge-swirled Cookies", "Pignoli Cookies", "Coconut Cookies", "Plan Sandwich Cookies", "Half Moon Cookies", "Torrincino Cookies   PRODUCED IN A FACILITY WHERE NUTS", "24 Mini Plain Filled Cannoli", "24 Mini Hand Dipped Belgian Chocolate Cannoli", "Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness", "Chocolate Cannoli: After thawing should be eaten within 48 hours", "Frozen: Can be stored up to one year   PRODUCED IN A FACILITY WHERE NUTS", "Frozen: Can be stored up to a year\"", "Variety of 4 Mary Macleod's Shortbread Handcrafted", "Multipack of 3 Tins of Shortbread Cookies.", "CONTAINS: Seventy-Two (72) TOTAL all-butter shortbread cookies in 4 flavors. Each tin has Twenty-Four (24) Variety Shortbread Cookies [3 tins total", "Each premium tin comes with four different flavors of our delectable shortbread cookies", "Struffoli Honey Balls\"", "Some of our products may contain nuts. Our facility is NOT a nut-free facility", "Important Handling Instructions:", "This product contains nuts.", "One taste and you\u2019ll see why our Huge Apple Pie has been delighting customers across the country for over 35 years!", "Beverages & Water", "Add a wellness shot to your juice or smoothie for an extra boost of nutrients", "Pair a shot with your favorite healthy snack for a delicious treat", "Take a wellness shot before your workout to energize your body   100% Organic Ingredients:   Ginger: Organic Apple", "Turmeric: Organic Pineapple", "Elderberry: Organic Apple", "Wheatgrass: Organic Pineapple", "Variety pack: 10-Ice Pop (0.35 oz)", "25 calories per bottle", "250 mg BCAA", "10% coconut water", "The ultimate recovery support", "Drink in rapid replenishment and intensely refreshing flavors", "30-Count\"", "\u200bCaffeine free", "250mg BCAAs", "B vitamins", "Antioxidants", "835mg electrolytes\"", "200mg caffeine\"", "5g sugar or less", "Immunity sidekick\"", "Zero Calories", "No Artificial Color or Flavors", "Minerals Added for a Pure Refreshing Taste\"", "32 oz. container", "30 calories per serving", "Free of dairy", "Net Weight 192 oz.\"", "Non-Dairy Beverage", "Made with California Almonds", "12-count", "1 qt Cartons", "Net Weight: 3 Gal\"", "8.25 oz. Chocolate Milks", "37% Less Fat than Whole Milk", "With Vitamins A & D", "UHT Pasteurized\"", "11 fl oz cans", "Total Volume 3.9 L\"", "0 sweeteners", "Water infused with fruit essences & other natural flavors\"", "SIMPLE PLANT-BASED INGREDIENTS: Califia Farms Caf\u00e9 Almond Milks are made with plant-based", "BLENDS SMOOTHLY INTO COFFEE: This plant-based non-dairy Caf\u00e9 Almond Milk blends beautifully into both hot and iced coffee", "BARISTA'S CHOICE DAIRY-FREE MILK: Califia Farms Caf\u00e9 Almond Milks are favored by professional baristas across the country for their ability to froth", "Refrigerate after opening\"", "Exclusive 3-day Juice Cleanse \u2013 organic cold pressed juices and elixirs used to detoxify your body and help you feel great! For best results", "3 Spicy Lemon", "3 Red Monster", "3Turbo", "3 Rinse + Rebeet   6 (2.4 oz.) Elixir Shots   3 Ginger", "3 Turmeric   Cold pressed", "Rich in vitamins and minerals", "Certified Organic", "Certified Kosher", "No heat pasteurization", "No preservatives", "No added sugar", "No additives (colors", "Vegan", "Gluten Free", "Product of Canada   Expiration Codes   January - JA", "February - FE", "March: - MR", "Aprill - AL", "May - MA", "June - JN", "July - JL", "August: - AU", "September - SE", "October: - OC", "November - NO", "December - DE   Instructions;   Refrigerate upon delivery", "Juices should be sealed and cool to the touch", "Organize according to provided cleanse guide", "Consume recommended juices 2 to 2.5 hours apart", "Drink water or organic herbal tea between each juice", "Avoid eating for best results", "If needed", "A perfect complement to any meal or occasion", "Made from recycled plastic bottles (excludes cap and label)\"", "Purified water", "Enhanced with minerals for a crisp taste\"", "Soft", "Natural electrolytes from tropical rain filtered through volcanic rock", "Bottled from a natural artesian aquifer in the remote Fiji Islands\"", "15.2 fl oz bottle\"", "Variety pack: 6-Root Beer", "Delicious", "2-5g sugar", "9g fiber", "Prebiotics", "No artificial sweeteners", "Gluten-free", "Paleo-Friendly", "Keto-Friendly", "Non-GMO Project Verified\"", "Dairy Free", "Soy Free", "6-count", "32 oz Cartons\"", "0g Calories", "Naturally Caffeinated (sourced from green tea)", "Plant-based ingredients", "3 flavors: Peach-Mango", "12 hour cold brewed", "Recyclable package", "No sugar added\"", "33.8 fl oz (1 Liter) carton", "9-count\"", "12 fl. oz. cans", "288 fl. oz. Total weight", "VARIETY PACK: Variety Multi-Pack of 24 cans measuring 12 oz each. Includes 12 Lime", "HEALTHIER: Unlike sports drinks", "GUILT FREE: Drink with zero worries! LaCroix contains 0 calories", "REFRESHING: LaCroix is a wholesome", "FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!\"", "Zero Sugar", "Zero Calories\"", "Zero calories", "Natural mineral water with natural CO2 added", "3 x 8-packs\"", "Real Horizon Milk on the GO", "8 g Protein per Serving", "18-count", "8 fl oz containers\"", "Natural minerals & electrolytes", "Sparkling water straight from the Alps\"", "Decadent Dark Chocolate Tasting Notes\"", "Premium Green Tea and Japanese Matcha", "Infused with Moringa", "Enhanced with B Vitamins and Plant-Based D3", "Prebiotic Fiber to Promote a Healthy Gut\"", "VitaCup Green Tea Instant Sticks are ideal for any tea drinker", "Premium Green Tea Leaves & Matcha Powder", "Nutrient-Dense Moringa Oleifera", "Vitamins B5", "Inulin Healthy Prebiotic Fiber", "Natural Antioxidants", "Dietitian Formulated", "12 fl. oz. can   Evaporated Milk\"", "Sugar", "Japanese Origin - Our premier non-GMO matcha comes from the lush volcanic regions of Kyoto and Kagoshima in Japan.   About Sencha Naturals   Welcome to our Sencha Naturals family! With a mission of \u201cGreen Tea for All", "Clean Ingredients - We are committed to providing products that are Non-GMO", "GMP Certified Facility - Based in Southern California", "Made with ingredients from natural origin Italian fruits\"", "20g rolled oats in every serving", "32 oz carton\"", "Net Weight 144 fl oz\"", "11.1 fl oz.\"", "11.1 fl oz (330 mL) carton", "12 ct", "Total 3.96 L\"", "6 - Tropical Vibe (starfruit pineapple)", "6 - Arctic Vibe (frozen berry)", "0 sugar", "Gluten free", "Kosher", "Non GMO", "Certified vegan\"", "Vegan\"", "The Original", "16.9 fl oz (500 mL) carton", "12-count   More Information:   100% Juice", "Never from concentrate", "Hydrate Naturally", "Full of Electrolytes and Nutrients", "Coconuts Hand-picked From Small Family Farms\"", "Honey Citron & Ginger Tea", "No Artificial Preservatives", "No Artificial Flavors or Colors\"", "312 Bags Total", "Served Hot or Iced", "Rainforest Alliance Certified", "Grape Flavor", "Sugar free", "1.93 fl oz Bottle", "24 Count\"", "20mg sodium", "26g total sugar\"", "Bottle Fee will apply to shipments going to California", "2 - 2.5 gallon jugs per case", "48 cases", "96 total jugs", "240 total gallons of water   Click here to view PDF of Regional Waters by State   State", "Regional Water Brand   AL", "Deer Park   AR", "Ozarka   AZ", "Arrowhead   CA", "Arrowhead   CO", "Arrowhead   CT", "Poland Spring   DC", "Deer Park   DE", "Deer Park   FL", "Zephyrhills   GA", "Deer Park   IA", "Ice Mountain   ID", "Arrowhead   IL", "Ice Mountain   IN", "Ice Mountain   KS", "Arrowhead   KY", "Ice Mountain   LA", "Ozarka   MA", "Poland Spring   MD", "Deer Park   ME", "Poland Spring   Ml", "Ice Mountain   MN", "Ice Mountain   MO", "Ice Mountain   MS", "Ozarka   MT", "Arrowhead   NC", "Deer Park   ND", "Ice Mountain   NE", "Ice Mountain   NH", "Poland Spring   NJ", "Poland Spring   NM", "Arrowhead   NV", "Arrowhead   NY", "Poland Spring   OH", "Ice Mountain   OK", "Ozarka   OR", "Arrowhead   PA", "Deer Park   RI", "Poland Spring   sc", "Deer Park   SD", "Ice Mountain   TN", "Deer Park   TX", "Ozarka   UT", "Arrowhead   VA", "Deer Park   VT", "Poland Spring   WA", "Arrowhead   Wl", "Ice Mountain   WV", "Deer Park   WY", "Arrowhead\"", "180-bags\"", "1-Chai Spice Black Tea", "1-Chamomile Herbal Tea (Caffeine Free)", "1-Earl Grey Black Tea", "1-English Breakfast Black Tea", "1-Peppermint Herbal Tea (Caffeine Free)", "1-Premium Green Tea\"", "32 fl oz cartons", "3 count", "Net Weight: 3 qt\"", "Roots - We've blended carrots and beets to create delicious juices for all taste buds-from earthy to sweet! Known for their rich color and sweet flavor", "Citrus Juices - Our citrus blend is refreshing", "Green Juices - Made from the freshest", "Shots - Our shots pack a powerful punch of fresh pressed ingredients that you can feel working! Throw one back for a quick pick-me-up or pour over your favorite juice for an extra boost of flavor.   Cold pressed juice and shots", "All natural fruits and vegetables", "No sugars added", "High-pressured processed (HPP)", "Individually labeled", "Keep refrigerated", "Includes 3 greens with ginger", "No artificial flavors", "No artificial sweeteners\"", "These shots are lemony with a powerful kick from ginger and cayenne. Ginger's spicy goodness contains anti-inflammatory properties that help with circulation", "These shots are milder than the wellness shots", "3 Orange Turmeric"], "data": [33, 4, 1, 1, 1, 1, 3, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 5, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 66, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Price": {"label": ["$56.99 ", "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "A cake the dessert epicure will die for!Our Top Selling Cake! Fudge brownie base, layered in velvety smooth peanut butter mousse, rich chocolate cake, topped with brownie chunks, handful of peanut butter chips, drizzled in fudge. This cake is the thoughtful gift idea that\u2019s perfect for family, friends, coworkers, or to anyone you care about in your life. -\tGenerously sized precut slices, a cake lover\u2019s dreams come true! Includes:Measures 10\u201d diameterWeighs in at 6.8 lbs.14 servings OU-D certified, the most trusted kosher certification in the U.S.All natural with no added preservativesSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "$159.99 ", " please do not consume", " 7\u201d high", " Milk", "$44.99 ", "Moist and buttery sponge cakes with the traditional European madeleine flavor of almond. The Classic Madeleine is baked in the shape of seashell with ridges on one side and a \u201cbelly\u201d on the other. Each madeleine is individually-wrapped for portion control and convenience.The Origin of the Madeleine: 18th century King Stanislas 1st, Duke of Lorraine During a festive dinner party in Commercy, France, the king\u2019s chef abruptly left the kitchen. Seeking a solution to feed his guests dessert, a servant girl in the kitchen offered to make her family\u2019s traditional pastry. The king enjoyed the little cake so much that he named it after the servant: Madeleine. Baked with non-GMO ingredients and free-range eggs. No preservatives, palm oil, hydrogenated oil or colorings. Baked with love in France.We all have our Madeleine moment:Enjoy everyday for breakfast, snack or dessert (Just as the French do!)Pack in lunches or backpacks for schoolServe during business, book club or PTA meetingsCut in half and fill with jelly or chocolate hazelnut spreadDecorate cakes or cupcakes with classic seashell shapeIncludes:100 countIndividually wrappedFree-range eggsNon-GMO ingredients", "$39.99 ", "These delectable butter pecan meltaways are the perfect snack or dessert for the whole family. The treats are made with pure creamy butter and large pecan chunks and have just the right amount of powdered sugar to satisfy your sweet tooth.Includes:Includes: 2 Tins (32 oz. each)Contains nutsNo preservativesEnjoy with your morning coffee or teaCookies can be stored at room temperature for up to 60 daysEach tin contains approximately 64 cookiesKosher OU-DSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "$59.99 ", "A cake the dessert epicure will die for!To the ultimate chocolate lover - We've baked your dream cake! Four split layers of our rich chocolate cake, filled with a smooth milk chocolate mousse, finished in chocolate ganache & covered in dark chocolate bark pieces. This cake is the thoughtful gift idea that\u2019s perfect for family, friends, coworkers, or to anyone you care about in your life. Generously sized precut slices, A cake lover\u2019s dreams come true! Includes:1 - 10\u201d Premier Chocolate Overload CakeWeighs in at 7.2 lbs.14 Servings OU-D certified, the most trusted kosher certification in the U.S.All natural with no added preservativesSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "\"Strawberry Cheesecake: There's only one way to make our cheesecakes taste even better - add fruit! We've topped off our plain New York cheesecake with a generous helping of strawberry preserves for a taste that's to die for. Each slice is packed with loads of creamy filling, graham crust and sweet strawberries.Mango Cheesecake: We've done it again with our Mango Cheesecake. It's a 10\"\" cake with swirls of mango on top of a creamy cheesecake and delicious crust. This mix of cream cheese", "$74.99 ", " and Imported from", " No Trans Fat", "Creamy Dreamy:This smooth creamy cheesecake has no sugar added and no flour. It\u2019s hard to believe we\u2019ve taken that out, and what remains is a light luscious dessert with no unpleasant aftertaste.Marble Truffle:A layer of our rich, delicious, flourless, no-sugar-added (NSA) chocolate truffle cake is topped with a layer of our wonderful no-sugar-added cheesecake, then swirled with a bit of chocolate on top. The combination results in a flourless cake that is the perfect blend of rich sinful chocolate balanced with cool creamy cheesecake. Perfect for chocolate lovers as well as cheesecake lovers.Includes:1 - Creamy Dreamy Cheesecake 1- Marble Truffle CheesecakeEach Cheesecake serves approximately 14 people28 slices totalWeight: Approximately 3 lbs. 5 oz. EachShips in Cooler with Dry Ice to Maintain Quality & FreshnessMade in the USAKosher OU-DairySome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: If not being consumed immediately upon arrival, cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.", "$29.99 ", "Due to the perishable nature of this product orders will only ship on Monday and Tuesday for Thursday and Friday delivery. Orders will not ship over the weekend. Orders placed after 9 am PST on Tuesday will not ship until the following Monday.David\u2019s Cookies has perfected the art of the chocolate chunk cookie by using only the best ingredients. Our recipe calls for fresh eggs, milk, velvety butter, and loads of big Chocolate chunks to create the most irresistible cookies on this planet.Chocolate Chunk:Approximately 12 cookies/servingsKosher Dairy OUDCan be frozen for up to 6 months Brownie Tray:Fudgy chocolate brownie made with pure melted chocolate. Filled with walnuts, chocolate chips, peanut butter chips and topped with chocolate ganache drizzle. Approximately 6 servingsKosher Dairy OUDCan be frozen for up to 6 monthsSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "$62.99 ", "A cake the dessert epicure will die for! Five bright and colorful layers of this delightful cake are perfect for celebrating any happy or festive occasion! We\u2019ve decorated this dessert with a lightly flavored vanilla icing to keep this colorful surprise a secret until you cut the first slice.", " and as a result it is possible that any product may have come in contact with nut or nut oils   Important Handling Instructions:", " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.\"", "$299.99 ", " 3 1/2\u201d High", "$54.99 ", "There is nothing like eating a warm just baked cookie right from your own oven. Featuring David\u2019s Cookies world famous Preformed Gourmet Chocolate Chunk Cookie Dough made with pure, fresh ingredients like milk, flour, sugar, eggs and butter. Our preformed Chocolate Chunk cookie dough makes baking cookies fun and easier than ever. It's a simple One-Step process: put the sheet in the oven, bake and you're done! Features:Includes 90 Pieces of 1.5 oz Preformed Gourmet Chocolate Chunk Frozen Cookie DoughApprox. 8.5 pounds of cookie doughNo Added PreservativesBake and ServeShips in Cooler with Dry Ice to Maintain Quality & FreshnessKosher OU-D CertifiedSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils.Important Handling Instructions: Freeze for up to six months in a freezer safe container.Baking Instructions: Preheat oven to 350\uf0b0 degrees F. (Keep dough frozen until ready to use). Place cookies on ungreased baking sheet at least 3\u201d apart. Bake until slightly golden brown, approximately 12-14 minutes. Let Cool.", "\"It's not just the birthday girl or boy that will be smiling when they enjoy David's Cookies 10\"\" Chocolate Birthday Cake. From the moist dark chocolate with a fudgy filling to the candy confetti", " \"\"Happy Birthday\"\" is written in swirls of pastel colors and is playful enough to get any party started. Simple to serve", " the most respected kosher certification", " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 1 week.\"", "$89.99 ", " Chocolate", "\"We've done it again with our Turtle Cheesecake made from a recipe straight out of Brooklyn. It's a 10\"\" cake with clumps of chewy pecans drenched in a coating of caramel on top of a creamy cheesecake. This mix of cream cheese", "$49.99 ", "$99.99 ", "MILK", " three and sometimes four times a day", "$24.99 ", "Due to the perishable nature of this product orders will only ship on Monday and Tuesday for Thursday and Friday delivery. Orders will not ship over the weekend. Orders placed after 9 am PST on Tuesday will not ship until the following Monday. Whoever said that bigger isn't always better never tasted fresh baked giant cookies from David's Cookies. These lusciously JUMBO cookies, made with no added preservatives, reign supreme and comes in 4.5 oz fabulous, flavorsome, fresh baked giant cookies.Triple Chocolate:Decadent to say the least! This cookie is made from David\u2019s famous chocolate chunk cookie dough, generously topped with HERSHEY\u2019S\u00ae MINI KISSES, semi-sweet chocolate chunks & milk chocolate chunks!\tPeanut Butter:Peanut butter lovers unite! Peanut butter cookie dough is loaded with peanut butter chips and topped with chunks of REESE\u2019S\u00ae Peanut Butter Cups.Includes:2-pack Includes: 2 tins of 4 decadent 4.5oz Triple Chocolate Cookies and 4 decadent 4.5oz Peanut Butter Cookies per tinKosher OU-D certified16 Jumbo decadent 4.5oz cookies totalWeight: Approximately 4.5oz each cookieMade in the USASome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: Consume within 48 hours of receipt or freeze for up to six months in a freezer safe container.", "$72.99 ", "Ferrara\u2019s delicate & buttery cookies are the perfect companion with a cup of coffee. Using secret Old World recipes that are over 100 years old, Ferrara bakes perfect rainbow (tricolori), pignoli (almond-flavored cookies studded with pine nuts), fudge-swirled cookies & more.", " Enrico Scoppa and our great grand-uncle", " MILK", "$119.99 ", "$109.99 ", " Premium All-Butter Shortbread Cookies | Flavors: Classic", " 72 cookies total]", " each one baked to perfection using only the finest ingredients.\"", "$34.99 ", "Ferrara's Bakery of LIttle Italy in New York CityFerrara\u2019s delicate & buttery cookies are the perfect companion with a cup of coffee. Using secret Old World recipes that are over 100 years old, Ferrara bakes perfect rainbow (tricolori), pignoli (almond-flavored cookies studded with pine nuts), fudge-swirled cookies & more.Struffoli also known as Honey Balls is a Neapolitan dish made of deep fried balls of sweet dough. Crunchy on the outside and light inside, struffoli are mixed with honey and other sweet ingredients and formed into mounds or rings. They are often served for holidays and are sometimes served warm. Best stored at room temperature.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties. We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family-owned business operated by the fifth generation. That\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little.Includes:2 lb Assorted Italian Cookie Tray16 oz. Struffoli Honey BallsPRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENT", " and as a result it is possible that any product may have come in contact with nut or nut oils.", " your pie should be placed in the freezer. The pie will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 7 days. The pie is fully baked and can be enjoyed chilled or at room temperature. Thaw the pie in the fridge for about 4 hours (or on your kitchen counter for around 2 hours).\"", " your pie should be placed in the freezer. The pie will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 7 days. The pie is fully baked", " Organic Lemon", "$27.99 ", " 10-Blue Raspberry (0.34 oz)", "$21.99 ", "$20.99 ", "$19.99 ", "$439.99 ", "*Business Members please click on Business Delivery tab above to see if local delivery is available in your area.The item may also be available at your local warehouse at a lower non-delivered price.Bottle Fee will apply to shipments going to California, Connecticut, Delaware, Michigan, New York, Oregon, Vermont and Maine. Kirkland Signature bottled water\u2019s pure, fresh taste, high quality and value makes staying refreshed and hydrated easy! Our water is bottled with state-of-the-art purification, filtration and reverse osmosis technologies with the highest quality certifications in the industry. Kirkland Signature bottled water is the perfect solution for your on-the-go lifestyle!Product description:Proprietary mineral blend added to create Kirkland Signature\u2019s pure taste.Bottled using state-of-the-art purification, filtration and reverse osmosis technologies with each bottle undergoing automated digital imaging inspection.Utilization of food grade recycled PET (rPET) where feasible. Our bottle and cap are recyclable. Please use store drop off locations to recycle the printed filmFeatures:Perfect size for an on-the-go lifestyle, school lunches, sports, events and entertaining.Zero calories, no sweeteners and no artificial colors or flavors.Bottled using the highest quality standards in the industry.Minerals added for a pure, refreshing taste.16.9 oz/0.5L plastic (PET & rPET) bottles o\tVirgin and Recycled Polyethylene Terephthalate (PET & rPET) are BPA free.40 bottles per case48 cases per pallet", "$9.99 ", " lactose", "$14.99 ", "$18.99 ", "$21.49 ", "$17.99 ", " dairy-free ingredients that are Non-GMO Certified", " for a smooth and creamy cup of coffee every time.", " steam", " consume only with water and your choice of organic herbal tea.   15 (12 oz.) Cold Pressed Juices   3Hulk", " flavors)", " consume organic fruits and vegetables moderately   For any questions or concerns regarding your online order", "$23.99 ", "$4.99 ", " smooth taste", " 6-Vintage Cola", " refreshing", " plant fiber", " flavors", "$12.99 ", "$32.99 ", " Frose-Rose and Grape\"", "$13.79 ", " 6 Lemon", " vitamin enhanced waters", " 0 sweeteners", " refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym", "$23.49 ", "2-pack (two 1.87 lb cocoa tins) Each 1.87 lb. tin makes 42 servings of hot cocoaMade with ethically sourced cocoa powderStarbucks is committed to purchasing cocoa that\u2019s grown and traded in an ethical and transparent way Made with cane sugarJust add 1-cup hot milk KosherIngredients: cane sugar, cocoa (processed with alkali), vanilla powder", " Minerals", "Start your morning with a burst of energy and focus from our delicious Green Tea Instant Sticks. Sip on a smooth, satisfying green tea infusion made with traditional Japanese matcha powder, plus an infusion of moringa and essential vitamins. Each packet contains a balanced combination of nutrients, amino acids, and prebiotic fiber.", " especially the wellness warrior on-the-go! Pour one packet with 8 ounces of hot or cold water and stir until completely dissolved (about 10 seconds). You\u2019ll love the energy and detox benefts from a powerhouse blend of antioxidants and natural caffeine.   2-pack (48-counttotal)", " B6", " No Artificial Ingredients", " Supports Energy & Mood", " Sugar-Free", "$22.99 ", " Gluten", " Gluten-Free and Veganwhen possible.", " all of our products are packaged in our own cGMP certified facility for highest quality control", "$8.99 ", "$15.99 ", "$28.99 ", "Pure Coconut Water", "Contains premium honey, citron slices, and ginger, which are harmoniously mixed togetherVonbee Honey Citron & Ginger Tea4.4 lb 2-countTeaJamSalad Dressing & More", "Original Lipton Tea Bags104 bags per box3 boxes 312 bags totalServed hot or icedRainforest Alliance CertifiedKosher", "$16.49 ", "$549.99 ", " Connecticut", "$17.49 ", "Variety pack:", "$25.99 ", "$11.69 ", "$69.99 ", " root vegetables contain powerful benefits that promote liver health", " hydrating and crisp. It contains ingredients like lemon and mint that are known to stimulate and alkalize the system", " highest-quality green vegetables we can find", " 3 spicy roots", "$21.79 ", " aid in digestion by soothing the stomach and support glowing skin and circulation.   Vitality Shots", " sweet and spicy with an earthy aftertaste. Turmeric takes the spotlight here containing a compound called curcumin. Benefit from the anti-inflammatory and antioxidant properties of curcumin to relieve joint pain and muscle aches.   24 Bottles - 18 Juices (12 oz)"], "data": [1, 309, 1, 3, 1, 3, 4, 1, 1, 4, 1, 7, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 3, 1, 1, 1, 1, 1, 7, 1, 1, 2, 4, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 2, 2, 1, 4, 2, 1, 7, 1, 5, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 4, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Discount": {"label": ["No Discount", "This item is not returnable.", " remove before eating)", " Soy", " and mango will take you on a tropical journey of satisfaction!Includes:2-pack Includes: 1 Strawberry Cheesecake and 1 Mango CheesecakeKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachShips in Cooler with Dry Ice to Maintain Quality & FreshnessMade in the USASome of our products may contain nuts. Our facility is NOT a nut-free facility", " France", " No Hydrogenated Oil   Palm Oil Free\"", " it's sugary heaven from top to bottom! Moist and rich", " your cake is ready to eat once thawed. Includes plates", " Caramel", " nuts and caramel is a true taste excursion. For our Triple Chocolate Cheesecake we\u2019ve melted milk chocolate on top of a creamy chocolate cheesecake center and set the whole confection on top of a layer of Devil\u2019s food cake. This exquisite dessert is the perfect choice for any gourmet chocolate lover.Features:2-pack Includes: 1 Chocolate Carmel Pecan", "EGGS", " in small batches. Because of the frequency with which we bake", " Antonio Ferrara", " EGGS", " Chocolate Crunch", " and can be enjoyed chilled", "After $30 OFF", " Organic Ginger", " Organic Turmeric", " 10-Strawberry Watermelon (0.32 oz)", "After $5 OFF", " soy", " Kosher", " and form latte art.", "After $20 OFF", " please reach out to Pulp and Press directly at support@pulpandpress.com or by phone at (866)-208-9319. A representative will be in touch with you within 24 hours.\"", " 6-Classic Grape", " and actually good for you", " and botanicals to support digestive health", " or preservatives", " and 6 Grapefruit. Perfect for the fridge", " and sodas", " and 0 sodium. Our sparkling water is vegan", " in the office or on the go!", " and Antioxidants", " B1", " Soy-Free", " Dairy-Free - Matcha is naturally free of gluten", " we believe in transparency and accountability", " food safety", " Delaware", "After $4.50 OFF", " fight free radicals", " aid in digestion", " our green juice is a simple and easy addition to a healthy lifestyle. Leafy green vegetables are known for their antioxidants", " 3 sweet citrus", " 6 Shots (2 oz)   6 Greens with Ginger"], "data": [91, 353, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Rating": {"label": ["Rated 4.3 out of 5 stars based on 265 reviews.", "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Rated 5 out of 5 stars based on 1 reviews.", " Egg", "Rated 4.1 out of 5 stars based on 441 reviews.", "Rated 4.7 out of 5 stars based on 9459 reviews.", "Rated 4.5 out of 5 stars based on 758 reviews.", "Rated 4.4 out of 5 stars based on 369 reviews.", " and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: If not being consumed immediately upon arrival", "Rated 4.7 out of 5 stars based on 2241 reviews.", "Once upon a time in the French coastal town of St Michel Chef-Chef, a Chef P\u00e2tissier Grellier was making delicious round butter cookies he called Galettes from his secret recipe that he baked with love in his oven. His Galettes were so delicious and popular that one day, his wife Constance had a genius idea: \u201cWhy not sell the cookies to the beachgoers visiting from Paris?\u201d The cookies were a huge hit and the French Galette was born.   This is the St Michel Bakery started in 1905. Since then, this family owned company brings you the very best of French butter cookies and other French pastry delights.   La Grande Galette is inspired from an original recipe from 1905 in the tradition of French Cookie Baking. St Michel French Butter Cookies are made only from selected wholesome ingredients like free-range eggs our specialty Gu\u00e9rande Sea Salt.   No Coloring, no preservatives, no hydrogenated fat and no palm oil guaranteed.   Includes:   6 Pack Total - Each carton holds 1.3LB (600g) per pack   Each carton holds 12 individual Pouches of 3 cookies each for freshness per pack. Total 36 cookies per carton.", "Rated 4.4 out of 5 stars based on 232 reviews.", "Rated 4.4 out of 5 stars based on 1679 reviews.", "Rated 5 out of 5 stars based on 2 reviews.", "Rated 4 out of 5 stars based on 357 reviews.", "Rated 3 out of 5 stars based on 1 reviews.", "Rated 4.7 out of 5 stars based on 273 reviews.", "Rated 4.6 out of 5 stars based on 369 reviews.", " this", " forks", "Rated 4.6 out of 5 stars based on 133 reviews.", "Rated 4.5 out of 5 stars based on 452 reviews.", " Pecan", " 1 Triple chocolateTrans fat freeContains PecansKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachMade in the USAImportant Handling Instructions:If not being consumed immediately upon arrival", "No Reviews", "Rated 4.2 out of 5 stars based on 85 reviews.", "Rated 1.5 out of 5 stars based on 2 reviews.", "Rated 3.6 out of 5 stars based on 5 reviews.", " Ferrara acquired our great reputation for quality and freshness. Today", "Rated 3 out of 5 stars based on 2 reviews.", "Rated 4.7 out of 5 stars based on 687 reviews.", "Rated 4.3 out of 5 stars based on 845 reviews.", "Rated 4.3 out of 5 stars based on 87 reviews.", " opera impresario and showman", " SOY & FLOUR ARE PRESENT\"", "Rated 2.2 out of 5 stars based on 4 reviews.", " SOY & FLOUR ARE PRESENT   24 Mini Plain Filled Cannoli", "Rated 4.2 out of 5 stars based on 181 reviews.", "Rated 4 out of 5 stars based on 16 reviews.", " Dutch Chocolate and Maple Crunch.", "Rated 4.5 out of 5 stars based on 702 reviews.", "Rated 4.2 out of 5 stars based on 137 reviews.", "Rated 3 out of 5 stars based on 5 reviews.", " at room temperature or it can be heated in a 325\u00ba oven for about 1 \u00bd hours. Thaw the pie in the fridge for about 24 hours (or on your kitchen counter for around 5 hours).\"", "Rated 4.5 out of 5 stars based on 28 reviews.", " Organic Turmeric", " Organic Black Pepper.", " Organic Elderberry extract", " Organic Wheatgrass", "Rated 4.3 out of 5 stars based on 1957 reviews.", " vegan", "Rated 4.4 out of 5 stars based on 40 reviews.", "Rated 4.8 out of 5 stars based on 33 reviews.", " 6-Orange Squeeze", " office", " LaCroix is healthy for you; natural sparkling water with 0 calories", " gluten free", "Rated 4.5 out of 5 stars based on 1911 reviews.", "Rated 4 out of 5 stars based on 138 reviews.", " B12", " Dairy-Free", "Rated 4.8 out of 5 stars based on 1150 reviews.", " sugar", " and take the sustainable road less traveled by focusing on people and planet over profits.", " and oversight.   Includes:   3x - 12 oz bags\"", "Rated 4.7 out of 5 stars based on 2340 reviews.", "Rated 3.6 out of 5 stars based on 15 reviews.", " Michigan", "Rated 4.8 out of 5 stars based on 312 reviews.", "Rated 4 out of 5 stars based on 777 reviews.", " soothe the nervous system", " and provide a pick-me-up when you're feeling down.", " phytonutrients", " 3 wellness shots", "Rated 4.1 out of 5 stars based on 753 reviews."], "data": [1, 418, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Title": {"label": ["David\u2019s Cookies Mile High Peanut Butter Cake, 6.8 lbs (14 Servings)", "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "\"The Cake Bake Shop 8\"\" Round Carrot Cake (16-22 Servings)\"", "St Michel Madeleine, Classic French Sponge Cake 100 - count", "David's Cookies Butter Pecan Meltaways 32 oz, 2-pack", "David\u2019s Cookies Premier Chocolate Cake, 7.2 lbs (Serves 14)", "David's Cookies Mango & Strawberry Cheesecake 2-count (28 Slices Total)", " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.\"", "La Grande Galette French Butter Cookies, 1.3 lb, 6-pack", "David's Cookies No Sugar Added Cheesecake & Marble Truffle Cake, 2-pack (28 Slices Total)", "David's Cookies Brownie and Cookie Combo Pack", "\"The Cake Bake Shop 8\"\" Round Chocolate Cake (16-22 Servings)\"", "\"David's Cookies 10\"\" Rainbow Cake  (12 Servings)\"", "The Cake Bake Shop 2 Tier Special Occasion Cake (16-22 Servings)", "David's Cookies 90-piece Gourmet Chocolate Chunk Frozen Cookie Dough", "David's Cookies Chocolate Fudge Birthday Cake, 3.75 lbs.  Includes Party Pack (16 Servings)", " napkins", "Ferrara\u2019s Bakery New York Cheesecake 2-pack", "David\u2019s Cookies Variety Cheesecakes, 2-pack (28 Slices Total)", "Classic Cake Tiramisu Quarter Sheet Cake (14 Pre-Cut Total Slices, 4.57 Oz. Per Slice, 4 Lbs. Total Box)", "Mary Macleod's Gluten Free Shortbread Cookies Mixed Assortment 8-Pack ", "\"The Cake Bake Shop 8\"\" Round Pixie Fetti Cake (16-22 Servings)\"", "Classic Cake Chocolate Entremet Quarter Sheet Cake (14 Pre-Cut Total Slices, 4 Oz. Per Slice, 3.5 Lbs. Total Box)", "Ferrara\u2019s Bakery 8 in. Tiramisu Cake, 2-pack", " Enrico Scoppa and our great grand-uncle", " Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892", "Classic Cake Limoncello Quarter Sheet Cake (14 Pre-Cut Total Slices, 4 Oz. Per Slice, 3.5 Lbs Total Box)", "David\u2019s Cookies Decadent Triple Chocolate made with mini Hershey\u2019s Kisses and Reese\u2019s Peanut Butter Cup Cookies Tin \u2013 2 Count", "Ferrara's Bakery 4 lbs. Italian Cookie Pack", " opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties", "\"Ferrara's Bakery 48 Mini Cannoli's (24 Plain Filled and 24 Hand Dipped Belgian Chocolate) - 1.5\"\" to 2\"\" In Length\"", "Ferrara's Bakery 24 Large Cannoli's (12 Plain Filled and 12 Hand Dipped Belgian Chocolate)", "Mary Macleod\u2019s Shortbread, Variety Tin, 3-pack, 24 cookies per tin", "Ferrara's Bakery Rainbow Cookies 1.5 lb", "Ferrara's Bakery 2 lb Italian Cookie Tray and Struffoli", "\"Tootie Pie 11\"\" Heavenly Chocolate Pie", "\"Tootie Pie 11\"\" Whiskey Pecan Pie", "\"Tootie Pie 11\"\" Huge Original Apple Pie\"", "Pulp & Press Organic Cold-Pressed Wellness Shot Pack, 48-pack", " *Spirulina.   For any questions or concerns regarding your online order", "Prime Hydration+ Sticks Electrolyte Drink Mix, Variety Pack, 30-Count", "Prime Hydration Drink, Variety Pack, 16.9 fl oz, 15-count", "Alani Nu Energy Drink, Variety Pack, 12 fl oz, 18-count", "Poppi Prebiotic Soda, Variety Pack, 12 fl oz, 15-count", "Kirkland Signature Bottled Water 16.9 fl oz, 40-count, 48 Case Pallet", "Kirkland Signature, Organic Almond Beverage, Vanilla, 32 fl oz, 6-Count", "Kirkland Signature, Almond Milk, 1 qt, 12-count", "Kirkland Signature, Organic Reduced Fat Chocolate Milk, 8.25 fl oz, 24-Count", "Kirkland Signature Colombian Cold Brew Coffee, 11 fl oz, 12-count", "Hint Flavored Water, Variety Pack, 16 fl oz, 21-count", "Califia Farms, Cafe Almond Milk, 32 oz, 6-Count", " and free from carrageenan.", "Pulp and Press 3-Day Organic Cold Pressed Juice Cleanse", "Saratoga Sparkling Spring Water, 16 fl oz, 24-count", "Pure Life Purified Water, 8 fl oz, 24-count", "Fiji Natural Artesian Water, 23.7 fl oz, 12-count", "Tropicana, Apple Juice, 15.2 fl oz, 12-Count", "Olipop 12 oz Prebiotics Soda Variety Pack, 24 Count", "SO Delicious, Organic Coconut Milk, 32 oz, 6-Count", "La Colombe Draft Latte Cold Brew Coffee, Variety Pack, 9 fl oz, 12-count", "Tropicana, 100% Orange Juice, 10 fl oz, 24-Count", "Coca-Cola Mini, 7.5 fl oz, 30-count", "Joyburst Energy Variety, 12 fl oz, 18-count", "Illy Cold Brew Coffee Drink, Classico, 8.45 fl oz, 12-count", "Kirkland Signature, Organic Coconut Water, 33.8 fl oz, 9-count", "LaCroix Sparkling Water, Variety Pack, 12 fl oz, 24-count", " or your next family get-together!", " 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.", " non-GMO", "C4 Performance Energy Drink, Frozen Bombsicle, 16 fl oz, 12-count", "San Pellegrino Sparkling Natural Mineral Water, Unflavored, 11.15 fl oz, 24-count", "Kirkland Signature Green Tea Bags, 1.5 g, 100-count", "Horizon, Organic Whole Milk, 8 oz, 18-Count", "LaCroix Sparkling Water, Lime, 12 fl oz, 24-count", "Liquid Death Sparkling Water, 16.9 fl oz, 18-count", "Starbucks Classic Hot Cocoa Mix 30 oz, 2-pack", "VitaCup Green Tea Instant Packets with Matcha, Enhance Energy & Detox, 2-pack (48-count total)", " B9 & D3", " Gluten-Free\"", "San Pellegrino Essenza, Variety Pack, 11.15 fl oz, 24-count", "Carnation, Evaporated Milk, 12 fl oz, 12-Count", "Sencha Naturals Everyday Matcha Green Tea Powder, 3-pack", " and dairy", "LaCroix Curate Commemorative Collection Sparkling Water, Variety Pack, 12 fl oz, 24-count", "Lipton, Iced Tea Mix, Lemon, 5 lbs", "San Pellegrino Italian Sparkling Drink, Variety Pack, 11.15 fl oz, 24-count", "Kirkland Signature, Organic Non-Dairy Oat Beverage, 32 oz, 6-count", "Horizon, Organic Low-fat Milk, 8 oz, 18-Count", "Vita Coco, Coconut Water, 11.1 fl oz, 18-Count", "Nestle La Lechera, Sweetened Condensed Milk, 14 oz, 6-Count", "Kirkland Signature, Organic Coconut Water, 11.1 fl oz, 12-count", "LaCroix Sparkling Water, Grapefruit, 12 fl oz, 24-count", "Celsius Sparkling Energy Drink, Variety Pack, 12 fl oz, 18-count", "Vita Coco, Coconut Water, Original, 16.9 fl oz, 12-Count", "San Pellegrino Italian Sparkling Drink, Aranciata Rossa, 11.15 fl oz, 24-count", "Vonbee Honey Citron & Ginger Tea 4.4 lb 2-pack", "Honest Kids, Organic Juice Drink, Variety Pack, 6 fl oz, 40-Count", "Lipton Original Tea Bags, 312-count", "San Pellegrino Italian Sparkling Drink, Melograno & Arancia, 11.15 fl oz, 24-count", "5-hour Energy Shot, Regular Strength, Grape, 1.93 fl. oz, 24 Count", "Pepsi Mini, 7.5 fl oz, 30-count", "100% Spring Water, 2.5 Gallon, 2-count, 48 Case Pallet", " New York", "Stash Tea, Variety Pack, 180-count", "C2O Coconut Water Hydration Pack, The Original, 17.5 fl oz, 15-count", "Oregon Chai, Original Organic Chai Tea Latte Concentrate, 32 fl. oz., 3-Count", "Tiesta Tea Blueberry Wild Child, 2 - 1 Pound Bags & 5.5oz Tin", "Pressed Cold-Pressed Juice & Shot Bundle -18 Bottles, 9 Juices & 9 Shots", " protect your eyesight", " as well as enhancing oxygen transport and serving as a natural source of energy. Our green juice is perfectly blended so you never have to compromise taste for nutrition.", " 3 vitality shots", "Ito En Jasmine Green Tea, Unsweetened, 16.9 fl oz, 12-count", "Pure Leaf Tea, Sweet Tea, 16.9 fl oz, 18-count", "Ito En Oi Ocha Unsweetened Green Tea, 16.9 fl oz, 12-count", "Pressed 3-Day Cleanse Bundle (18 Juices & 6 Shots)"], "data": [1, 383, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Currency": {"label": ["$", " candles and confetti. A party in a box!   Features:   10\"\" Hand-decorated Chocolate Fudge Birthday Cake", " Antonio Ferrara", " the spirit", " 2- pack \"", " 2-pack\"", " please reach out to Pulp and Press directly at support@pulpandpress.com or by phone at (866)-208-9319. A representative will be in touch with you within 24 hours.\"", " and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.", " making it incredibly versatile for daily use in many food and drink recipes.   Balanced Caffeine - With about 1/3 the amount of caffeine as a cup of coffee", " Oregon", " and more! Grown deep in the ground", " 3 elderberry shots\""], "data": [488, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]}, "Feature": {"label": ["\"\"\"10\"\"\"\" Peanut Butter Cake", "Zero Calories   Zero Sweeteners", "Spiced Carrot Cake with Cream Cheese Frosting   Silk Cherry Blossom Flowers (Not Edible)   No Nuts or Raisins   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "100 count", "Butter Pecan Meltaways", "\"\"\"10\"\" Four Layer Chocolate Cake", "2-count", "1.3 lb, 6-count", "6 Rocky Road Brownies", "3 Layers of French Valrhona Chocolate Cake   Mousse Malted Cream & Fudge Frosting   Topped with Fleur de Sel & Does Not Come with Flower   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "\"10\"\" Rainbow Cake", "Peony Flower & Plate Not Included   Flavor: Lemon Cake with Pearl White Pixie Glitter\u00ae   Cake Filling: Raspberry Jam with Lemon Curd & Cake Frosting: Lemon Buttercream   Bottom Tier: 9\u201d Diameter, 3 1/2\u201d High & Top Tier: 7\u201d Diameter, 3 1/2\u201d High   16-22 Servings", "90 Pieces Frozen Gourmet Chocolate Cookie Dough", "10 inch Chocolate Fudge Birthday Cake", "8 inch New York Cheesecake 2 pack   Each Cake services 10-12 people", "\"\"\"10\"\"\"\" Cheesecakes", "Quarter Sheet Cake (14 - 4.57 Oz Pre-Cut Slices Total)   Layers of Ladyfingers Soaked in Coffee Syrup   Filled with Vanilla Mascarpone Cheese Mousse", "Gluten Free Chocolate Crunch Shortbread 4-boxes   Gluten Free The Classic Shortbread - 4 boxes", "Almond Flavored Cake with Pixie Fetti\u00ae Confetti   Almond Flavored Buttercream   Topped with Pastel Pixie Fetti\u00ae Confetti   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "Quarter Sheet Cake (14 - 4 Oz Pre-Cut Slices Total)   Devil\u2019s Food Cake   Dark Chocolate Mousse Topped with Dark Chocolate Ganache", "8 inch Tiramisu Cake 2-pack   Each Cake services 10-12 people   Classic Flavors of Espresso and Mascarpone", " opera impresario and showman", " recipes and devotion to quality has changed very little.   Ingredients\u2013 Heavy Cream", "Quarter Sheet Cake (14 - 4 Oz. Pre-Cut Slices Total)   Almond Joconde Cake With Lemon Syrup   Layered with White Chocolate Mousse & Lemon Curd", "Panettone Classic   Italian Cake   Milan Specialty", "8 Jumbo Triple Chocolate made with mini Hershey\u2019s Kisses", "4 lbs. Italian Cookies", " recipes and devotion to quality has changed very little.", "24 Mini Plain Filled Cannoli   24 Mini Hand Dipped Belgian Chocolate Cannoli   Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness   Chocolate Cannoli: After thawing should be eaten within 48 hours   Frozen: Can be stored up to a year", "12 Large Plain Filled Cannoli   12 Large Hand Dipped Belgian Chocolate Cannoli   Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness   Chocolate Cannoli: After thawing should be eaten within 48 hours   Frozen: Can be stored up to a year", "Three elegant keepsake tins   All-butter artisan shortbread cookies   Variety of 4 flavors in each tin   Perfect for all your gifting needs   Certified Women Owned bakery", "\"Tricolor Rainbow Cookies   Each cookie is approximately 1.5 x 2\"\"   Small Batch Baking   Can be frozen for up to 6 months\"", "Assorted Italian Cookie Tray", "$", "\"One 11\"\" Apple Pie   Serves Approximately 10-12 people   Diameter: 11\"\" Each and Weight: 6 lbs.   Ships with Dry Ice to Maintain Quality & Freshness   Made in the USA\"", "12 Ginger, 12 Turmeric, 12 Wheatgrass and 12 Elderberry   Certified Organic   No Preservatives, Added Sugar, Additives (Colors, Flavors)   Vegan and Gluten Free", "Activate with Water   No Added Sugar   Antioxidants + Electrolytes   Caffeine Free   Gluten Free", "5 - Tropical Punch   5 - Lemon Lime   5 - Blue Raspberry   16.9 fl oz Bottles   15 Total Bottles", "6 - Juicy Peach   6 - Cosmic Stardust   6 - Cherry Slush   12 fl oz Cans   18 Total Cans", "5 - Doc Pop   5 - Grape   5 - Root Beer   12 fl oz Cans   15 Total Cans", "5 - Strawberry Lemon   5 - Orange   5 - Cherry Limeade   12 fl oz Cans   15 Total Cans", "Business Members* Click the Business Delivery Tab for Local Delivery Options", "Unsweetened   Non-Dairy Beverage   USDA Certified Organic   No Sugar Added   Vegan", "Kosher   Vegan   Free of Dairy, Lactose, Soy   No Added Sugar   Made in the USA", "USDA Certified Organic   2% Milk Fat   Grade A   Excellent Source of Calcium   Net Weight 198 fl. oz.", "Cold Brewed   Product of Colombia   Roasted and Packaged in the USA   100% Colombian   12-count", "7 - Blackberry   7 - Watermelon   7 - Peach   16 fl oz Bottles   21 Total Bottles", "Non GMO   Vegan   Kosher   Soy Free   Dairy Free", "6 (2.4 oz.) Elixir Shots   15 (12 oz.) Cold Pressed Juices   Cold pressed   Certified Organic   Product of Canada", "Spring Water   16 fl oz Bottles   24 Total Bottles   0 Calories per Bottle", "Purified Water   8 fl oz Bottles   24 Total Bottles", "Natural Artesian Water   23.7 fl oz Bottle with Sports Cap   12 Total Bottles", "100% Juice   100% Daily Value of Vitamin C   From Concentrate with Other Natural Flavors and Ingredients   Marked for Resale   12-Count", "24 count (12 oz each)   Prebiotics, plant fiber, and botanicals to support digestive health   Variety pack: 6-Root Beer, 6-Vintage Cola, 6-Classic Grape, 6-Orange Squeeze   No artificial sweeteners, flavors, or preservatives   Non-GMO Project Verified, Gluten-free, Vegan, Keto & Paleo", "USDA Organic   Kosher   Certified Gluten-Free   Non GMO Project Verified   Certified Vegan", "Variety Pack   4 - Triple Draft Latte   4 - Mocha Draft Latte   4 - Vanilla Draft Latte   100% Arabica Coffee", "Orange Juice   Made From Concentrate   100% DV Vitamin C per Serving   10 fl. oz. Bottle   Net Weight 240 fl. oz.", "Original   7.5 fl oz Cans   30 Total Cans   90 Calories per Can", "0g of sugar   0g Calories   Naturally Caffeinated (sourced from green tea)   Plant-based ingredients   3 flavors: Peach-Mango, Frose-Rose and Grape", "Classico   8.45 fl oz Cans   12 Total Cans   100% Arabica Coffee   5 Calories per Can", "No Sugar Added   Not From Concentrate   100% Juice   USDA Organic   Kosher", "Kosher (Circle U)   0 Calories, 0 Sweetener, 0 Sodium   Naturally Essenced Sparkling Water   6 Lemon, 12 Lime, 6 Grapefruit", "Frozen Bombsicle   16 fl oz Cans   12 Total Cans   Zero Sugar   200mg Caffeine", "Zero Calories   Unflavored Original", "100-count   1.5 g. bags   A Blend of Sencha & Matcha   Hot & Cold Brewing   Product of Japan", "USDA Organic   Kosher   Grade A   Never any Preservatives   Net Weight: 144 fl oz", "Kosher (Circle U)   0 Calories   0 Sweetener   0 Sodium   Naturally Essenced Sparkling Water", "100% Mountain Water   16.9 fl oz Cans   18 Total Cans", "Rich Velvety Cocoa", "2-pack (48-count total)", "Vitamin D Added   The Cooking Milk   Replace Drinking Milk in Recipes   Adds Extra Creaminess and Rich Flavor   Net Weight 144 fl oz", "Sourced From Japan   Certified Non-GMO   Perfect for Drinking, Blending and Baking   225 Servings", " matcha provides a sense of calm focus without the jitters.", "Kosher (Circle U)   0 Calories, 0 Sweetener, 0 Sodium   Naturally Essenced Sparkling Water   8 Pineapple Strawberry, 8 Blackberry Cucumber, 8 Cherry Lime", "Sweetened Iced Tea Mix   Natural Lemon Flavor   Kosher   Makes 38 qts   Product of Canada", "12 - Aranciata Rossa (Orange & Blood Orange)   12 - Limonata (Lemon)   11.15 fl oz Cans   24 Total Cans", "Kosher   Non GMO   USDA Organic   100% Vegan   6-Count", "USDA Organic   Kosher   Grade A   Never Any Preservatives   18-Count", "Coconut Water   Replenish Lost Electrolytes   Recharge with Vital Nutrients   Hydrate with the Goodness of Coconuts   Net Weight 199.8 fl. oz.", "La Lechera   Sweetened Condensed Milk   6-Count   14 oz Can   Net Weight: 84 oz", "Kosher   USDA Organic   No Sugar Added   Not from Concentrate   100% Juice:", "0 Calories   0 Sweetener   0 Sodium", "6 - Peach Vibe   6 - Tropical Vibe   6 - Arctic Vibe   12 fl oz Cans   18 Total Cans", "Kosher   Gluten Free   Soy Free   Non GMO", "Product of Italy   11.15 fl oz Cans", "4.4 lb 2 count", "Juice Drink   USDA Organic   From Concentrate   6 oz Boxes   40-Count", "3 Boxes", "Regular Strength Energy Shot   Grape Flavor   Sugar free   1.93 fl oz Bottle   24 Count", "Original   7.5 fl oz Cans   30 Total Cans   100 Calories per Can", "Brand Varies by State   Full Pallet of Single Brand:   Arrowhead   Ice Mountain   Ozarka   Deer Park   Poland Spring   Zephyrhills", " Vermont and Maine.   100% spring water", "Stash Tea Bags   Green Tea   30 bags per box   6-boxes", "Never From Concentrate   Plant Based Hydration   Electrolytes in Every Can   Non-GMO   Chill before serving", "Chai Tea Latte Concentrate   USDA Organic   Just Add Milk   Enjoy Hot   Enjoy Cold", "Non-GMO Project Verified", "9 - 12 oz. Bottles   9 - 2 oz.. Shots   No Sugars Added, No Added Water, 100% Fruits and Vegetables   Kosher   No Preservatives", " root vegetables absorb high amounts of vitamins and minerals from the soil. They have distinct", "Unsweetened   Refrigerate After Opening   Non GMO   16.9 oz Bottle   12-count", "Sweet   16.9 fl oz Bottles   18 Total Bottles", "Non-GMO   Sugar Free   Fat Free   Product Of Taiwan", "24 Bottles   No Sugars Added   100% Fruits and Vegetables   No Preservatives   Kosher"], "data": [1, 396, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Product Description": {"label": ["Zero sugar", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn\u2019s moist and delicious carrot cake is made with hand peeled and freshly grated carrots. Perfectly spiced with just the right amount of cinnamon, this cake has no nuts and no raisins. The three layers of spiced carrot cake are then filled and frosted with Gwendolyn's signature homemade cream cheese frosting. Topped with decorative pink silk cherry blossom flowers.   Features:   Flavor: Spiced Carrot Cake", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Peony flower and plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn's famous Earl's Court Chocolate Cake is the most popular cake in her bakeries. This decadent chocolate cake is three layers of French Valrhona chocolate cake, filled with silky Callebaut Belgian chocolate ganache and mousse-like chocolate malted cream. Frosted with her signature dark fudge Callebaut frosting and topped with a sprinkling of Fleur de Sel Sea salt that comes from the \u00cele de R\u00e9 in the South of France. This salt is only harvested three months out of the year and is the perfect topping for her cake.   Features:   Flavor: Valrhona Chocolate Cake", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Peony flower and plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn's Two Tier Special Occasion Cake is beautiful, delicious and perfect for any special occasion. Ideal for weddings, anniversaries, baby showers and other special celebrations, this two tier cake has two three-layer cakes. The bottom tier is 8\"", "Ferrara's Bakery of Little Italy in New York CityFerrara\u2019s specialty NY cheesecake is smooth and creamy with a classic graham cracker crust. Made with the perfect balance of 100% Philadelphia brand cream cheese and sour cream. Ferrara\u2019s NY cheesecake is creamy without being heavy and melts in your mouth.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little. 8 inch New York Cheesecake 2 pack Each Cake services 10-12 peopleEach cake can be refrigerated for up to 4 days (preferably in an airtight container) or frozen for up to 6 months. Defrost in the refrigerator one day in advance, or at room temperature for 3 hours.PRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENTCake plate and Cake stand are not included.", " 2-count", "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. While everyone\u2019s palette may differ, our Italian-inspired Tiramisu is a true customer favorite. Layers of Ladyfingers soaked in Coffee Syrup then filled with Vanilla Mascarpone Cheese Mousse and topped with a dusting of rich cocoa powder will whisk you away to Italy without taking flight. Whether you prefer with a cup of Espresso or your favorite after dinner cordial, our Tiramisu is the perfect accompaniment.   Includes:   Quarter Sheet Cake (14 - 4.57 Oz Pre-Cut Slices Total)", "Shortbread is a right, not a privilege. And those who eat gluten-free should be no exception. That\u2019s why the bold bakers at Mary Macleod\u2019s Shortbread stopped at nothing on their quest to create gluten-free shortbread that rivals their original recipes.The gluten-free getting is good with this multipack of eight peaked boxes, each holding six all-butter shortbread cookies that can make any gluten glutton question their life choices. Each multipack contains four boxes of GF Classic Shortbread and four boxes of GF Chocolate Crunch so you can share the love (if you\u2019re feeling generous).Gluten Free The Classic: Gluten-free glory is yours with these light, crispy butter cookies crafted with premium almond and coconut flours. It only took about 117 tries to get the recipe just right, and it was 117% worth it.Gluten Free Chocolate Crunch: A crowning chocolate chunk atop buttery shortbread with almond and coconut flours. It\u2019s our signature cookie, now deliciously gluten free. Warning: they tend to go fast, but we promise we\u2019ll bake more.About Mary's legacy, we continue to bake authentic all-butter shortbread cookies from our family recipes. Our dedicated bakers use top quality ingredients and follow artisan small-batch methods. The result is unforgettably delicious cookies.Includes:Mary Macleod\u2019s Shortbread Multipack of 8 Blue Peaked Boxes in a Gluten-Free Mixed Assortment.Gluten Free Chocolate Crunch Shortbread 4-boxesGluten Free The Classic Shortbread - 4 boxesEach elegant box contains 6 handcrafted shortbread cookies", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. The Cake Bake Shop's Pixie Fetti\u00ae Birthday Cake has three layers of fluffy white vanilla bean cake with a hint of almond flavor. Pixie Fetti\u00ae is gently folded into each layer and baked. Each layer is filled and frosted with a lightly flavored almond buttercream. The cake is topped with a piped decorative border and the center is filled with Gwendolyn's custom blend of pastel Pixie Fetti\u00ae confetti. This fun, celebratory birthday cake is perfect for any party.   Features:   Flavor: Almond Vanilla Bean Cake", "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. Topping the list of customers favorites is by far our Chocolate Entremet \u2013 a deep, rich dessert that combines luscious layers of Devil\u2019s Food Cake and dark chocolate mousse with a rich, dark chocolate ganache. It is a chocolate lover\u2019s dream with caffe latte, French press or yes, regular coffee or big glass of milk.   Includes:   Quarter Sheet Cake (14 - 4 Oz Pre-Cut Slices Total)", "Ferrara\u2019s specialty tiramisu features homemade Savoiardi (Ladyfinger cookies) that we douse with espresso & coffee liqueur and layer with sweet mascarpone.", " opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties", " Sugar", "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. In listening to our customers, we found more and more looking for a lighter, refreshing dessert with the same decadence. This gave way to our one-of-a-kind Limoncello created with almond joconde cake soaked with lemon syrup then layered with white chocolate mousse and a delicious lemon curd. The deliciousness doesn\u2019t stop there. The cake is finished with white chocolate shavings, combining a sweet and tart flavor that is delightfully light.   Includes:   Quarter Sheet Cake (14 - 4 Oz. Pre-Cut Slices Total)", "\"deMilan is baked using the traditional recipe of \"\"Panettone Milano\"\". Panettone is produced according to the traditional recipe through a slow and natural process. All the ingredients", "\"Ferrara's Bakery of Little Italy in New York City 24 Mini Plain Filled Cannoli and 24 Mini Hand Dipped Belgian Chocolate Cannoli   The Cannoli is a Sicilian pastry. First introduced more than 125 years ago by Cafe\u2019 Ferrara. A light crispy shell, sweet, velvety, creamy ricotta with chocolate chips & citron. Ferrara dips their traditional crispy cannoli shells by hand in rich Belgian chocolate before filling them with sweet ricotta cream studded with chocolate chips   A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties   We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little   Cannolis are made fresh, frozen and shipped on dry ice   1 1/2-2\"\" In length", "Ferrara's Bakery of Little Italy in New York City 12 Large Plain Filled Cannoli and 12 Large Hand Dipped Belgian Chocolate CannoliThe Cannoli is a Sicilian pastry. First introduced more than 125 years ago by Cafe\u2019 Ferrara. A light crispy shell, sweet, velvety, creamy ricotta with chocolate chips & citron. Ferrara dips their traditional crispy cannoli shells by hand in rich Belgian chocolate before filling them with sweet ricotta cream studded with chocolate chipsA little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very littleCannolis are made fresh, frozen and shipped on dry ice 12 Large Plain Filled Cannoli12 Large Hand Dipped Belgian Chocolate CannoliPlain Cannoli: After thawing should be eaten within 2 hours for maximize crispnessChocolate Cannoli: After thawing should be eaten within 48 hoursFrozen: Can be stored up to a yearPRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENT", "Mary Macleod\u2019s Shortbread tastes like true love in pure, buttery cookie form. Inside each tin are handcrafted, all-butter, gourmet shortbread cookies in Mary Macleod's most popular flavors. The keepsake tin is gorgeous featuring gold foil embellishments for a touch of timeless elegance. The combination of luxurious packaging and melt-in-your-mouth cookies will create a lasting memory. Each tin is filled with 24 shortbread cookies in 4 of Mary Macleod\u2019s premium flavors: The Classic, Chocolate Crunch, Dutch Chocolate and Maple Crunch. Handcrafted and baked to perfection, every cookie is made with care and attention to detail, ensuring the highest quality and taste. This is the perfect corporate gift to show your appreciation to coworkers, clients, partners, suppliers and more. They are also fantastic and versatile for personal occasions - birthdays, weddings, anniversaries, holidays or just to say hello. With a multipack of 3 luxurious tins, this is a smart choice for all your gifting needs.   Includes:   Elegant Keepsake Blue Tin of Shortbread Cookies with Gold Foil Embellishments.", "\"Ferrara's Bakery of Little Italy in New York CityWith our secret recipes that span three centuries, this fifth-generation family-owned bakery continues to handcraft Italian desserts from the same location in NYC\u2019s Little Italy since 1892.Ferrara\u2019s traditional rainbow (tricolori) cookies are made in-house daily from a secret recipe that Antonio Ferrara used when he opened the bakery. This Tri-color or Rainbow cookie features layers of cake made from almond & macaroon paste that are sandwiched with apricot jam and coated in chocolate.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties.We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little.Rainbow Cookies can be refrigerated for up to a week or frozen for up to 6 months. Once opened, store in an airtight container and serve at room temperature.1.5 lb's Tricolor Rainbow CookiesEach cookie is approximately 1.5 x 2\"\"PRODUCED IN A FACILITY WHERE NUTS", "\"Two   11\"\" Heavenly Chocolate Pie   1 Pie Serves Approximately 8-10 People   Each Pie is Diameter: 11\"\" Each and Weight:   3.5 lbs.   Ships with Dry Ice to Maintain Quality & Freshness   Made in the USA\"", "\"Two 11\"\" Whiskey Pecan Pie   1 Pie Serves Approximately 8-10 people   Each Pie is Diameter: 11\"\" Each", "Made with Tootie\u2019s original recipe from 1985, our Huge Apple Pie is 6 pounds of sliced apples, mixed with the perfect blend of spices and our famous handcrafted, golden-brown flaky crust. Standing almost 4 inches tall, it makes a great gift or the perfect centerpiece for all your family get-togethers.", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders only ship Monday, Tuesday and Wednesday for Wednesday, Thursday, Friday deliveries.   At Pulp & Press, we're dedicated to making healthy living convenient and accessible to everyone. Our cold-pressed juices and wellness shots are made with only the highest quality, 100% organic, plant-based, and raw ingredients, so you can be sure you're getting the most nutritional value out of every sip. Say hello to a healthier you with our wellness shot elixirs!   12 Ginger Wellness Shot Elixir   A zesty blend of lemon, ginger, and turmeric - balanced with apple, that's perfect for supporting your immune system and aiding digestion.   12 Turmeric Wellness Shot Elixir   Loaded with superfoods like turmeric, lemon, and pineapple, plus black pepper to boost nutrient absorption.   12 Wheatgrass Wellness Shot Elixir   Boost your daily greens with this deliciously green elixir, packed with superfoods like pineapple, lemon, ginger, wheatgrass, and spirulina.   12 Elderberry Wellness Shot Elixir   Packed with antiviral ingredients like elderberry and ginger, these bright-colored shots can help support the immune system.   Fun Ways to Incorporate Wellness Shots Into Your Daily Routine:   Enjoy a shot as a refreshing start to your day", "Hydration+ Sticks Electrolyte Drink Mix", "Limit 5 per member   Gluten free", "Prebiotics for a healthy gut", "6-count", "Original Unsweetened", "24-count", "Cold Brewed", "0 calories", "Upgrade your latte. Caf\u00e9 Almond Milk froths, foams, and steams perfectly for all your espresso creations. Neutral in taste and creamy in texture, it blends beautifully into hot or iced coffee. Simple, dairy-free, plant-based goodness.\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b   FROTH + STEAM PERFECT LATTES: With Caf\u00e9 Almond Milk you can froth and steam perfect dairy-free lattes at home. Naturally creamy with a neutral taste, Caf\u00e9 Almond Milk is made for lattes.", "Due to the perishable nature of our products, Pulp & Press can not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm EST on Tuesday will not ship until the following Monday.", "Lively bubbles that refresh the palate", "100% pure quality", "Perfect for hiking, traveling and on-the-go hydration", "Apple Juice", "OLIPOP is a new kind of soda\u2122 that's delicious, refreshing, and actually good for you. OLIPOP combines the classic soda flavor you know and love with prebiotics, plant fiber, and botanicals to support your microbiome and digestive health. Every flavor has 2-5 grams of sugar and includes 9 grams of dietary fiber (about 1/3 of your daily recommended fiber intake)!   24 count (12 oz each)", "Unsweetened Coconut Milk", "Cold brew coffee drinkVariety pack: 4-Triple Shot, 4-Mocha, 4-VanillaFoamy nitrous-infused milk9 oz can", "Product may not be available in all areas due to local municipality requirements.   24-count", "Sip-sized cans", "Natural Energy, with clean, simple ingredients and green-tea caffeine. Joyburst is a better-for-you refreshing sparkling beverage without the unhealthy sugars and synthetic caffeine sources that other energy drinks have. Three delicious fruit-based flavors with a hint of sweetness, naturally-derived caffeine and refreshing sparkling water.   Features:   0g of sugar", "Illy Blend", "Organic Coconut Water", "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!   24-count", "Performance Energy Drink", "Bottled at the source, San Pellegrino Terme (Bergamo) Italy", "100-count1.5 g. bags150 g. Total net weightProduct of Japan", "Certified B Corporation", "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!24-count12 fl. oz. cans288 fl. oz. Total weightMULTI PACK: Comes with 2 packs of 12 cans (24 Cans total). Lime 12 oz cans, perfect for the fridge, office, or your next family get-together!HEALTHIER: Unlike sports drinks, vitamin enhanced waters, and sodas, LaCroix is healthy for you; natural sparkling water with 0 calories, 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.GUILT FREE: Drink with zero worries! LaCroix contains 0 calories, 0 sweeteners, and 0 sodium. Our sparkling water is vegan, gluten free, non-GMO, and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.REFRESHING: LaCroix is a wholesome, refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym, in the office or on the go!FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!", "Sourced from beneath hundreds of feet of stone", "Flavored Mineral Water24 x 11.5 fl oz8 each of Tangerine & Wild Strawberry, Blood Orange & Black Raspberry, Dark Morello Cherry & Pomegranate", "12-count", "About Matcha   Made of finely-ground green tea leaves, matcha powder is a highly versatile superfood you drink hot or cold or can add to your favorite smoothies, desserts, and countless other recipes.   Antioxidant Benefits \u2013 Matcha is naturally high in powerful antioxidants for the all-over wellbeing of your body and mind.", "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!24-count12 fl. oz. cans288 fl. oz. Total weight8-Pineapple Strawberry (Pina Fraise), 8-Blackberry Cucumber (Mure Pepino), 8-Cherry Lime (Cerise Limon)VARIETY PACK: Variety Multi-Pack of 24 slim cans measuring 12 oz each. Includes 8 Cerise Lim\u00f3n (Cherry Lime), 8 Pi\u00f1a Fraise (Pineapple Strawberry) and 8 M\u00fare Pepino (Blackberry Cucumber). Perfect for the fridge, office, or your next family get-together!HEALTHIER: Unlike sports drinks, vitamin enhanced waters, and sodas, LaCroix is a healthy for you, natural sparkling water with 0 calories, 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.GUILT FREE: Drink with zero worries! LaCroix contains 0 calories, 0 sweeteners, and 0 sodium. Our sparkling water is vegan, gluten free, non-GMO, and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.REFRESHING: LaCroix is a wholesome, refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym, in the office or on the go!FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!", "Store in cool, dry place", "(2) 6-packs of each flavor", "Made with super tasty rolled oats", "8 fl oz Milk Boxes", "Vita Coco", "No Artificial Flavors", "100% Natural Sparkling WaterGrapefruit (Pamplemousse)12 fl oz (355 mL) can24-countMore Information:KosherSodium freeSweetener freeZero calories", "6 - Peach Vibe (white peach)", "Sparkling orange and blood orange beverage11.15 fl oz cans4 boxes of 6 cans24 total cans", "Variety pack: 16-Super Fruit Punch, 8-Appley Ever After, 8-Berry Berry Good Lemonade, 8-Goodness Grape", "Sparkling orange and pomegranate beverage11.15 fl oz cans4 boxes of 6 cans24 total cans", "Regular Strength Energy Shot", "0g saturated fat", "Brand varies by geographical location.", "Coconut Water Hydration PackThe Original17.5 fl oz (518 mL) can15-countMore Information:Non-GMOChill before serving", "Original Blend of Premium Black Tea, Vanilla, Chai Spices and Honey", "Due to the perishable nature of this item, orders do not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm PST on Tuesday will not ship until the following Monday.   Pressed Juicery is on a mission to make high nutrition a realistic option for all. Our cold-pressed juices are made with all-natural fruits and vegetables - no preservatives and no added sugars.", " earthy flavors and are packed with fiber and complex carbohydrates", "Jasmine Green TeaUnsweetened16.9 oz bottle12-count", "Real brewed tea - never from powder", "Made With Japanese Green Tea12-count16.9 fl oz BottlesTotal Net Volume: 202.8 fl oz", "Due to the perishable nature of this item, orders do not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm PST on Tuesday will not ship until the following Monday.   Pressed is on a mission to make high nutrition a realistic option for all. Our cold-pressed juices are made with all-natural fruits and vegetables - no preservatives and no added sugars.   How to cleanse - Although everyone is different and needs to listen to their body as they cleanse, Pressed\u2019s juice plan recommends drinking 1 juice every 2 hours in the following recommended order: Greens with Ginger, Orange Turmeric, Roots with Ginger, Greens with Ginger, Sweet Citrus, Avocado Greens Smoothies. Drink the first one when you wake up in the morning, and try to drink the last one two hours before sleeping. Add one Wellness shot and one Vitality shot at any point of the day to boost your cleanse. Juice cleansing is intended to replace solid meals, though again everyone is different and should consume food, water and juice as they need. Be prepared for changes in your digestion and even sleep rhythms as your body adjusts to the cleanse, and make sure you stay hydrated with water throughout, as you might find shifting energy levels and mood in your first juice cleanse.   Green with Ginger - Made from the freshest, highest-quality green vegetables we can find, our green juice is a simple and easy addition to a healthy lifestyle. Leafy green vegetables are known for their antioxidants, phytonutrients, as well as enhancing oxygen transport and serving as a natural source of energy. Our green juice is perfectly blended, so you never have to compromise taste for nutrition.   Orange Turmeric - Orange Turmeric is a blend of orange, apple aloe vera, turmeric, lemon, and black pepper. Our Orange Turmeric elevates everyday OJ with a vibrant blend of orange juice, black pepper, and turmeric from Fiji.   Roots with Ginger - We've blended carrots and beets to create delicious juices for all taste buds-from earthy to sweet! Known for their rich color and sweet flavor, root vegetables contain powerful benefits that promote liver health, fight free radicals, soothe the nervous system, protect your eyesight, and more! Grown deep in the ground, root vegetables absorb high amounts of vitamins and minerals from the soil. They have distinct, earthy flavors and are packed with fiber and complex carbohydrates, which help the body to break down sugar.   Sweet Citrus - Our citrus blend is refreshing, hydrating and crisp. It contains ingredients like lemon and mint that are known to stimulate and alkalize the system, aid in digestion, and provide a pick-me-up when you're feeling down.   Avocado Greens Smoothie - Expertly blended and ready to go, this clean and simple recipe is packed with power greens like spinach, kale, and spirulina, mixed with banana, avocado, and matcha for a creamy-smooth taste.   Wellness Shots"], "data": [421, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Sub Category_stringindexer_transform": {"label": ["0.0 - 35.7", "35.7 - 71.4", "71.4 - 107.1", "107.1 - 142.8", "142.8 - 178.5", "178.5 - 214.2", "214.2 - 249.9", "249.9 - 285.6", "285.6 - 321.3", "321.3 - 357.0"], "data": [178, 36, 36, 35, 36, 36, 35, 36, 36, 36]}, "Price_stringindexer_transform": {"label": ["0.0 - 12.3", "12.3 - 24.6", "24.6 - 36.9", "36.9 - 49.2", "49.2 - 61.5", "61.5 - 73.8", "73.8 - 86.1", "86.1 - 98.4", "98.4 - 110.7", "110.7 - 123.0"], "data": [368, 29, 16, 13, 12, 12, 13, 12, 12, 13]}, "Discount_stringindexer_transform": {"label": ["0.0 - 4.7", "4.7 - 9.4", "9.4 - 14.1", "14.1 - 18.8", "18.8 - 23.5", "23.5 - 28.2", "28.2 - 32.9", "32.9 - 37.6", "37.6 - 42.3", "42.3 - 47.0"], "data": [455, 7, 5, 4, 5, 5, 4, 5, 5, 5]}, "Rating_stringindexer_transform": {"label": ["0.0 - 7.4", "7.4 - 14.8", "14.8 - 22.2", "22.2 - 29.6", "29.6 - 37.0", "37.0 - 44.4", "44.4 - 51.8", "51.8 - 59.2", "59.2 - 66.6", "66.6 - 74.0"], "data": [433, 7, 8, 7, 7, 8, 7, 8, 7, 8]}, "Title_stringindexer_transform": {"label": ["0.0 - 11.4", "11.4 - 22.8", "22.8 - 34.2", "34.2 - 45.6", "45.6 - 57.0", "57.0 - 68.4", "68.4 - 79.8", "79.8 - 91.2", "91.2 - 102.6", "102.6 - 114.0"], "data": [397, 11, 12, 11, 11, 12, 11, 12, 11, 12]}, "Currency_stringindexer_transform": {"label": ["0.0 - 1.1", "1.1 - 2.2", "2.2 - 3.3", "3.3 - 4.4", "4.4 - 5.5", "5.5 - 6.6", "6.6 - 7.7", "7.7 - 8.8", "8.8 - 9.9", "9.9 - 11.0"], "data": [490, 1, 1, 1, 1, 1, 1, 1, 1, 2]}, "Feature_stringindexer_transform": {"label": ["0.0 - 10.1", "10.1 - 20.2", "20.2 - 30.3", "30.3 - 40.4", "40.4 - 50.5", "50.5 - 60.6", "60.6 - 70.7", "70.7 - 80.8", "80.8 - 90.9", "90.9 - 101.0"], "data": [409, 10, 10, 10, 10, 10, 10, 10, 10, 11]}, "Product Description_stringindexer_transform": {"label": ["0.0 - 7.7", "7.7 - 15.4", "15.4 - 23.1", "23.1 - 30.8", "30.8 - 38.5", "38.5 - 46.2", "46.2 - 53.9", "53.9 - 61.6", "61.6 - 69.3", "69.3 - 77.0"], "data": [430, 8, 8, 7, 8, 8, 7, 8, 8, 8]}}}, "ManualFE": {"FE": [{"transformationsData": [{"feature_label": "Sub Category", "transformation_label": "String Indexer"}], "feature": "Sub Category", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "0 sugar", "max": "\u200bCaffeine free", "missing": "0", "distinct": "358"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Sub Category"}, {"transformationsData": [{"feature_label": "Price", "transformation_label": "String Indexer"}], "feature": "Price", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "192", "mean": "", "stddev": "", "min": " \"\"Happy Birthday\"\" is written in swirls of pastel colors and is playful enough to get any party started. Simple to serve", "max": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "missing": "308", "distinct": "124"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Price"}, {"transformationsData": [{"feature_label": "Discount", "transformation_label": "String Indexer"}], "feature": "Discount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "148", "mean": "", "stddev": "", "min": " 10-Strawberry Watermelon (0.32 oz)", "max": "This item is not returnable.", "missing": "352", "distinct": "48"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Discount"}, {"transformationsData": [{"feature_label": "Rating", "transformation_label": "String Indexer"}], "feature": "Rating", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "83", "mean": "", "stddev": "", "min": " 1 Triple chocolateTrans fat freeContains PecansKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachMade in the USAImportant Handling Instructions:If not being consumed immediately upon arrival", "max": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "missing": "417", "distinct": "75"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Rating"}, {"transformationsData": [{"feature_label": "Title", "transformation_label": "String Indexer"}], "feature": "Title", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "118", "mean": "", "stddev": "", "min": " *Spirulina.   For any questions or concerns regarding your online order", "max": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "missing": "382", "distinct": "115"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Title"}, {"transformationsData": [{"feature_label": "Currency", "transformation_label": "String Indexer"}], "feature": "Currency", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "109", "mean": "", "stddev": "", "min": " 2- pack \"", "max": "$", "missing": "391", "distinct": "12"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Currency"}, {"transformationsData": [{"feature_label": "Feature", "transformation_label": "String Indexer"}], "feature": "Feature", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "105", "mean": "", "stddev": "", "min": " Vermont and Maine.   100% spring water", "max": "Zero Calories   Zero Sweeteners", "missing": "395", "distinct": "102"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Feature"}, {"transformationsData": [{"feature_label": "Product Description", "transformation_label": "String Indexer"}], "feature": "Product Description", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "80", "mean": "", "stddev": "", "min": " 2-count", "max": "Zero sugar", "missing": "420", "distinct": "78"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Product Description"}, {"feature": "Sub Category_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "128.93", "stddev": "117.83", "min": "0.0", "max": "357.0", "missing": "0"}, "updatedLabel": "Sub Category_stringindexe..."}, {"feature": "Price_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "16.58", "stddev": "31.68", "min": "0.0", "max": "123.0", "missing": "0"}, "updatedLabel": "Price_stringindexer_trans..."}, {"feature": "Discount_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "2.5", "stddev": "8.11", "min": "0.0", "max": "47.0", "missing": "0"}, "updatedLabel": "Discount_stringindexer_tr..."}, {"feature": "Rating_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "5.58", "stddev": "15.65", "min": "0.0", "max": "74.0", "missing": "0"}, "updatedLabel": "Rating_stringindexer_tran..."}, {"feature": "Title_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "13.12", "stddev": "28.81", "min": "0.0", "max": "114.0", "missing": "0"}, "updatedLabel": "Title_stringindexer_trans..."}, {"feature": "Currency_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "0.13", "stddev": "1.0", "min": "0.0", "max": "11.0", "missing": "0"}, "updatedLabel": "Currency_stringindexer_tr..."}, {"feature": "Feature_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "10.31", "stddev": "24.33", "min": "0.0", "max": "101.0", "missing": "0"}, "updatedLabel": "Feature_stringindexer_tra..."}, {"feature": "Product Description_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "6.01", "stddev": "16.57", "min": "0.0", "max": "77.0", "missing": "0"}, "updatedLabel": "Product Description_strin..."}], "message": "Successfully executed", "status": 1, "userid": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "autoFE_flag": true, "stageId": "665a814e3dfe9400ae3e1814", "FESamplePath": "/FileStore/platform/sampleData/665a814e3dfe9400ae3e1814_AutoFE/part-00000-f5482577-318c-4299-94df-2cfd3e957121-c000.csv", "manualfesamplepath": "/FileStore/platform/sampleData/665a814e3dfe9400ae3e1814_AutoFE/part-00000-f5482577-318c-4299-94df-2cfd3e957121-c000.csv", "samplecount": 500, "originalcount": 7420, "dataPercentage": "10", "FEGraph": [{"values": {"label": ["Bakery & Desserts", "Certified Kosher OU-D", "14 Servings\"", "Cake Filling: Cream Cheese Frosting", "Cake Frosting: Cream Cheese Frosting", "Topped with Pink Silk Cherry Blossom Flowers (cherry blossom flowers are not edible", "Dimensions: 9\u201d diameter", "Serves 16-22", "Each Cake Arrives With It\u2019s Own Cake Care Card", "Allergens: Contains Wheat", "Ships Frozen\"", "Individually wrapped", "Made in and Imported from France", "Free-range eggs", "Non-GMO ingredients\"", "32 oz 2-Pack", "No Preservatives", "Contains Nuts\"", "Serves 14\"", "Strawberry Cheesecake", "Mango Cheesecake", "Kosher OU-D certified\"", "Baked in", "Non-GMO", "French traditional style Butter Cookies accented with sea salt", "Large round and crispy cookies stamped with the mark of St Michel\u2019s heritage\"", "No Sugar Added", "Kosher OU-Dairy\"", "12 Chocoloate Chunk Cookies", "Kosher Dairy OUD\"", "Cake Filling: Chocolate Ganache and Mousse Malted Cream", "Cake Frosting: Fudge Frosting topped with Fleur de Sel", "Kosher OU-D certified", "Serves approximately 12 people", "Weight: 7 lbs.", "Ships in Cooler with Dry Ice to Maintain Quality & Freshness\"", "Perfect for celebrating any happy or festive occasion -for kids and adults alike!   Features:   1 - 10 in Rainbow Cake", "Diameter: 10\"\" each", "Ships in Cooler with Dry Ice to Maintain Quality & Freshness", "Made in the USA   Some of our products may contain nuts. Our facility is NOT a nut-free facility", "If not being consumed immediately upon arrival", "Cake Filling: Raspberry Jam with Lemon Curd", "Cake Frosting: Lemon Buttercream", "Bottom Tier: 9\u201d Diameter", "Top Tier: 7\u201d Diameter", "Bake and Serve", "No Added Preservatives", "Kosher\"", "Fudgy Filling and Ganache Frosting", "Serves 16\"", "Decedent cake is simply irresistible. Chocolate cake with Hand decorated", "No added preservatives", "Fudgy filling and ganache frosting   This cake serves. (Approximately) 16 people", "Weight: 3.75 lbs..", "OU-D certified", "1 Turtle Style", "1 Triple Chocolate", "Kosher OU-D Certified", "Serves 28\"", "Layers of Ladyfingers Soaked in Coffee Syrup", "Filled with Vanilla Mascarpone Cheese Mousse\"", "Almond Flavored Cake with Pixie Fetti\u00ae Confetti", "Cake Filling: Almond Flavored Buttercream", "Cake Frosting: Almond Flavored Buttercream", "Devil\u2019s Food Cake", "Dark Chocolate Mousse Topped with Dark Chocolate Ganache\"", "PRODUCEDIN AFACILITYWHERENUTS", "We take the extra step of baking two", "Each Cake services 10-12 people", "Classic Flavors of Espresso and Mascarpone\"", "Almond Joconde Cake With Lemon Syrup", "Layered with White Chocolate Mousse & Lemon Curd\"", "2.2 lb Tin\"", "8 Jumbo Reese\u2019s Peanut Butter Cup Cookies", "7 Types of Cookies\"", "A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather", "Includes:   Rainbow Tricolori Cookies", "Fudge-swirled Cookies", "Pignoli Cookies", "Coconut Cookies", "Plan Sandwich Cookies", "Half Moon Cookies", "Torrincino Cookies   PRODUCED IN A FACILITY WHERE NUTS", "24 Mini Plain Filled Cannoli", "24 Mini Hand Dipped Belgian Chocolate Cannoli", "Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness", "Chocolate Cannoli: After thawing should be eaten within 48 hours", "Frozen: Can be stored up to one year   PRODUCED IN A FACILITY WHERE NUTS", "Frozen: Can be stored up to a year\"", "Variety of 4 Mary Macleod's Shortbread Handcrafted", "Multipack of 3 Tins of Shortbread Cookies.", "CONTAINS: Seventy-Two (72) TOTAL all-butter shortbread cookies in 4 flavors. Each tin has Twenty-Four (24) Variety Shortbread Cookies [3 tins total", "Each premium tin comes with four different flavors of our delectable shortbread cookies", "Struffoli Honey Balls\"", "Some of our products may contain nuts. Our facility is NOT a nut-free facility", "Important Handling Instructions:", "This product contains nuts.", "One taste and you\u2019ll see why our Huge Apple Pie has been delighting customers across the country for over 35 years!", "Beverages & Water", "Add a wellness shot to your juice or smoothie for an extra boost of nutrients", "Pair a shot with your favorite healthy snack for a delicious treat", "Take a wellness shot before your workout to energize your body   100% Organic Ingredients:   Ginger: Organic Apple", "Turmeric: Organic Pineapple", "Elderberry: Organic Apple", "Wheatgrass: Organic Pineapple", "Variety pack: 10-Ice Pop (0.35 oz)", "25 calories per bottle", "250 mg BCAA", "10% coconut water", "The ultimate recovery support", "Drink in rapid replenishment and intensely refreshing flavors", "30-Count\"", "\u200bCaffeine free", "250mg BCAAs", "B vitamins", "Antioxidants", "835mg electrolytes\"", "200mg caffeine\"", "5g sugar or less", "Immunity sidekick\"", "Zero Calories", "No Artificial Color or Flavors", "Minerals Added for a Pure Refreshing Taste\"", "32 oz. container", "30 calories per serving", "Free of dairy", "Net Weight 192 oz.\"", "Non-Dairy Beverage", "Made with California Almonds", "12-count", "1 qt Cartons", "Net Weight: 3 Gal\"", "8.25 oz. Chocolate Milks", "37% Less Fat than Whole Milk", "With Vitamins A & D", "UHT Pasteurized\"", "11 fl oz cans", "Total Volume 3.9 L\"", "0 sweeteners", "Water infused with fruit essences & other natural flavors\"", "SIMPLE PLANT-BASED INGREDIENTS: Califia Farms Caf\u00e9 Almond Milks are made with plant-based", "BLENDS SMOOTHLY INTO COFFEE: This plant-based non-dairy Caf\u00e9 Almond Milk blends beautifully into both hot and iced coffee", "BARISTA'S CHOICE DAIRY-FREE MILK: Califia Farms Caf\u00e9 Almond Milks are favored by professional baristas across the country for their ability to froth", "Refrigerate after opening\"", "Exclusive 3-day Juice Cleanse \u2013 organic cold pressed juices and elixirs used to detoxify your body and help you feel great! For best results", "3 Spicy Lemon", "3 Red Monster", "3Turbo", "3 Rinse + Rebeet   6 (2.4 oz.) Elixir Shots   3 Ginger", "3 Turmeric   Cold pressed", "Rich in vitamins and minerals", "Certified Organic", "Certified Kosher", "No heat pasteurization", "No preservatives", "No added sugar", "No additives (colors", "Vegan", "Gluten Free", "Product of Canada   Expiration Codes   January - JA", "February - FE", "March: - MR", "Aprill - AL", "May - MA", "June - JN", "July - JL", "August: - AU", "September - SE", "October: - OC", "November - NO", "December - DE   Instructions;   Refrigerate upon delivery", "Juices should be sealed and cool to the touch", "Organize according to provided cleanse guide", "Consume recommended juices 2 to 2.5 hours apart", "Drink water or organic herbal tea between each juice", "Avoid eating for best results", "If needed", "A perfect complement to any meal or occasion", "Made from recycled plastic bottles (excludes cap and label)\"", "Purified water", "Enhanced with minerals for a crisp taste\"", "Soft", "Natural electrolytes from tropical rain filtered through volcanic rock", "Bottled from a natural artesian aquifer in the remote Fiji Islands\"", "15.2 fl oz bottle\"", "Variety pack: 6-Root Beer", "Delicious", "2-5g sugar", "9g fiber", "Prebiotics", "No artificial sweeteners", "Gluten-free", "Paleo-Friendly", "Keto-Friendly", "Non-GMO Project Verified\"", "Dairy Free", "Soy Free", "6-count", "32 oz Cartons\"", "0g Calories", "Naturally Caffeinated (sourced from green tea)", "Plant-based ingredients", "3 flavors: Peach-Mango", "12 hour cold brewed", "Recyclable package", "No sugar added\"", "33.8 fl oz (1 Liter) carton", "9-count\"", "12 fl. oz. cans", "288 fl. oz. Total weight", "VARIETY PACK: Variety Multi-Pack of 24 cans measuring 12 oz each. Includes 12 Lime", "HEALTHIER: Unlike sports drinks", "GUILT FREE: Drink with zero worries! LaCroix contains 0 calories", "REFRESHING: LaCroix is a wholesome", "FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!\"", "Zero Sugar", "Zero Calories\"", "Zero calories", "Natural mineral water with natural CO2 added", "3 x 8-packs\"", "Real Horizon Milk on the GO", "8 g Protein per Serving", "18-count", "8 fl oz containers\"", "Natural minerals & electrolytes", "Sparkling water straight from the Alps\"", "Decadent Dark Chocolate Tasting Notes\"", "Premium Green Tea and Japanese Matcha", "Infused with Moringa", "Enhanced with B Vitamins and Plant-Based D3", "Prebiotic Fiber to Promote a Healthy Gut\"", "VitaCup Green Tea Instant Sticks are ideal for any tea drinker", "Premium Green Tea Leaves & Matcha Powder", "Nutrient-Dense Moringa Oleifera", "Vitamins B5", "Inulin Healthy Prebiotic Fiber", "Natural Antioxidants", "Dietitian Formulated", "12 fl. oz. can   Evaporated Milk\"", "Sugar", "Japanese Origin - Our premier non-GMO matcha comes from the lush volcanic regions of Kyoto and Kagoshima in Japan.   About Sencha Naturals   Welcome to our Sencha Naturals family! With a mission of \u201cGreen Tea for All", "Clean Ingredients - We are committed to providing products that are Non-GMO", "GMP Certified Facility - Based in Southern California", "Made with ingredients from natural origin Italian fruits\"", "20g rolled oats in every serving", "32 oz carton\"", "Net Weight 144 fl oz\"", "11.1 fl oz.\"", "11.1 fl oz (330 mL) carton", "12 ct", "Total 3.96 L\"", "6 - Tropical Vibe (starfruit pineapple)", "6 - Arctic Vibe (frozen berry)", "0 sugar", "Gluten free", "Kosher", "Non GMO", "Certified vegan\"", "Vegan\"", "The Original", "16.9 fl oz (500 mL) carton", "12-count   More Information:   100% Juice", "Never from concentrate", "Hydrate Naturally", "Full of Electrolytes and Nutrients", "Coconuts Hand-picked From Small Family Farms\"", "Honey Citron & Ginger Tea", "No Artificial Preservatives", "No Artificial Flavors or Colors\"", "312 Bags Total", "Served Hot or Iced", "Rainforest Alliance Certified", "Grape Flavor", "Sugar free", "1.93 fl oz Bottle", "24 Count\"", "20mg sodium", "26g total sugar\"", "Bottle Fee will apply to shipments going to California", "2 - 2.5 gallon jugs per case", "48 cases", "96 total jugs", "240 total gallons of water   Click here to view PDF of Regional Waters by State   State", "Regional Water Brand   AL", "Deer Park   AR", "Ozarka   AZ", "Arrowhead   CA", "Arrowhead   CO", "Arrowhead   CT", "Poland Spring   DC", "Deer Park   DE", "Deer Park   FL", "Zephyrhills   GA", "Deer Park   IA", "Ice Mountain   ID", "Arrowhead   IL", "Ice Mountain   IN", "Ice Mountain   KS", "Arrowhead   KY", "Ice Mountain   LA", "Ozarka   MA", "Poland Spring   MD", "Deer Park   ME", "Poland Spring   Ml", "Ice Mountain   MN", "Ice Mountain   MO", "Ice Mountain   MS", "Ozarka   MT", "Arrowhead   NC", "Deer Park   ND", "Ice Mountain   NE", "Ice Mountain   NH", "Poland Spring   NJ", "Poland Spring   NM", "Arrowhead   NV", "Arrowhead   NY", "Poland Spring   OH", "Ice Mountain   OK", "Ozarka   OR", "Arrowhead   PA", "Deer Park   RI", "Poland Spring   sc", "Deer Park   SD", "Ice Mountain   TN", "Deer Park   TX", "Ozarka   UT", "Arrowhead   VA", "Deer Park   VT", "Poland Spring   WA", "Arrowhead   Wl", "Ice Mountain   WV", "Deer Park   WY", "Arrowhead\"", "180-bags\"", "1-Chai Spice Black Tea", "1-Chamomile Herbal Tea (Caffeine Free)", "1-Earl Grey Black Tea", "1-English Breakfast Black Tea", "1-Peppermint Herbal Tea (Caffeine Free)", "1-Premium Green Tea\"", "32 fl oz cartons", "3 count", "Net Weight: 3 qt\"", "Roots - We've blended carrots and beets to create delicious juices for all taste buds-from earthy to sweet! Known for their rich color and sweet flavor", "Citrus Juices - Our citrus blend is refreshing", "Green Juices - Made from the freshest", "Shots - Our shots pack a powerful punch of fresh pressed ingredients that you can feel working! Throw one back for a quick pick-me-up or pour over your favorite juice for an extra boost of flavor.   Cold pressed juice and shots", "All natural fruits and vegetables", "No sugars added", "High-pressured processed (HPP)", "Individually labeled", "Keep refrigerated", "Includes 3 greens with ginger", "No artificial flavors", "No artificial sweeteners\"", "These shots are lemony with a powerful kick from ginger and cayenne. Ginger's spicy goodness contains anti-inflammatory properties that help with circulation", "These shots are milder than the wellness shots", "3 Orange Turmeric"], "data": [33, 4, 1, 1, 1, 1, 3, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 5, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 66, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Sub Category", "count": 358, "min": "0 sugar", "max": "\u200bCaffeine free"}, {"values": {"label": ["$56.99 ", "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "A cake the dessert epicure will die for!Our Top Selling Cake! Fudge brownie base, layered in velvety smooth peanut butter mousse, rich chocolate cake, topped with brownie chunks, handful of peanut butter chips, drizzled in fudge. This cake is the thoughtful gift idea that\u2019s perfect for family, friends, coworkers, or to anyone you care about in your life. -\tGenerously sized precut slices, a cake lover\u2019s dreams come true! Includes:Measures 10\u201d diameterWeighs in at 6.8 lbs.14 servings OU-D certified, the most trusted kosher certification in the U.S.All natural with no added preservativesSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "$159.99 ", " please do not consume", " 7\u201d high", " Milk", "$44.99 ", "Moist and buttery sponge cakes with the traditional European madeleine flavor of almond. The Classic Madeleine is baked in the shape of seashell with ridges on one side and a \u201cbelly\u201d on the other. Each madeleine is individually-wrapped for portion control and convenience.The Origin of the Madeleine: 18th century King Stanislas 1st, Duke of Lorraine During a festive dinner party in Commercy, France, the king\u2019s chef abruptly left the kitchen. Seeking a solution to feed his guests dessert, a servant girl in the kitchen offered to make her family\u2019s traditional pastry. The king enjoyed the little cake so much that he named it after the servant: Madeleine. Baked with non-GMO ingredients and free-range eggs. No preservatives, palm oil, hydrogenated oil or colorings. Baked with love in France.We all have our Madeleine moment:Enjoy everyday for breakfast, snack or dessert (Just as the French do!)Pack in lunches or backpacks for schoolServe during business, book club or PTA meetingsCut in half and fill with jelly or chocolate hazelnut spreadDecorate cakes or cupcakes with classic seashell shapeIncludes:100 countIndividually wrappedFree-range eggsNon-GMO ingredients", "$39.99 ", "These delectable butter pecan meltaways are the perfect snack or dessert for the whole family. The treats are made with pure creamy butter and large pecan chunks and have just the right amount of powdered sugar to satisfy your sweet tooth.Includes:Includes: 2 Tins (32 oz. each)Contains nutsNo preservativesEnjoy with your morning coffee or teaCookies can be stored at room temperature for up to 60 daysEach tin contains approximately 64 cookiesKosher OU-DSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "$59.99 ", "A cake the dessert epicure will die for!To the ultimate chocolate lover - We've baked your dream cake! Four split layers of our rich chocolate cake, filled with a smooth milk chocolate mousse, finished in chocolate ganache & covered in dark chocolate bark pieces. This cake is the thoughtful gift idea that\u2019s perfect for family, friends, coworkers, or to anyone you care about in your life. Generously sized precut slices, A cake lover\u2019s dreams come true! Includes:1 - 10\u201d Premier Chocolate Overload CakeWeighs in at 7.2 lbs.14 Servings OU-D certified, the most trusted kosher certification in the U.S.All natural with no added preservativesSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "\"Strawberry Cheesecake: There's only one way to make our cheesecakes taste even better - add fruit! We've topped off our plain New York cheesecake with a generous helping of strawberry preserves for a taste that's to die for. Each slice is packed with loads of creamy filling, graham crust and sweet strawberries.Mango Cheesecake: We've done it again with our Mango Cheesecake. It's a 10\"\" cake with swirls of mango on top of a creamy cheesecake and delicious crust. This mix of cream cheese", "$74.99 ", " and Imported from", " No Trans Fat", "Creamy Dreamy:This smooth creamy cheesecake has no sugar added and no flour. It\u2019s hard to believe we\u2019ve taken that out, and what remains is a light luscious dessert with no unpleasant aftertaste.Marble Truffle:A layer of our rich, delicious, flourless, no-sugar-added (NSA) chocolate truffle cake is topped with a layer of our wonderful no-sugar-added cheesecake, then swirled with a bit of chocolate on top. The combination results in a flourless cake that is the perfect blend of rich sinful chocolate balanced with cool creamy cheesecake. Perfect for chocolate lovers as well as cheesecake lovers.Includes:1 - Creamy Dreamy Cheesecake 1- Marble Truffle CheesecakeEach Cheesecake serves approximately 14 people28 slices totalWeight: Approximately 3 lbs. 5 oz. EachShips in Cooler with Dry Ice to Maintain Quality & FreshnessMade in the USAKosher OU-DairySome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: If not being consumed immediately upon arrival, cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.", "$29.99 ", "Due to the perishable nature of this product orders will only ship on Monday and Tuesday for Thursday and Friday delivery. Orders will not ship over the weekend. Orders placed after 9 am PST on Tuesday will not ship until the following Monday.David\u2019s Cookies has perfected the art of the chocolate chunk cookie by using only the best ingredients. Our recipe calls for fresh eggs, milk, velvety butter, and loads of big Chocolate chunks to create the most irresistible cookies on this planet.Chocolate Chunk:Approximately 12 cookies/servingsKosher Dairy OUDCan be frozen for up to 6 months Brownie Tray:Fudgy chocolate brownie made with pure melted chocolate. Filled with walnuts, chocolate chips, peanut butter chips and topped with chocolate ganache drizzle. Approximately 6 servingsKosher Dairy OUDCan be frozen for up to 6 monthsSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "$62.99 ", "A cake the dessert epicure will die for! Five bright and colorful layers of this delightful cake are perfect for celebrating any happy or festive occasion! We\u2019ve decorated this dessert with a lightly flavored vanilla icing to keep this colorful surprise a secret until you cut the first slice.", " and as a result it is possible that any product may have come in contact with nut or nut oils   Important Handling Instructions:", " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.\"", "$299.99 ", " 3 1/2\u201d High", "$54.99 ", "There is nothing like eating a warm just baked cookie right from your own oven. Featuring David\u2019s Cookies world famous Preformed Gourmet Chocolate Chunk Cookie Dough made with pure, fresh ingredients like milk, flour, sugar, eggs and butter. Our preformed Chocolate Chunk cookie dough makes baking cookies fun and easier than ever. It's a simple One-Step process: put the sheet in the oven, bake and you're done! Features:Includes 90 Pieces of 1.5 oz Preformed Gourmet Chocolate Chunk Frozen Cookie DoughApprox. 8.5 pounds of cookie doughNo Added PreservativesBake and ServeShips in Cooler with Dry Ice to Maintain Quality & FreshnessKosher OU-D CertifiedSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils.Important Handling Instructions: Freeze for up to six months in a freezer safe container.Baking Instructions: Preheat oven to 350\uf0b0 degrees F. (Keep dough frozen until ready to use). Place cookies on ungreased baking sheet at least 3\u201d apart. Bake until slightly golden brown, approximately 12-14 minutes. Let Cool.", "\"It's not just the birthday girl or boy that will be smiling when they enjoy David's Cookies 10\"\" Chocolate Birthday Cake. From the moist dark chocolate with a fudgy filling to the candy confetti", " \"\"Happy Birthday\"\" is written in swirls of pastel colors and is playful enough to get any party started. Simple to serve", " the most respected kosher certification", " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 1 week.\"", "$89.99 ", " Chocolate", "\"We've done it again with our Turtle Cheesecake made from a recipe straight out of Brooklyn. It's a 10\"\" cake with clumps of chewy pecans drenched in a coating of caramel on top of a creamy cheesecake. This mix of cream cheese", "$49.99 ", "$99.99 ", "MILK", " three and sometimes four times a day", "$24.99 ", "Due to the perishable nature of this product orders will only ship on Monday and Tuesday for Thursday and Friday delivery. Orders will not ship over the weekend. Orders placed after 9 am PST on Tuesday will not ship until the following Monday. Whoever said that bigger isn't always better never tasted fresh baked giant cookies from David's Cookies. These lusciously JUMBO cookies, made with no added preservatives, reign supreme and comes in 4.5 oz fabulous, flavorsome, fresh baked giant cookies.Triple Chocolate:Decadent to say the least! This cookie is made from David\u2019s famous chocolate chunk cookie dough, generously topped with HERSHEY\u2019S\u00ae MINI KISSES, semi-sweet chocolate chunks & milk chocolate chunks!\tPeanut Butter:Peanut butter lovers unite! Peanut butter cookie dough is loaded with peanut butter chips and topped with chunks of REESE\u2019S\u00ae Peanut Butter Cups.Includes:2-pack Includes: 2 tins of 4 decadent 4.5oz Triple Chocolate Cookies and 4 decadent 4.5oz Peanut Butter Cookies per tinKosher OU-D certified16 Jumbo decadent 4.5oz cookies totalWeight: Approximately 4.5oz each cookieMade in the USASome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: Consume within 48 hours of receipt or freeze for up to six months in a freezer safe container.", "$72.99 ", "Ferrara\u2019s delicate & buttery cookies are the perfect companion with a cup of coffee. Using secret Old World recipes that are over 100 years old, Ferrara bakes perfect rainbow (tricolori), pignoli (almond-flavored cookies studded with pine nuts), fudge-swirled cookies & more.", " Enrico Scoppa and our great grand-uncle", " MILK", "$119.99 ", "$109.99 ", " Premium All-Butter Shortbread Cookies | Flavors: Classic", " 72 cookies total]", " each one baked to perfection using only the finest ingredients.\"", "$34.99 ", "Ferrara's Bakery of LIttle Italy in New York CityFerrara\u2019s delicate & buttery cookies are the perfect companion with a cup of coffee. Using secret Old World recipes that are over 100 years old, Ferrara bakes perfect rainbow (tricolori), pignoli (almond-flavored cookies studded with pine nuts), fudge-swirled cookies & more.Struffoli also known as Honey Balls is a Neapolitan dish made of deep fried balls of sweet dough. Crunchy on the outside and light inside, struffoli are mixed with honey and other sweet ingredients and formed into mounds or rings. They are often served for holidays and are sometimes served warm. Best stored at room temperature.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties. We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family-owned business operated by the fifth generation. That\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little.Includes:2 lb Assorted Italian Cookie Tray16 oz. Struffoli Honey BallsPRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENT", " and as a result it is possible that any product may have come in contact with nut or nut oils.", " your pie should be placed in the freezer. The pie will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 7 days. The pie is fully baked and can be enjoyed chilled or at room temperature. Thaw the pie in the fridge for about 4 hours (or on your kitchen counter for around 2 hours).\"", " your pie should be placed in the freezer. The pie will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 7 days. The pie is fully baked", " Organic Lemon", "$27.99 ", " 10-Blue Raspberry (0.34 oz)", "$21.99 ", "$20.99 ", "$19.99 ", "$439.99 ", "*Business Members please click on Business Delivery tab above to see if local delivery is available in your area.The item may also be available at your local warehouse at a lower non-delivered price.Bottle Fee will apply to shipments going to California, Connecticut, Delaware, Michigan, New York, Oregon, Vermont and Maine. Kirkland Signature bottled water\u2019s pure, fresh taste, high quality and value makes staying refreshed and hydrated easy! Our water is bottled with state-of-the-art purification, filtration and reverse osmosis technologies with the highest quality certifications in the industry. Kirkland Signature bottled water is the perfect solution for your on-the-go lifestyle!Product description:Proprietary mineral blend added to create Kirkland Signature\u2019s pure taste.Bottled using state-of-the-art purification, filtration and reverse osmosis technologies with each bottle undergoing automated digital imaging inspection.Utilization of food grade recycled PET (rPET) where feasible. Our bottle and cap are recyclable. Please use store drop off locations to recycle the printed filmFeatures:Perfect size for an on-the-go lifestyle, school lunches, sports, events and entertaining.Zero calories, no sweeteners and no artificial colors or flavors.Bottled using the highest quality standards in the industry.Minerals added for a pure, refreshing taste.16.9 oz/0.5L plastic (PET & rPET) bottles o\tVirgin and Recycled Polyethylene Terephthalate (PET & rPET) are BPA free.40 bottles per case48 cases per pallet", "$9.99 ", " lactose", "$14.99 ", "$18.99 ", "$21.49 ", "$17.99 ", " dairy-free ingredients that are Non-GMO Certified", " for a smooth and creamy cup of coffee every time.", " steam", " consume only with water and your choice of organic herbal tea.   15 (12 oz.) Cold Pressed Juices   3Hulk", " flavors)", " consume organic fruits and vegetables moderately   For any questions or concerns regarding your online order", "$23.99 ", "$4.99 ", " smooth taste", " 6-Vintage Cola", " refreshing", " plant fiber", " flavors", "$12.99 ", "$32.99 ", " Frose-Rose and Grape\"", "$13.79 ", " 6 Lemon", " vitamin enhanced waters", " 0 sweeteners", " refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym", "$23.49 ", "2-pack (two 1.87 lb cocoa tins) Each 1.87 lb. tin makes 42 servings of hot cocoaMade with ethically sourced cocoa powderStarbucks is committed to purchasing cocoa that\u2019s grown and traded in an ethical and transparent way Made with cane sugarJust add 1-cup hot milk KosherIngredients: cane sugar, cocoa (processed with alkali), vanilla powder", " Minerals", "Start your morning with a burst of energy and focus from our delicious Green Tea Instant Sticks. Sip on a smooth, satisfying green tea infusion made with traditional Japanese matcha powder, plus an infusion of moringa and essential vitamins. Each packet contains a balanced combination of nutrients, amino acids, and prebiotic fiber.", " especially the wellness warrior on-the-go! Pour one packet with 8 ounces of hot or cold water and stir until completely dissolved (about 10 seconds). You\u2019ll love the energy and detox benefts from a powerhouse blend of antioxidants and natural caffeine.   2-pack (48-counttotal)", " B6", " No Artificial Ingredients", " Supports Energy & Mood", " Sugar-Free", "$22.99 ", " Gluten", " Gluten-Free and Veganwhen possible.", " all of our products are packaged in our own cGMP certified facility for highest quality control", "$8.99 ", "$15.99 ", "$28.99 ", "Pure Coconut Water", "Contains premium honey, citron slices, and ginger, which are harmoniously mixed togetherVonbee Honey Citron & Ginger Tea4.4 lb 2-countTeaJamSalad Dressing & More", "Original Lipton Tea Bags104 bags per box3 boxes 312 bags totalServed hot or icedRainforest Alliance CertifiedKosher", "$16.49 ", "$549.99 ", " Connecticut", "$17.49 ", "Variety pack:", "$25.99 ", "$11.69 ", "$69.99 ", " root vegetables contain powerful benefits that promote liver health", " hydrating and crisp. It contains ingredients like lemon and mint that are known to stimulate and alkalize the system", " highest-quality green vegetables we can find", " 3 spicy roots", "$21.79 ", " aid in digestion by soothing the stomach and support glowing skin and circulation.   Vitality Shots", " sweet and spicy with an earthy aftertaste. Turmeric takes the spotlight here containing a compound called curcumin. Benefit from the anti-inflammatory and antioxidant properties of curcumin to relieve joint pain and muscle aches.   24 Bottles - 18 Juices (12 oz)"], "data": [1, 309, 1, 3, 1, 3, 4, 1, 1, 4, 1, 7, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 3, 1, 1, 1, 1, 1, 7, 1, 1, 2, 4, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 2, 2, 1, 4, 2, 1, 7, 1, 5, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 4, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Price", "count": 124, "min": " \"\"Happy Birthday\"\" is written in swirls of pastel colors and is playful enough to get any party started. Simple to serve", "max": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation"}, {"values": {"label": ["No Discount", "This item is not returnable.", " remove before eating)", " Soy", " and mango will take you on a tropical journey of satisfaction!Includes:2-pack Includes: 1 Strawberry Cheesecake and 1 Mango CheesecakeKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachShips in Cooler with Dry Ice to Maintain Quality & FreshnessMade in the USASome of our products may contain nuts. Our facility is NOT a nut-free facility", " France", " No Hydrogenated Oil   Palm Oil Free\"", " it's sugary heaven from top to bottom! Moist and rich", " your cake is ready to eat once thawed. Includes plates", " Caramel", " nuts and caramel is a true taste excursion. For our Triple Chocolate Cheesecake we\u2019ve melted milk chocolate on top of a creamy chocolate cheesecake center and set the whole confection on top of a layer of Devil\u2019s food cake. This exquisite dessert is the perfect choice for any gourmet chocolate lover.Features:2-pack Includes: 1 Chocolate Carmel Pecan", "EGGS", " in small batches. Because of the frequency with which we bake", " Antonio Ferrara", " EGGS", " Chocolate Crunch", " and can be enjoyed chilled", "After $30 OFF", " Organic Ginger", " Organic Turmeric", " 10-Strawberry Watermelon (0.32 oz)", "After $5 OFF", " soy", " Kosher", " and form latte art.", "After $20 OFF", " please reach out to Pulp and Press directly at support@pulpandpress.com or by phone at (866)-208-9319. A representative will be in touch with you within 24 hours.\"", " 6-Classic Grape", " and actually good for you", " and botanicals to support digestive health", " or preservatives", " and 6 Grapefruit. Perfect for the fridge", " and sodas", " and 0 sodium. Our sparkling water is vegan", " in the office or on the go!", " and Antioxidants", " B1", " Soy-Free", " Dairy-Free - Matcha is naturally free of gluten", " we believe in transparency and accountability", " food safety", " Delaware", "After $4.50 OFF", " fight free radicals", " aid in digestion", " our green juice is a simple and easy addition to a healthy lifestyle. Leafy green vegetables are known for their antioxidants", " 3 sweet citrus", " 6 Shots (2 oz)   6 Greens with Ginger"], "data": [91, 353, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Discount", "count": 48, "min": " 10-Strawberry Watermelon (0.32 oz)", "max": "This item is not returnable."}, {"values": {"label": ["Rated 4.3 out of 5 stars based on 265 reviews.", "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Rated 5 out of 5 stars based on 1 reviews.", " Egg", "Rated 4.1 out of 5 stars based on 441 reviews.", "Rated 4.7 out of 5 stars based on 9459 reviews.", "Rated 4.5 out of 5 stars based on 758 reviews.", "Rated 4.4 out of 5 stars based on 369 reviews.", " and as a result it is possible that any product may have come in contact with nut or nut oilsImportant Handling Instructions: If not being consumed immediately upon arrival", "Rated 4.7 out of 5 stars based on 2241 reviews.", "Once upon a time in the French coastal town of St Michel Chef-Chef, a Chef P\u00e2tissier Grellier was making delicious round butter cookies he called Galettes from his secret recipe that he baked with love in his oven. His Galettes were so delicious and popular that one day, his wife Constance had a genius idea: \u201cWhy not sell the cookies to the beachgoers visiting from Paris?\u201d The cookies were a huge hit and the French Galette was born.   This is the St Michel Bakery started in 1905. Since then, this family owned company brings you the very best of French butter cookies and other French pastry delights.   La Grande Galette is inspired from an original recipe from 1905 in the tradition of French Cookie Baking. St Michel French Butter Cookies are made only from selected wholesome ingredients like free-range eggs our specialty Gu\u00e9rande Sea Salt.   No Coloring, no preservatives, no hydrogenated fat and no palm oil guaranteed.   Includes:   6 Pack Total - Each carton holds 1.3LB (600g) per pack   Each carton holds 12 individual Pouches of 3 cookies each for freshness per pack. Total 36 cookies per carton.", "Rated 4.4 out of 5 stars based on 232 reviews.", "Rated 4.4 out of 5 stars based on 1679 reviews.", "Rated 5 out of 5 stars based on 2 reviews.", "Rated 4 out of 5 stars based on 357 reviews.", "Rated 3 out of 5 stars based on 1 reviews.", "Rated 4.7 out of 5 stars based on 273 reviews.", "Rated 4.6 out of 5 stars based on 369 reviews.", " this", " forks", "Rated 4.6 out of 5 stars based on 133 reviews.", "Rated 4.5 out of 5 stars based on 452 reviews.", " Pecan", " 1 Triple chocolateTrans fat freeContains PecansKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachMade in the USAImportant Handling Instructions:If not being consumed immediately upon arrival", "No Reviews", "Rated 4.2 out of 5 stars based on 85 reviews.", "Rated 1.5 out of 5 stars based on 2 reviews.", "Rated 3.6 out of 5 stars based on 5 reviews.", " Ferrara acquired our great reputation for quality and freshness. Today", "Rated 3 out of 5 stars based on 2 reviews.", "Rated 4.7 out of 5 stars based on 687 reviews.", "Rated 4.3 out of 5 stars based on 845 reviews.", "Rated 4.3 out of 5 stars based on 87 reviews.", " opera impresario and showman", " SOY & FLOUR ARE PRESENT\"", "Rated 2.2 out of 5 stars based on 4 reviews.", " SOY & FLOUR ARE PRESENT   24 Mini Plain Filled Cannoli", "Rated 4.2 out of 5 stars based on 181 reviews.", "Rated 4 out of 5 stars based on 16 reviews.", " Dutch Chocolate and Maple Crunch.", "Rated 4.5 out of 5 stars based on 702 reviews.", "Rated 4.2 out of 5 stars based on 137 reviews.", "Rated 3 out of 5 stars based on 5 reviews.", " at room temperature or it can be heated in a 325\u00ba oven for about 1 \u00bd hours. Thaw the pie in the fridge for about 24 hours (or on your kitchen counter for around 5 hours).\"", "Rated 4.5 out of 5 stars based on 28 reviews.", " Organic Turmeric", " Organic Black Pepper.", " Organic Elderberry extract", " Organic Wheatgrass", "Rated 4.3 out of 5 stars based on 1957 reviews.", " vegan", "Rated 4.4 out of 5 stars based on 40 reviews.", "Rated 4.8 out of 5 stars based on 33 reviews.", " 6-Orange Squeeze", " office", " LaCroix is healthy for you; natural sparkling water with 0 calories", " gluten free", "Rated 4.5 out of 5 stars based on 1911 reviews.", "Rated 4 out of 5 stars based on 138 reviews.", " B12", " Dairy-Free", "Rated 4.8 out of 5 stars based on 1150 reviews.", " sugar", " and take the sustainable road less traveled by focusing on people and planet over profits.", " and oversight.   Includes:   3x - 12 oz bags\"", "Rated 4.7 out of 5 stars based on 2340 reviews.", "Rated 3.6 out of 5 stars based on 15 reviews.", " Michigan", "Rated 4.8 out of 5 stars based on 312 reviews.", "Rated 4 out of 5 stars based on 777 reviews.", " soothe the nervous system", " and provide a pick-me-up when you're feeling down.", " phytonutrients", " 3 wellness shots", "Rated 4.1 out of 5 stars based on 753 reviews."], "data": [1, 418, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Rating", "count": 75, "min": " 1 Triple chocolateTrans fat freeContains PecansKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachMade in the USAImportant Handling Instructions:If not being consumed immediately upon arrival", "max": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather"}, {"values": {"label": ["David\u2019s Cookies Mile High Peanut Butter Cake, 6.8 lbs (14 Servings)", "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "\"The Cake Bake Shop 8\"\" Round Carrot Cake (16-22 Servings)\"", "St Michel Madeleine, Classic French Sponge Cake 100 - count", "David's Cookies Butter Pecan Meltaways 32 oz, 2-pack", "David\u2019s Cookies Premier Chocolate Cake, 7.2 lbs (Serves 14)", "David's Cookies Mango & Strawberry Cheesecake 2-count (28 Slices Total)", " cakes should be placed in freezer. Allow two hours for cakes to thaw prior to serving. The dessert will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for at least 2 to 3 days.\"", "La Grande Galette French Butter Cookies, 1.3 lb, 6-pack", "David's Cookies No Sugar Added Cheesecake & Marble Truffle Cake, 2-pack (28 Slices Total)", "David's Cookies Brownie and Cookie Combo Pack", "\"The Cake Bake Shop 8\"\" Round Chocolate Cake (16-22 Servings)\"", "\"David's Cookies 10\"\" Rainbow Cake  (12 Servings)\"", "The Cake Bake Shop 2 Tier Special Occasion Cake (16-22 Servings)", "David's Cookies 90-piece Gourmet Chocolate Chunk Frozen Cookie Dough", "David's Cookies Chocolate Fudge Birthday Cake, 3.75 lbs.  Includes Party Pack (16 Servings)", " napkins", "Ferrara\u2019s Bakery New York Cheesecake 2-pack", "David\u2019s Cookies Variety Cheesecakes, 2-pack (28 Slices Total)", "Classic Cake Tiramisu Quarter Sheet Cake (14 Pre-Cut Total Slices, 4.57 Oz. Per Slice, 4 Lbs. Total Box)", "Mary Macleod's Gluten Free Shortbread Cookies Mixed Assortment 8-Pack ", "\"The Cake Bake Shop 8\"\" Round Pixie Fetti Cake (16-22 Servings)\"", "Classic Cake Chocolate Entremet Quarter Sheet Cake (14 Pre-Cut Total Slices, 4 Oz. Per Slice, 3.5 Lbs. Total Box)", "Ferrara\u2019s Bakery 8 in. Tiramisu Cake, 2-pack", " Enrico Scoppa and our great grand-uncle", " Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892", "Classic Cake Limoncello Quarter Sheet Cake (14 Pre-Cut Total Slices, 4 Oz. Per Slice, 3.5 Lbs Total Box)", "David\u2019s Cookies Decadent Triple Chocolate made with mini Hershey\u2019s Kisses and Reese\u2019s Peanut Butter Cup Cookies Tin \u2013 2 Count", "Ferrara's Bakery 4 lbs. Italian Cookie Pack", " opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties", "\"Ferrara's Bakery 48 Mini Cannoli's (24 Plain Filled and 24 Hand Dipped Belgian Chocolate) - 1.5\"\" to 2\"\" In Length\"", "Ferrara's Bakery 24 Large Cannoli's (12 Plain Filled and 12 Hand Dipped Belgian Chocolate)", "Mary Macleod\u2019s Shortbread, Variety Tin, 3-pack, 24 cookies per tin", "Ferrara's Bakery Rainbow Cookies 1.5 lb", "Ferrara's Bakery 2 lb Italian Cookie Tray and Struffoli", "\"Tootie Pie 11\"\" Heavenly Chocolate Pie", "\"Tootie Pie 11\"\" Whiskey Pecan Pie", "\"Tootie Pie 11\"\" Huge Original Apple Pie\"", "Pulp & Press Organic Cold-Pressed Wellness Shot Pack, 48-pack", " *Spirulina.   For any questions or concerns regarding your online order", "Prime Hydration+ Sticks Electrolyte Drink Mix, Variety Pack, 30-Count", "Prime Hydration Drink, Variety Pack, 16.9 fl oz, 15-count", "Alani Nu Energy Drink, Variety Pack, 12 fl oz, 18-count", "Poppi Prebiotic Soda, Variety Pack, 12 fl oz, 15-count", "Kirkland Signature Bottled Water 16.9 fl oz, 40-count, 48 Case Pallet", "Kirkland Signature, Organic Almond Beverage, Vanilla, 32 fl oz, 6-Count", "Kirkland Signature, Almond Milk, 1 qt, 12-count", "Kirkland Signature, Organic Reduced Fat Chocolate Milk, 8.25 fl oz, 24-Count", "Kirkland Signature Colombian Cold Brew Coffee, 11 fl oz, 12-count", "Hint Flavored Water, Variety Pack, 16 fl oz, 21-count", "Califia Farms, Cafe Almond Milk, 32 oz, 6-Count", " and free from carrageenan.", "Pulp and Press 3-Day Organic Cold Pressed Juice Cleanse", "Saratoga Sparkling Spring Water, 16 fl oz, 24-count", "Pure Life Purified Water, 8 fl oz, 24-count", "Fiji Natural Artesian Water, 23.7 fl oz, 12-count", "Tropicana, Apple Juice, 15.2 fl oz, 12-Count", "Olipop 12 oz Prebiotics Soda Variety Pack, 24 Count", "SO Delicious, Organic Coconut Milk, 32 oz, 6-Count", "La Colombe Draft Latte Cold Brew Coffee, Variety Pack, 9 fl oz, 12-count", "Tropicana, 100% Orange Juice, 10 fl oz, 24-Count", "Coca-Cola Mini, 7.5 fl oz, 30-count", "Joyburst Energy Variety, 12 fl oz, 18-count", "Illy Cold Brew Coffee Drink, Classico, 8.45 fl oz, 12-count", "Kirkland Signature, Organic Coconut Water, 33.8 fl oz, 9-count", "LaCroix Sparkling Water, Variety Pack, 12 fl oz, 24-count", " or your next family get-together!", " 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.", " non-GMO", "C4 Performance Energy Drink, Frozen Bombsicle, 16 fl oz, 12-count", "San Pellegrino Sparkling Natural Mineral Water, Unflavored, 11.15 fl oz, 24-count", "Kirkland Signature Green Tea Bags, 1.5 g, 100-count", "Horizon, Organic Whole Milk, 8 oz, 18-Count", "LaCroix Sparkling Water, Lime, 12 fl oz, 24-count", "Liquid Death Sparkling Water, 16.9 fl oz, 18-count", "Starbucks Classic Hot Cocoa Mix 30 oz, 2-pack", "VitaCup Green Tea Instant Packets with Matcha, Enhance Energy & Detox, 2-pack (48-count total)", " B9 & D3", " Gluten-Free\"", "San Pellegrino Essenza, Variety Pack, 11.15 fl oz, 24-count", "Carnation, Evaporated Milk, 12 fl oz, 12-Count", "Sencha Naturals Everyday Matcha Green Tea Powder, 3-pack", " and dairy", "LaCroix Curate Commemorative Collection Sparkling Water, Variety Pack, 12 fl oz, 24-count", "Lipton, Iced Tea Mix, Lemon, 5 lbs", "San Pellegrino Italian Sparkling Drink, Variety Pack, 11.15 fl oz, 24-count", "Kirkland Signature, Organic Non-Dairy Oat Beverage, 32 oz, 6-count", "Horizon, Organic Low-fat Milk, 8 oz, 18-Count", "Vita Coco, Coconut Water, 11.1 fl oz, 18-Count", "Nestle La Lechera, Sweetened Condensed Milk, 14 oz, 6-Count", "Kirkland Signature, Organic Coconut Water, 11.1 fl oz, 12-count", "LaCroix Sparkling Water, Grapefruit, 12 fl oz, 24-count", "Celsius Sparkling Energy Drink, Variety Pack, 12 fl oz, 18-count", "Vita Coco, Coconut Water, Original, 16.9 fl oz, 12-Count", "San Pellegrino Italian Sparkling Drink, Aranciata Rossa, 11.15 fl oz, 24-count", "Vonbee Honey Citron & Ginger Tea 4.4 lb 2-pack", "Honest Kids, Organic Juice Drink, Variety Pack, 6 fl oz, 40-Count", "Lipton Original Tea Bags, 312-count", "San Pellegrino Italian Sparkling Drink, Melograno & Arancia, 11.15 fl oz, 24-count", "5-hour Energy Shot, Regular Strength, Grape, 1.93 fl. oz, 24 Count", "Pepsi Mini, 7.5 fl oz, 30-count", "100% Spring Water, 2.5 Gallon, 2-count, 48 Case Pallet", " New York", "Stash Tea, Variety Pack, 180-count", "C2O Coconut Water Hydration Pack, The Original, 17.5 fl oz, 15-count", "Oregon Chai, Original Organic Chai Tea Latte Concentrate, 32 fl. oz., 3-Count", "Tiesta Tea Blueberry Wild Child, 2 - 1 Pound Bags & 5.5oz Tin", "Pressed Cold-Pressed Juice & Shot Bundle -18 Bottles, 9 Juices & 9 Shots", " protect your eyesight", " as well as enhancing oxygen transport and serving as a natural source of energy. Our green juice is perfectly blended so you never have to compromise taste for nutrition.", " 3 vitality shots", "Ito En Jasmine Green Tea, Unsweetened, 16.9 fl oz, 12-count", "Pure Leaf Tea, Sweet Tea, 16.9 fl oz, 18-count", "Ito En Oi Ocha Unsweetened Green Tea, 16.9 fl oz, 12-count", "Pressed 3-Day Cleanse Bundle (18 Juices & 6 Shots)"], "data": [1, 383, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Title", "count": 115, "min": " *Spirulina.   For any questions or concerns regarding your online order", "max": "deMilan Panettone Classico Tin Cake 2.2 lb Tin"}, {"values": {"label": ["$", " candles and confetti. A party in a box!   Features:   10\"\" Hand-decorated Chocolate Fudge Birthday Cake", " Antonio Ferrara", " the spirit", " 2- pack \"", " 2-pack\"", " please reach out to Pulp and Press directly at support@pulpandpress.com or by phone at (866)-208-9319. A representative will be in touch with you within 24 hours.\"", " and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.", " making it incredibly versatile for daily use in many food and drink recipes.   Balanced Caffeine - With about 1/3 the amount of caffeine as a cup of coffee", " Oregon", " and more! Grown deep in the ground", " 3 elderberry shots\""], "data": [488, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Currency", "count": 12, "min": " 2- pack \"", "max": "$"}, {"values": {"label": ["\"\"\"10\"\"\"\" Peanut Butter Cake", "Zero Calories   Zero Sweeteners", "Spiced Carrot Cake with Cream Cheese Frosting   Silk Cherry Blossom Flowers (Not Edible)   No Nuts or Raisins   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "100 count", "Butter Pecan Meltaways", "\"\"\"10\"\" Four Layer Chocolate Cake", "2-count", "1.3 lb, 6-count", "6 Rocky Road Brownies", "3 Layers of French Valrhona Chocolate Cake   Mousse Malted Cream & Fudge Frosting   Topped with Fleur de Sel & Does Not Come with Flower   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "\"10\"\" Rainbow Cake", "Peony Flower & Plate Not Included   Flavor: Lemon Cake with Pearl White Pixie Glitter\u00ae   Cake Filling: Raspberry Jam with Lemon Curd & Cake Frosting: Lemon Buttercream   Bottom Tier: 9\u201d Diameter, 3 1/2\u201d High & Top Tier: 7\u201d Diameter, 3 1/2\u201d High   16-22 Servings", "90 Pieces Frozen Gourmet Chocolate Cookie Dough", "10 inch Chocolate Fudge Birthday Cake", "8 inch New York Cheesecake 2 pack   Each Cake services 10-12 people", "\"\"\"10\"\"\"\" Cheesecakes", "Quarter Sheet Cake (14 - 4.57 Oz Pre-Cut Slices Total)   Layers of Ladyfingers Soaked in Coffee Syrup   Filled with Vanilla Mascarpone Cheese Mousse", "Gluten Free Chocolate Crunch Shortbread 4-boxes   Gluten Free The Classic Shortbread - 4 boxes", "Almond Flavored Cake with Pixie Fetti\u00ae Confetti   Almond Flavored Buttercream   Topped with Pastel Pixie Fetti\u00ae Confetti   Dimensions: 9\u201d Diameter, 7\u201d High   16-22 Servings", "Quarter Sheet Cake (14 - 4 Oz Pre-Cut Slices Total)   Devil\u2019s Food Cake   Dark Chocolate Mousse Topped with Dark Chocolate Ganache", "8 inch Tiramisu Cake 2-pack   Each Cake services 10-12 people   Classic Flavors of Espresso and Mascarpone", " opera impresario and showman", " recipes and devotion to quality has changed very little.   Ingredients\u2013 Heavy Cream", "Quarter Sheet Cake (14 - 4 Oz. Pre-Cut Slices Total)   Almond Joconde Cake With Lemon Syrup   Layered with White Chocolate Mousse & Lemon Curd", "Panettone Classic   Italian Cake   Milan Specialty", "8 Jumbo Triple Chocolate made with mini Hershey\u2019s Kisses", "4 lbs. Italian Cookies", " recipes and devotion to quality has changed very little.", "24 Mini Plain Filled Cannoli   24 Mini Hand Dipped Belgian Chocolate Cannoli   Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness   Chocolate Cannoli: After thawing should be eaten within 48 hours   Frozen: Can be stored up to a year", "12 Large Plain Filled Cannoli   12 Large Hand Dipped Belgian Chocolate Cannoli   Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness   Chocolate Cannoli: After thawing should be eaten within 48 hours   Frozen: Can be stored up to a year", "Three elegant keepsake tins   All-butter artisan shortbread cookies   Variety of 4 flavors in each tin   Perfect for all your gifting needs   Certified Women Owned bakery", "\"Tricolor Rainbow Cookies   Each cookie is approximately 1.5 x 2\"\"   Small Batch Baking   Can be frozen for up to 6 months\"", "Assorted Italian Cookie Tray", "$", "\"One 11\"\" Apple Pie   Serves Approximately 10-12 people   Diameter: 11\"\" Each and Weight: 6 lbs.   Ships with Dry Ice to Maintain Quality & Freshness   Made in the USA\"", "12 Ginger, 12 Turmeric, 12 Wheatgrass and 12 Elderberry   Certified Organic   No Preservatives, Added Sugar, Additives (Colors, Flavors)   Vegan and Gluten Free", "Activate with Water   No Added Sugar   Antioxidants + Electrolytes   Caffeine Free   Gluten Free", "5 - Tropical Punch   5 - Lemon Lime   5 - Blue Raspberry   16.9 fl oz Bottles   15 Total Bottles", "6 - Juicy Peach   6 - Cosmic Stardust   6 - Cherry Slush   12 fl oz Cans   18 Total Cans", "5 - Doc Pop   5 - Grape   5 - Root Beer   12 fl oz Cans   15 Total Cans", "5 - Strawberry Lemon   5 - Orange   5 - Cherry Limeade   12 fl oz Cans   15 Total Cans", "Business Members* Click the Business Delivery Tab for Local Delivery Options", "Unsweetened   Non-Dairy Beverage   USDA Certified Organic   No Sugar Added   Vegan", "Kosher   Vegan   Free of Dairy, Lactose, Soy   No Added Sugar   Made in the USA", "USDA Certified Organic   2% Milk Fat   Grade A   Excellent Source of Calcium   Net Weight 198 fl. oz.", "Cold Brewed   Product of Colombia   Roasted and Packaged in the USA   100% Colombian   12-count", "7 - Blackberry   7 - Watermelon   7 - Peach   16 fl oz Bottles   21 Total Bottles", "Non GMO   Vegan   Kosher   Soy Free   Dairy Free", "6 (2.4 oz.) Elixir Shots   15 (12 oz.) Cold Pressed Juices   Cold pressed   Certified Organic   Product of Canada", "Spring Water   16 fl oz Bottles   24 Total Bottles   0 Calories per Bottle", "Purified Water   8 fl oz Bottles   24 Total Bottles", "Natural Artesian Water   23.7 fl oz Bottle with Sports Cap   12 Total Bottles", "100% Juice   100% Daily Value of Vitamin C   From Concentrate with Other Natural Flavors and Ingredients   Marked for Resale   12-Count", "24 count (12 oz each)   Prebiotics, plant fiber, and botanicals to support digestive health   Variety pack: 6-Root Beer, 6-Vintage Cola, 6-Classic Grape, 6-Orange Squeeze   No artificial sweeteners, flavors, or preservatives   Non-GMO Project Verified, Gluten-free, Vegan, Keto & Paleo", "USDA Organic   Kosher   Certified Gluten-Free   Non GMO Project Verified   Certified Vegan", "Variety Pack   4 - Triple Draft Latte   4 - Mocha Draft Latte   4 - Vanilla Draft Latte   100% Arabica Coffee", "Orange Juice   Made From Concentrate   100% DV Vitamin C per Serving   10 fl. oz. Bottle   Net Weight 240 fl. oz.", "Original   7.5 fl oz Cans   30 Total Cans   90 Calories per Can", "0g of sugar   0g Calories   Naturally Caffeinated (sourced from green tea)   Plant-based ingredients   3 flavors: Peach-Mango, Frose-Rose and Grape", "Classico   8.45 fl oz Cans   12 Total Cans   100% Arabica Coffee   5 Calories per Can", "No Sugar Added   Not From Concentrate   100% Juice   USDA Organic   Kosher", "Kosher (Circle U)   0 Calories, 0 Sweetener, 0 Sodium   Naturally Essenced Sparkling Water   6 Lemon, 12 Lime, 6 Grapefruit", "Frozen Bombsicle   16 fl oz Cans   12 Total Cans   Zero Sugar   200mg Caffeine", "Zero Calories   Unflavored Original", "100-count   1.5 g. bags   A Blend of Sencha & Matcha   Hot & Cold Brewing   Product of Japan", "USDA Organic   Kosher   Grade A   Never any Preservatives   Net Weight: 144 fl oz", "Kosher (Circle U)   0 Calories   0 Sweetener   0 Sodium   Naturally Essenced Sparkling Water", "100% Mountain Water   16.9 fl oz Cans   18 Total Cans", "Rich Velvety Cocoa", "2-pack (48-count total)", "Vitamin D Added   The Cooking Milk   Replace Drinking Milk in Recipes   Adds Extra Creaminess and Rich Flavor   Net Weight 144 fl oz", "Sourced From Japan   Certified Non-GMO   Perfect for Drinking, Blending and Baking   225 Servings", " matcha provides a sense of calm focus without the jitters.", "Kosher (Circle U)   0 Calories, 0 Sweetener, 0 Sodium   Naturally Essenced Sparkling Water   8 Pineapple Strawberry, 8 Blackberry Cucumber, 8 Cherry Lime", "Sweetened Iced Tea Mix   Natural Lemon Flavor   Kosher   Makes 38 qts   Product of Canada", "12 - Aranciata Rossa (Orange & Blood Orange)   12 - Limonata (Lemon)   11.15 fl oz Cans   24 Total Cans", "Kosher   Non GMO   USDA Organic   100% Vegan   6-Count", "USDA Organic   Kosher   Grade A   Never Any Preservatives   18-Count", "Coconut Water   Replenish Lost Electrolytes   Recharge with Vital Nutrients   Hydrate with the Goodness of Coconuts   Net Weight 199.8 fl. oz.", "La Lechera   Sweetened Condensed Milk   6-Count   14 oz Can   Net Weight: 84 oz", "Kosher   USDA Organic   No Sugar Added   Not from Concentrate   100% Juice:", "0 Calories   0 Sweetener   0 Sodium", "6 - Peach Vibe   6 - Tropical Vibe   6 - Arctic Vibe   12 fl oz Cans   18 Total Cans", "Kosher   Gluten Free   Soy Free   Non GMO", "Product of Italy   11.15 fl oz Cans", "4.4 lb 2 count", "Juice Drink   USDA Organic   From Concentrate   6 oz Boxes   40-Count", "3 Boxes", "Regular Strength Energy Shot   Grape Flavor   Sugar free   1.93 fl oz Bottle   24 Count", "Original   7.5 fl oz Cans   30 Total Cans   100 Calories per Can", "Brand Varies by State   Full Pallet of Single Brand:   Arrowhead   Ice Mountain   Ozarka   Deer Park   Poland Spring   Zephyrhills", " Vermont and Maine.   100% spring water", "Stash Tea Bags   Green Tea   30 bags per box   6-boxes", "Never From Concentrate   Plant Based Hydration   Electrolytes in Every Can   Non-GMO   Chill before serving", "Chai Tea Latte Concentrate   USDA Organic   Just Add Milk   Enjoy Hot   Enjoy Cold", "Non-GMO Project Verified", "9 - 12 oz. Bottles   9 - 2 oz.. Shots   No Sugars Added, No Added Water, 100% Fruits and Vegetables   Kosher   No Preservatives", " root vegetables absorb high amounts of vitamins and minerals from the soil. They have distinct", "Unsweetened   Refrigerate After Opening   Non GMO   16.9 oz Bottle   12-count", "Sweet   16.9 fl oz Bottles   18 Total Bottles", "Non-GMO   Sugar Free   Fat Free   Product Of Taiwan", "24 Bottles   No Sugars Added   100% Fruits and Vegetables   No Preservatives   Kosher"], "data": [1, 396, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Feature", "count": 102, "min": " Vermont and Maine.   100% spring water", "max": "Zero Calories   Zero Sweeteners"}, {"values": {"label": ["Zero sugar", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn\u2019s moist and delicious carrot cake is made with hand peeled and freshly grated carrots. Perfectly spiced with just the right amount of cinnamon, this cake has no nuts and no raisins. The three layers of spiced carrot cake are then filled and frosted with Gwendolyn's signature homemade cream cheese frosting. Topped with decorative pink silk cherry blossom flowers.   Features:   Flavor: Spiced Carrot Cake", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Peony flower and plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn's famous Earl's Court Chocolate Cake is the most popular cake in her bakeries. This decadent chocolate cake is three layers of French Valrhona chocolate cake, filled with silky Callebaut Belgian chocolate ganache and mousse-like chocolate malted cream. Frosted with her signature dark fudge Callebaut frosting and topped with a sprinkling of Fleur de Sel Sea salt that comes from the \u00cele de R\u00e9 in the South of France. This salt is only harvested three months out of the year and is the perfect topping for her cake.   Features:   Flavor: Valrhona Chocolate Cake", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Peony flower and plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. Gwendolyn's Two Tier Special Occasion Cake is beautiful, delicious and perfect for any special occasion. Ideal for weddings, anniversaries, baby showers and other special celebrations, this two tier cake has two three-layer cakes. The bottom tier is 8\"", "Ferrara's Bakery of Little Italy in New York CityFerrara\u2019s specialty NY cheesecake is smooth and creamy with a classic graham cracker crust. Made with the perfect balance of 100% Philadelphia brand cream cheese and sour cream. Ferrara\u2019s NY cheesecake is creamy without being heavy and melts in your mouth.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little. 8 inch New York Cheesecake 2 pack Each Cake services 10-12 peopleEach cake can be refrigerated for up to 4 days (preferably in an airtight container) or frozen for up to 6 months. Defrost in the refrigerator one day in advance, or at room temperature for 3 hours.PRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENTCake plate and Cake stand are not included.", " 2-count", "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. While everyone\u2019s palette may differ, our Italian-inspired Tiramisu is a true customer favorite. Layers of Ladyfingers soaked in Coffee Syrup then filled with Vanilla Mascarpone Cheese Mousse and topped with a dusting of rich cocoa powder will whisk you away to Italy without taking flight. Whether you prefer with a cup of Espresso or your favorite after dinner cordial, our Tiramisu is the perfect accompaniment.   Includes:   Quarter Sheet Cake (14 - 4.57 Oz Pre-Cut Slices Total)", "Shortbread is a right, not a privilege. And those who eat gluten-free should be no exception. That\u2019s why the bold bakers at Mary Macleod\u2019s Shortbread stopped at nothing on their quest to create gluten-free shortbread that rivals their original recipes.The gluten-free getting is good with this multipack of eight peaked boxes, each holding six all-butter shortbread cookies that can make any gluten glutton question their life choices. Each multipack contains four boxes of GF Classic Shortbread and four boxes of GF Chocolate Crunch so you can share the love (if you\u2019re feeling generous).Gluten Free The Classic: Gluten-free glory is yours with these light, crispy butter cookies crafted with premium almond and coconut flours. It only took about 117 tries to get the recipe just right, and it was 117% worth it.Gluten Free Chocolate Crunch: A crowning chocolate chunk atop buttery shortbread with almond and coconut flours. It\u2019s our signature cookie, now deliciously gluten free. Warning: they tend to go fast, but we promise we\u2019ll bake more.About Mary's legacy, we continue to bake authentic all-butter shortbread cookies from our family recipes. Our dedicated bakers use top quality ingredients and follow artisan small-batch methods. The result is unforgettably delicious cookies.Includes:Mary Macleod\u2019s Shortbread Multipack of 8 Blue Peaked Boxes in a Gluten-Free Mixed Assortment.Gluten Free Chocolate Crunch Shortbread 4-boxesGluten Free The Classic Shortbread - 4 boxesEach elegant box contains 6 handcrafted shortbread cookies", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders can only be delivered on Wednesday, Thursday and Friday. Minimum delivery time is 5 business days.   Plate not included.   Gwendolyn Rogers' The Cake Bake Shop is famous for handcrafting magnificent and delicious cakes and desserts for her award winning restaurants. Each cake arrives beautifully packaged in her bakery\u2019s signature pink and gold cake box with a pink satin ribbon and is topped with the bakery\u2019s dusting of edible Pixie Glitter\u00ae, adding a sparkling finish to every dessert. The Cake Bake Shop's Pixie Fetti\u00ae Birthday Cake has three layers of fluffy white vanilla bean cake with a hint of almond flavor. Pixie Fetti\u00ae is gently folded into each layer and baked. Each layer is filled and frosted with a lightly flavored almond buttercream. The cake is topped with a piped decorative border and the center is filled with Gwendolyn's custom blend of pastel Pixie Fetti\u00ae confetti. This fun, celebratory birthday cake is perfect for any party.   Features:   Flavor: Almond Vanilla Bean Cake", "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. Topping the list of customers favorites is by far our Chocolate Entremet \u2013 a deep, rich dessert that combines luscious layers of Devil\u2019s Food Cake and dark chocolate mousse with a rich, dark chocolate ganache. It is a chocolate lover\u2019s dream with caffe latte, French press or yes, regular coffee or big glass of milk.   Includes:   Quarter Sheet Cake (14 - 4 Oz Pre-Cut Slices Total)", "Ferrara\u2019s specialty tiramisu features homemade Savoiardi (Ladyfinger cookies) that we douse with espresso & coffee liqueur and layer with sweet mascarpone.", " opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties", " Sugar", "Classic Cake is a family-owned artisan bakery and has been creating decadent desserts for over 40 years using only the finest ingredients for our exclusive recipes. In listening to our customers, we found more and more looking for a lighter, refreshing dessert with the same decadence. This gave way to our one-of-a-kind Limoncello created with almond joconde cake soaked with lemon syrup then layered with white chocolate mousse and a delicious lemon curd. The deliciousness doesn\u2019t stop there. The cake is finished with white chocolate shavings, combining a sweet and tart flavor that is delightfully light.   Includes:   Quarter Sheet Cake (14 - 4 Oz. Pre-Cut Slices Total)", "\"deMilan is baked using the traditional recipe of \"\"Panettone Milano\"\". Panettone is produced according to the traditional recipe through a slow and natural process. All the ingredients", "\"Ferrara's Bakery of Little Italy in New York City 24 Mini Plain Filled Cannoli and 24 Mini Hand Dipped Belgian Chocolate Cannoli   The Cannoli is a Sicilian pastry. First introduced more than 125 years ago by Cafe\u2019 Ferrara. A light crispy shell, sweet, velvety, creamy ricotta with chocolate chips & citron. Ferrara dips their traditional crispy cannoli shells by hand in rich Belgian chocolate before filling them with sweet ricotta cream studded with chocolate chips   A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties   We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little   Cannolis are made fresh, frozen and shipped on dry ice   1 1/2-2\"\" In length", "Ferrara's Bakery of Little Italy in New York City 12 Large Plain Filled Cannoli and 12 Large Hand Dipped Belgian Chocolate CannoliThe Cannoli is a Sicilian pastry. First introduced more than 125 years ago by Cafe\u2019 Ferrara. A light crispy shell, sweet, velvety, creamy ricotta with chocolate chips & citron. Ferrara dips their traditional crispy cannoli shells by hand in rich Belgian chocolate before filling them with sweet ricotta cream studded with chocolate chipsA little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very littleCannolis are made fresh, frozen and shipped on dry ice 12 Large Plain Filled Cannoli12 Large Hand Dipped Belgian Chocolate CannoliPlain Cannoli: After thawing should be eaten within 2 hours for maximize crispnessChocolate Cannoli: After thawing should be eaten within 48 hoursFrozen: Can be stored up to a yearPRODUCED IN A FACILITY WHERE NUTS, MILK, EGGS, SOY & FLOUR ARE PRESENT", "Mary Macleod\u2019s Shortbread tastes like true love in pure, buttery cookie form. Inside each tin are handcrafted, all-butter, gourmet shortbread cookies in Mary Macleod's most popular flavors. The keepsake tin is gorgeous featuring gold foil embellishments for a touch of timeless elegance. The combination of luxurious packaging and melt-in-your-mouth cookies will create a lasting memory. Each tin is filled with 24 shortbread cookies in 4 of Mary Macleod\u2019s premium flavors: The Classic, Chocolate Crunch, Dutch Chocolate and Maple Crunch. Handcrafted and baked to perfection, every cookie is made with care and attention to detail, ensuring the highest quality and taste. This is the perfect corporate gift to show your appreciation to coworkers, clients, partners, suppliers and more. They are also fantastic and versatile for personal occasions - birthdays, weddings, anniversaries, holidays or just to say hello. With a multipack of 3 luxurious tins, this is a smart choice for all your gifting needs.   Includes:   Elegant Keepsake Blue Tin of Shortbread Cookies with Gold Foil Embellishments.", "\"Ferrara's Bakery of Little Italy in New York CityWith our secret recipes that span three centuries, this fifth-generation family-owned bakery continues to handcraft Italian desserts from the same location in NYC\u2019s Little Italy since 1892.Ferrara\u2019s traditional rainbow (tricolori) cookies are made in-house daily from a secret recipe that Antonio Ferrara used when he opened the bakery. This Tri-color or Rainbow cookie features layers of cake made from almond & macaroon paste that are sandwiched with apricot jam and coated in chocolate.A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties.We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little.Rainbow Cookies can be refrigerated for up to a week or frozen for up to 6 months. Once opened, store in an airtight container and serve at room temperature.1.5 lb's Tricolor Rainbow CookiesEach cookie is approximately 1.5 x 2\"\"PRODUCED IN A FACILITY WHERE NUTS", "\"Two   11\"\" Heavenly Chocolate Pie   1 Pie Serves Approximately 8-10 People   Each Pie is Diameter: 11\"\" Each and Weight:   3.5 lbs.   Ships with Dry Ice to Maintain Quality & Freshness   Made in the USA\"", "\"Two 11\"\" Whiskey Pecan Pie   1 Pie Serves Approximately 8-10 people   Each Pie is Diameter: 11\"\" Each", "Made with Tootie\u2019s original recipe from 1985, our Huge Apple Pie is 6 pounds of sliced apples, mixed with the perfect blend of spices and our famous handcrafted, golden-brown flaky crust. Standing almost 4 inches tall, it makes a great gift or the perfect centerpiece for all your family get-togethers.", "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders only ship Monday, Tuesday and Wednesday for Wednesday, Thursday, Friday deliveries.   At Pulp & Press, we're dedicated to making healthy living convenient and accessible to everyone. Our cold-pressed juices and wellness shots are made with only the highest quality, 100% organic, plant-based, and raw ingredients, so you can be sure you're getting the most nutritional value out of every sip. Say hello to a healthier you with our wellness shot elixirs!   12 Ginger Wellness Shot Elixir   A zesty blend of lemon, ginger, and turmeric - balanced with apple, that's perfect for supporting your immune system and aiding digestion.   12 Turmeric Wellness Shot Elixir   Loaded with superfoods like turmeric, lemon, and pineapple, plus black pepper to boost nutrient absorption.   12 Wheatgrass Wellness Shot Elixir   Boost your daily greens with this deliciously green elixir, packed with superfoods like pineapple, lemon, ginger, wheatgrass, and spirulina.   12 Elderberry Wellness Shot Elixir   Packed with antiviral ingredients like elderberry and ginger, these bright-colored shots can help support the immune system.   Fun Ways to Incorporate Wellness Shots Into Your Daily Routine:   Enjoy a shot as a refreshing start to your day", "Hydration+ Sticks Electrolyte Drink Mix", "Limit 5 per member   Gluten free", "Prebiotics for a healthy gut", "6-count", "Original Unsweetened", "24-count", "Cold Brewed", "0 calories", "Upgrade your latte. Caf\u00e9 Almond Milk froths, foams, and steams perfectly for all your espresso creations. Neutral in taste and creamy in texture, it blends beautifully into hot or iced coffee. Simple, dairy-free, plant-based goodness.\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b   FROTH + STEAM PERFECT LATTES: With Caf\u00e9 Almond Milk you can froth and steam perfect dairy-free lattes at home. Naturally creamy with a neutral taste, Caf\u00e9 Almond Milk is made for lattes.", "Due to the perishable nature of our products, Pulp & Press can not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm EST on Tuesday will not ship until the following Monday.", "Lively bubbles that refresh the palate", "100% pure quality", "Perfect for hiking, traveling and on-the-go hydration", "Apple Juice", "OLIPOP is a new kind of soda\u2122 that's delicious, refreshing, and actually good for you. OLIPOP combines the classic soda flavor you know and love with prebiotics, plant fiber, and botanicals to support your microbiome and digestive health. Every flavor has 2-5 grams of sugar and includes 9 grams of dietary fiber (about 1/3 of your daily recommended fiber intake)!   24 count (12 oz each)", "Unsweetened Coconut Milk", "Cold brew coffee drinkVariety pack: 4-Triple Shot, 4-Mocha, 4-VanillaFoamy nitrous-infused milk9 oz can", "Product may not be available in all areas due to local municipality requirements.   24-count", "Sip-sized cans", "Natural Energy, with clean, simple ingredients and green-tea caffeine. Joyburst is a better-for-you refreshing sparkling beverage without the unhealthy sugars and synthetic caffeine sources that other energy drinks have. Three delicious fruit-based flavors with a hint of sweetness, naturally-derived caffeine and refreshing sparkling water.   Features:   0g of sugar", "Illy Blend", "Organic Coconut Water", "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!   24-count", "Performance Energy Drink", "Bottled at the source, San Pellegrino Terme (Bergamo) Italy", "100-count1.5 g. bags150 g. Total net weightProduct of Japan", "Certified B Corporation", "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!24-count12 fl. oz. cans288 fl. oz. Total weightMULTI PACK: Comes with 2 packs of 12 cans (24 Cans total). Lime 12 oz cans, perfect for the fridge, office, or your next family get-together!HEALTHIER: Unlike sports drinks, vitamin enhanced waters, and sodas, LaCroix is healthy for you; natural sparkling water with 0 calories, 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.GUILT FREE: Drink with zero worries! LaCroix contains 0 calories, 0 sweeteners, and 0 sodium. Our sparkling water is vegan, gluten free, non-GMO, and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.REFRESHING: LaCroix is a wholesome, refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym, in the office or on the go!FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!", "Sourced from beneath hundreds of feet of stone", "Flavored Mineral Water24 x 11.5 fl oz8 each of Tangerine & Wild Strawberry, Blood Orange & Black Raspberry, Dark Morello Cherry & Pomegranate", "12-count", "About Matcha   Made of finely-ground green tea leaves, matcha powder is a highly versatile superfood you drink hot or cold or can add to your favorite smoothies, desserts, and countless other recipes.   Antioxidant Benefits \u2013 Matcha is naturally high in powerful antioxidants for the all-over wellbeing of your body and mind.", "LaCroix is a refreshing and healthy beverage that can be enjoyed in any setting. Each sip of LaCroix Sparking Water is flavored with the natural essence oils extracted from the named fruit. It contains 0-calories, 0-sweeteners and 0-sodium. This means you can enjoy the refreshing taste of a carbonated beverage completely guilt-free. LaCroix sparkling water is vegan, gluten-free, non-GMO and Whole30 approved. Our water is sourced in the U.S.A. and has a lower carbon footprint compared to imported brands. The average person needs to drink eight 8-oz glasses of water a day, and with LaCroix Sparkling Water, each of those eight glasses can have a special, fruity essence that you will love! Enjoy LaCroix!24-count12 fl. oz. cans288 fl. oz. Total weight8-Pineapple Strawberry (Pina Fraise), 8-Blackberry Cucumber (Mure Pepino), 8-Cherry Lime (Cerise Limon)VARIETY PACK: Variety Multi-Pack of 24 slim cans measuring 12 oz each. Includes 8 Cerise Lim\u00f3n (Cherry Lime), 8 Pi\u00f1a Fraise (Pineapple Strawberry) and 8 M\u00fare Pepino (Blackberry Cucumber). Perfect for the fridge, office, or your next family get-together!HEALTHIER: Unlike sports drinks, vitamin enhanced waters, and sodas, LaCroix is a healthy for you, natural sparkling water with 0 calories, 0 sweeteners and 0 sodium. Each flavor comes from the natural essence oils of the named fruit with nothing artificial added.GUILT FREE: Drink with zero worries! LaCroix contains 0 calories, 0 sweeteners, and 0 sodium. Our sparkling water is vegan, gluten free, non-GMO, and Whole30 approved. Our drinks offer the perfect splash of refreshment for work and play.REFRESHING: LaCroix is a wholesome, refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym, in the office or on the go!FUN: LaCroix is the perfect drink for every occasion. LaCroix Mocktail recipes even provide a splash of fun for your next party or get-together. Let LaCroix bring fun to your healthy lifestyle!", "Store in cool, dry place", "(2) 6-packs of each flavor", "Made with super tasty rolled oats", "8 fl oz Milk Boxes", "Vita Coco", "No Artificial Flavors", "100% Natural Sparkling WaterGrapefruit (Pamplemousse)12 fl oz (355 mL) can24-countMore Information:KosherSodium freeSweetener freeZero calories", "6 - Peach Vibe (white peach)", "Sparkling orange and blood orange beverage11.15 fl oz cans4 boxes of 6 cans24 total cans", "Variety pack: 16-Super Fruit Punch, 8-Appley Ever After, 8-Berry Berry Good Lemonade, 8-Goodness Grape", "Sparkling orange and pomegranate beverage11.15 fl oz cans4 boxes of 6 cans24 total cans", "Regular Strength Energy Shot", "0g saturated fat", "Brand varies by geographical location.", "Coconut Water Hydration PackThe Original17.5 fl oz (518 mL) can15-countMore Information:Non-GMOChill before serving", "Original Blend of Premium Black Tea, Vanilla, Chai Spices and Honey", "Due to the perishable nature of this item, orders do not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm PST on Tuesday will not ship until the following Monday.   Pressed Juicery is on a mission to make high nutrition a realistic option for all. Our cold-pressed juices are made with all-natural fruits and vegetables - no preservatives and no added sugars.", " earthy flavors and are packed with fiber and complex carbohydrates", "Jasmine Green TeaUnsweetened16.9 oz bottle12-count", "Real brewed tea - never from powder", "Made With Japanese Green Tea12-count16.9 fl oz BottlesTotal Net Volume: 202.8 fl oz", "Due to the perishable nature of this item, orders do not ship over the weekend. Orders will ship Monday, Tuesday, and Wednesday for delivery Wednesday, Thursday, and Friday. Orders placed after 12 pm PST on Tuesday will not ship until the following Monday.   Pressed is on a mission to make high nutrition a realistic option for all. Our cold-pressed juices are made with all-natural fruits and vegetables - no preservatives and no added sugars.   How to cleanse - Although everyone is different and needs to listen to their body as they cleanse, Pressed\u2019s juice plan recommends drinking 1 juice every 2 hours in the following recommended order: Greens with Ginger, Orange Turmeric, Roots with Ginger, Greens with Ginger, Sweet Citrus, Avocado Greens Smoothies. Drink the first one when you wake up in the morning, and try to drink the last one two hours before sleeping. Add one Wellness shot and one Vitality shot at any point of the day to boost your cleanse. Juice cleansing is intended to replace solid meals, though again everyone is different and should consume food, water and juice as they need. Be prepared for changes in your digestion and even sleep rhythms as your body adjusts to the cleanse, and make sure you stay hydrated with water throughout, as you might find shifting energy levels and mood in your first juice cleanse.   Green with Ginger - Made from the freshest, highest-quality green vegetables we can find, our green juice is a simple and easy addition to a healthy lifestyle. Leafy green vegetables are known for their antioxidants, phytonutrients, as well as enhancing oxygen transport and serving as a natural source of energy. Our green juice is perfectly blended, so you never have to compromise taste for nutrition.   Orange Turmeric - Orange Turmeric is a blend of orange, apple aloe vera, turmeric, lemon, and black pepper. Our Orange Turmeric elevates everyday OJ with a vibrant blend of orange juice, black pepper, and turmeric from Fiji.   Roots with Ginger - We've blended carrots and beets to create delicious juices for all taste buds-from earthy to sweet! Known for their rich color and sweet flavor, root vegetables contain powerful benefits that promote liver health, fight free radicals, soothe the nervous system, protect your eyesight, and more! Grown deep in the ground, root vegetables absorb high amounts of vitamins and minerals from the soil. They have distinct, earthy flavors and are packed with fiber and complex carbohydrates, which help the body to break down sugar.   Sweet Citrus - Our citrus blend is refreshing, hydrating and crisp. It contains ingredients like lemon and mint that are known to stimulate and alkalize the system, aid in digestion, and provide a pick-me-up when you're feeling down.   Avocado Greens Smoothie - Expertly blended and ready to go, this clean and simple recipe is packed with power greens like spinach, kale, and spirulina, mixed with banana, avocado, and matcha for a creamy-smooth taste.   Wellness Shots"], "data": [421, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Product Description", "count": 78, "min": " 2-count", "max": "Zero sugar"}, {"values": {"label": ["0.0 - 35.7", "35.7 - 71.4", "71.4 - 107.1", "107.1 - 142.8", "142.8 - 178.5", "178.5 - 214.2", "214.2 - 249.9", "249.9 - 285.6", "285.6 - 321.3", "321.3 - 357.0"], "data": [178, 36, 36, 35, 36, 36, 35, 36, 36, 36]}, "label": "Sub Category_stringindexer_transform", "count": 10, "min": 0.0, "max": 357.0}, {"values": {"label": ["0.0 - 12.3", "12.3 - 24.6", "24.6 - 36.9", "36.9 - 49.2", "49.2 - 61.5", "61.5 - 73.8", "73.8 - 86.1", "86.1 - 98.4", "98.4 - 110.7", "110.7 - 123.0"], "data": [368, 29, 16, 13, 12, 12, 13, 12, 12, 13]}, "label": "Price_stringindexer_transform", "count": 10, "min": 0.0, "max": 123.0}, {"values": {"label": ["0.0 - 4.7", "4.7 - 9.4", "9.4 - 14.1", "14.1 - 18.8", "18.8 - 23.5", "23.5 - 28.2", "28.2 - 32.9", "32.9 - 37.6", "37.6 - 42.3", "42.3 - 47.0"], "data": [455, 7, 5, 4, 5, 5, 4, 5, 5, 5]}, "label": "Discount_stringindexer_transform", "count": 10, "min": 0.0, "max": 47.0}, {"values": {"label": ["0.0 - 7.4", "7.4 - 14.8", "14.8 - 22.2", "22.2 - 29.6", "29.6 - 37.0", "37.0 - 44.4", "44.4 - 51.8", "51.8 - 59.2", "59.2 - 66.6", "66.6 - 74.0"], "data": [433, 7, 8, 7, 7, 8, 7, 8, 7, 8]}, "label": "Rating_stringindexer_transform", "count": 10, "min": 0.0, "max": 74.0}, {"values": {"label": ["0.0 - 11.4", "11.4 - 22.8", "22.8 - 34.2", "34.2 - 45.6", "45.6 - 57.0", "57.0 - 68.4", "68.4 - 79.8", "79.8 - 91.2", "91.2 - 102.6", "102.6 - 114.0"], "data": [397, 11, 12, 11, 11, 12, 11, 12, 11, 12]}, "label": "Title_stringindexer_transform", "count": 10, "min": 0.0, "max": 114.0}, {"values": {"label": ["0.0 - 1.1", "1.1 - 2.2", "2.2 - 3.3", "3.3 - 4.4", "4.4 - 5.5", "5.5 - 6.6", "6.6 - 7.7", "7.7 - 8.8", "8.8 - 9.9", "9.9 - 11.0"], "data": [490, 1, 1, 1, 1, 1, 1, 1, 1, 2]}, "label": "Currency_stringindexer_transform", "count": 10, "min": 0.0, "max": 11.0}, {"values": {"label": ["0.0 - 10.1", "10.1 - 20.2", "20.2 - 30.3", "30.3 - 40.4", "40.4 - 50.5", "50.5 - 60.6", "60.6 - 70.7", "70.7 - 80.8", "80.8 - 90.9", "90.9 - 101.0"], "data": [409, 10, 10, 10, 10, 10, 10, 10, 10, 11]}, "label": "Feature_stringindexer_transform", "count": 10, "min": 0.0, "max": 101.0}, {"values": {"label": ["0.0 - 7.7", "7.7 - 15.4", "15.4 - 23.1", "23.1 - 30.8", "30.8 - 38.5", "38.5 - 46.2", "46.2 - 53.9", "53.9 - 61.6", "61.6 - 69.3", "69.3 - 77.0"], "data": [430, 8, 8, 7, 8, 8, 7, 8, 8, 8]}, "label": "Product Description_stringindexer_transform", "count": 10, "min": 0.0, "max": 77.0}]}, "selectedFE": [{"transformationsData": [{"feature_label": "Sub Category", "transformation_label": "String Indexer"}], "feature": "Sub Category", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "0 sugar", "max": "\u200bCaffeine free", "missing": "0", "distinct": "358"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Sub Category"}, {"transformationsData": [{"feature_label": "Price", "transformation_label": "String Indexer"}], "feature": "Price", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "192", "mean": "", "stddev": "", "min": " \"\"Happy Birthday\"\" is written in swirls of pastel colors and is playful enough to get any party started. Simple to serve", "max": "\u201d we strive to make green tea a part of your daily wellness.   B-Corporation - As a Certified B Corporation", "missing": "308", "distinct": "124"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Price"}, {"transformationsData": [{"feature_label": "Discount", "transformation_label": "String Indexer"}], "feature": "Discount", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "148", "mean": "", "stddev": "", "min": " 10-Strawberry Watermelon (0.32 oz)", "max": "This item is not returnable.", "missing": "352", "distinct": "48"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Discount"}, {"transformationsData": [{"feature_label": "Rating", "transformation_label": "String Indexer"}], "feature": "Rating", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "83", "mean": "", "stddev": "", "min": " 1 Triple chocolateTrans fat freeContains PecansKosher OU-D certifiedEach cheesecake serves approximately 14 people28 slices total Diameter: 10\"\" eachWeight: Approximately 4 lbs. eachMade in the USAImportant Handling Instructions:If not being consumed immediately upon arrival", "max": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "missing": "417", "distinct": "75"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Rating"}, {"transformationsData": [{"feature_label": "Title", "transformation_label": "String Indexer"}], "feature": "Title", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "118", "mean": "", "stddev": "", "min": " *Spirulina.   For any questions or concerns regarding your online order", "max": "deMilan Panettone Classico Tin Cake 2.2 lb Tin", "missing": "382", "distinct": "115"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Title"}, {"transformationsData": [{"feature_label": "Currency", "transformation_label": "String Indexer"}], "feature": "Currency", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "109", "mean": "", "stddev": "", "min": " 2- pack \"", "max": "$", "missing": "391", "distinct": "12"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Currency"}, {"transformationsData": [{"feature_label": "Feature", "transformation_label": "String Indexer"}], "feature": "Feature", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "105", "mean": "", "stddev": "", "min": " Vermont and Maine.   100% spring water", "max": "Zero Calories   Zero Sweeteners", "missing": "395", "distinct": "102"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Feature"}, {"transformationsData": [{"feature_label": "Product Description", "transformation_label": "String Indexer"}], "feature": "Product Description", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "80", "mean": "", "stddev": "", "min": " 2-count", "max": "Zero sugar", "missing": "420", "distinct": "78"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Product Description"}], "autoFE_flag": true}, "status": "new", "position": {"x": 62, "y": 160}, "shape_attributes": {"image": {"refWidth": "100%", "refHeight": "100%", "xlinkHref": "assets/svg/transformation/feature-transformation.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 10, "fill": "#333333", "type": "transformation", "text": "Auto FE", "slug": "auto-fe", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}, "root": {"dataTooltipPosition": "bottom", "dataTooltipPositionSelector": ".joint-stencil", "mode": "auto"}, "body": {"fill": "transparent", "stroke": "#4295d1", "strokeWidth": 2, "strokeDasharray": "0"}, "dbValues": {"AutoFE": {"autoFE_flag": true, "dataPercentage": "10"}, "ManualFE": {"FE": []}, "selectedFE": [], "autoFE_flag": true}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"inherited": true, "checked": true, "field": "Sub Category_stringindexer", "alias": "Sub Category_stringindexer", "type": "real", "position": 0}, {"inherited": true, "checked": true, "field": "Price_stringindexer", "alias": "Price_stringindexer", "type": "real", "position": 1}, {"inherited": true, "checked": true, "field": "Discount_stringindexer", "alias": "Discount_stringindexer", "type": "real", "position": 2}, {"inherited": true, "checked": true, "field": "Rating_stringindexer", "alias": "Rating_stringindexer", "type": "real", "position": 3}, {"inherited": true, "checked": true, "field": "Title_stringindexer", "alias": "Title_stringindexer", "type": "real", "position": 4}, {"inherited": true, "checked": true, "field": "Currency_stringindexer", "alias": "Currency_stringindexer", "type": "real", "position": 5}, {"inherited": true, "checked": true, "field": "Feature_stringindexer", "alias": "Feature_stringindexer", "type": "real", "position": 6}, {"inherited": true, "checked": true, "field": "Product Description_stringindexer", "alias": "Product Description_stringindexer", "type": "real", "position": 7}], "actual_schema": [{"inherited": true, "checked": true, "field": "Sub Category", "alias": "Sub Category", "type": "String", "position": 0}, {"inherited": true, "checked": true, "field": "Price", "alias": "Price", "type": "String", "position": 1}, {"inherited": true, "checked": true, "field": "Discount", "alias": "Discount", "type": "String", "position": 2}, {"inherited": true, "checked": true, "field": "Rating", "alias": "Rating", "type": "String", "position": 3}, {"inherited": true, "checked": true, "field": "Title", "alias": "Title", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "Currency", "alias": "Currency", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "Feature", "alias": "Feature", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "Product Description", "alias": "Product Description", "type": "String", "position": 7}], "selected_schema": [], "created_at": "2024-06-01 02:02:54.644000", "originalcount": 7420, "samplecount": 747, "samplefile": "/FileStore/platform/sampleData/665a816e3dfe9400ae3e183c/part-00000-8a13ea50-e287-4e6e-a7d5-8b6bca7826f2-c000.csv", "joinSchema": [], "updated_at": "2024-06-01 02:29:05.286000", "__v": 0, "datacache": 0, "sampleData": [{"Sub Category": "Dimensions: 9\u201d diameter", "Price": " 7\u201d high", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Certified Kosher OU-D", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Serves 14\"", "Price": "A cake the dessert epicure will die for!To the ultimate chocolate lover - We've baked your dream cake! Four split layers of our rich chocolate cake, filled with a smooth milk chocolate mousse, finished in chocolate ganache & covered in dark chocolate bark pieces. This cake is the thoughtful gift idea that\u2019s perfect for family, friends, coworkers, or to anyone you care about in your life. Generously sized precut slices, A cake lover\u2019s dreams come true! Includes:1 - 10\u201d Premier Chocolate Overload CakeWeighs in at 7.2 lbs.14 Servings OU-D certified, the most trusted kosher certification in the U.S.All natural with no added preservativesSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Mango Cheesecake", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Baked in", "Price": " and Imported from", "Discount": " France", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Large round and crispy cookies stamped with the mark of St Michel\u2019s heritage\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Bakery & Desserts", "Price": "$29.99 ", "Discount": "No Discount", "Rating": "Rated 4.4 out of 5 stars based on 1679 reviews.", "Title": "David's Cookies Brownie and Cookie Combo Pack", "Currency": "$", "Feature": "6 Rocky Road Brownies", "Product Description": null}, {"Sub Category": "1 Triple Chocolate", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Each Cake Arrives With It\u2019s Own Cake Care Card", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "PRODUCEDIN AFACILITYWHERENUTS", "Price": "MILK", "Discount": "EGGS", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": " Enrico Scoppa and our great grand-uncle", "Currency": " Antonio Ferrara", "Feature": " opera impresario and showman", "Product Description": " opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties"}, {"Sub Category": "We take the extra step of baking two", "Price": " three and sometimes four times a day", "Discount": " in small batches. Because of the frequency with which we bake", "Rating": " Ferrara acquired our great reputation for quality and freshness. Today", "Title": " Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892", "Currency": " the spirit", "Feature": " recipes and devotion to quality has changed very little.", "Product Description": null}, {"Sub Category": "Bakery & Desserts", "Price": "$119.99 ", "Discount": "No Discount", "Rating": "Rated 2.2 out of 5 stars based on 4 reviews.", "Title": "\"Ferrara's Bakery 48 Mini Cannoli's (24 Plain Filled and 24 Hand Dipped Belgian Chocolate) - 1.5\"\" to 2\"\" In Length\"", "Currency": "$", "Feature": "24 Mini Plain Filled Cannoli   24 Mini Hand Dipped Belgian Chocolate Cannoli   Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness   Chocolate Cannoli: After thawing should be eaten within 48 hours   Frozen: Can be stored up to a year", "Product Description": "\"Ferrara's Bakery of Little Italy in New York City 24 Mini Plain Filled Cannoli and 24 Mini Hand Dipped Belgian Chocolate Cannoli   The Cannoli is a Sicilian pastry. First introduced more than 125 years ago by Cafe\u2019 Ferrara. A light crispy shell, sweet, velvety, creamy ricotta with chocolate chips & citron. Ferrara dips their traditional crispy cannoli shells by hand in rich Belgian chocolate before filling them with sweet ricotta cream studded with chocolate chips   A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties   We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little   Cannolis are made fresh, frozen and shipped on dry ice   1 1/2-2\"\" In length"}, {"Sub Category": "If not being consumed immediately upon arrival", "Price": " your pie should be placed in the freezer. The pie will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 7 days. The pie is fully baked and can be enjoyed chilled or at room temperature. Thaw the pie in the fridge for about 4 hours (or on your kitchen counter for around 2 hours).\"", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Important Handling Instructions:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Some of our products may contain nuts. Our facility is NOT a nut-free facility", "Price": " and as a result it is possible that any product may have come in contact with nut or nut oils.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "250 mg BCAA", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "The ultimate recovery support", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Free of dairy", "Price": " lactose", "Discount": " soy", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Non-Dairy Beverage", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "BARISTA'S CHOICE DAIRY-FREE MILK: Califia Farms Caf\u00e9 Almond Milks are favored by professional baristas across the country for their ability to froth", "Price": " steam", "Discount": " and form latte art.", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "3 Rinse + Rebeet   6 (2.4 oz.) Elixir Shots   3 Ginger", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Rich in vitamins and minerals", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "If needed", "Price": " consume organic fruits and vegetables moderately   For any questions or concerns regarding your online order", "Discount": " please reach out to Pulp and Press directly at support@pulpandpress.com or by phone at (866)-208-9319. A representative will be in touch with you within 24 hours.\"", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$24.99 ", "Discount": "No Discount", "Rating": null, "Title": "Fiji Natural Artesian Water, 23.7 fl oz, 12-count", "Currency": "$", "Feature": "Natural Artesian Water   23.7 fl oz Bottle with Sports Cap   12 Total Bottles", "Product Description": "Perfect for hiking, traveling and on-the-go hydration"}, {"Sub Category": "Delicious", "Price": " refreshing", "Discount": " and actually good for you", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Prebiotics", "Price": " plant fiber", "Discount": " and botanicals to support digestive health", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Naturally Caffeinated (sourced from green tea)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No preservatives", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "REFRESHING: LaCroix is a wholesome", "Price": " refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym", "Discount": " in the office or on the go!", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "8 g Protein per Serving", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Infused with Moringa", "Price": " Minerals", "Discount": " and Antioxidants", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Nutrient-Dense Moringa Oleifera", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Vegan", "Price": " Sugar-Free", "Discount": " Soy-Free", "Rating": " Dairy-Free", "Title": " Gluten-Free\"", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Vegan\"", "Price": "Pure Coconut Water", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "The Original", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Bottle Fee will apply to shipments going to California", "Price": " Connecticut", "Discount": " Delaware", "Rating": " Michigan", "Title": " New York", "Currency": " Oregon", "Feature": " Vermont and Maine.   100% spring water", "Product Description": null}, {"Sub Category": "96 total jugs", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Deer Park   ND", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Ice Mountain   OK", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Arrowhead   PA", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Ice Mountain   TN", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1-Chamomile Herbal Tea (Caffeine Free)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Includes 3 greens with ginger", "Price": " 3 spicy roots", "Discount": " 3 sweet citrus", "Rating": " 3 wellness shots", "Title": " 3 vitality shots", "Currency": " 3 elderberry shots\"", "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$21.79 ", "Discount": "No Discount", "Rating": null, "Title": "Ito En Oi Ocha Unsweetened Green Tea, 16.9 fl oz, 12-count", "Currency": "$", "Feature": "Non-GMO   Sugar Free   Fat Free   Product Of Taiwan", "Product Description": "Made With Japanese Green Tea12-count16.9 fl oz BottlesTotal Net Volume: 202.8 fl oz"}, {"Sub Category": "Net Weight 240 fl. oz.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No preservatives", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$37.99 ", "Discount": "No Discount", "Rating": null, "Title": "Celsius Sparkling Energy Drink, Wild Berry, 12 fl oz, 24-count", "Currency": "$", "Feature": "Wild Berry   12 fl oz Cans   24 Total Cans   0 Sugar   Gluten Free", "Product Description": "Kosher"}, {"Sub Category": "No preservatives", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No sugar", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$23.99 ", "Discount": "No Discount", "Rating": null, "Title": "Bigelow Herbal Tea, Variety Pack, 168 bags", "Currency": "$", "Feature": "Caffeine Free   Kosher   All Natural   Gluten Free", "Product Description": "Variety pack:"}, {"Sub Category": "1-I Love Lemon", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "7g Protein per Serving", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Net Weight 4lb\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$15.99 ", "Discount": "No Discount", "Rating": null, "Title": "Dole, 100% Pineapple Juice, 6 fl oz, 24-Count", "Currency": "$", "Feature": "Kosher   Not from Concentrate   100% Pineapple Juice   Excellent Source of Vitamin C   Good Source of Vitamins A & E", "Product Description": "24-Count"}, {"Sub Category": "Cold Pressed For Maximum Nutrition   Certified Organic   No Preservatives", "Price": " Added Sugar", "Discount": " Additives (Colors", "Rating": " Flavors)   Vegan & Gluten Free\"", "Title": "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders only ship Monday, Tuesday and Wednesday for Wednesday, Thursday, Friday deliveries.   At Pulp & Press, we're dedicated to making healthy living convenient and accessible to everyone. Our cold-pressed juices and wellness shots are made with only the highest quality, 100% organic, plant-based, and raw ingredients, so you can be sure you're getting the most nutritional value out of every sip. Say hello to a healthier you with our cold pressed juices, packed with 3-4 lbs of fresh produce per bottle.   Features:   Cold Pressed For Maximum Nutrition", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "3 Count", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "250 calories per bottle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Citrus Juices - Our citrus blend is refreshing", "Price": " hydrating and crisp. It contains ingredients like lemon and mint that are known to stimulate and alkalize the system", "Discount": " aid in digestion", "Rating": " and provide a pick-me-up when you're feeling down.", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Individually labeled", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Keep refrigerated", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Vanilla Chai\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Zero sugar", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$54.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 6 reviews.", "Title": "Joyburst Hydration Drink, Variety Pack, 12 fl oz, 24-count ", "Currency": "$", "Feature": "0g of Sugar   0 Calories   Recyclable, sustainable packaging", "Product Description": "Renew your mind and body with the Joyburst Beverage Variety Tetra Pack! Indulge in the superfood qualities of lions mane to refresh your focus and the mouth-watering flavor of Strawberry Lemonade, Watermelon, and Peach. These premium hydration beverages will refresh your focus and quench your thirst. 2 packs x 12 units; 8 units of each flavor in sleek, recyclable and resealable packages are ideal for on-the-go hydration.   Vitamin Bs power blend (B1, B3, B6, B12)"}, {"Sub Category": "Resealable cans\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "3 Wellness Shots", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Individually labeled", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Red Bull Sugarfree is: Wheat-free", "Price": " gluten-free", "Discount": " dairy-free", "Rating": " lactose-free", "Title": " vegetarian", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "B-group vitamins: Vitamins are essential micronutrients that are required for maintaining normal body functions.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No artificial sweeteners", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$61.99 ", "Discount": "No Discount", "Rating": null, "Title": "Red Bull Energy Drink, 12 fl oz, 24-count", "Currency": "$", "Feature": "With Taurine   Lightly Carbonated   160 Calories per Can", "Product Description": "Energy drink12 oz can24-countRed Bull Energy Drink's special formula contains ingredients of high quality: Caffeine, Taurine, some B-Group Vitamins, SugarsOne 12 fl oz can of Red Bull Energy Drink contains 114 mg of caffeine, about the same amount as in an equal serving of home-brewed coffeeRed Bull Energy Drink is: Wheat-free, gluten-free, dairy-free, lactose-free, vegetarianAluminum cans are forever recyclable, without any loss in qualityVitalizes Body and Mind.\u00aeRED BULL GIVES YOU WINGS Inspired by functional drinks from the Far East, Dietrich Mateschitz founded Red Bull in the mid-1980s. He developed a new product and a unique marketing concept and launched Red Bull Energy Drink on April 1, 1987 in Austria.A brand new product category - Energy Drinks - was born.WHEN TO DRINKRed Bull is appreciated worldwide by top athletes, busy professionals, college students and travelers on long journeys.WHAT'S INSIDE THE CAN Always check can labels for most updated product ingredient values. Some values declared on labels may vary slightly depending on production locations.Caffeine: Caffeine was widely used by ancient civilizations. It was traditionally consumed from natural sources like tea, coffee, cacao beans and cola nuts and appreciated for its stimulating effects on the human body. B-group vitamins: Vitamins are essential micronutrients that are required for maintaining normal body functions. Sugars: Red Bull Energy Drink is made with real sugars.Taurine: Taurine is an amino acid, naturally occurring in the human body and present in the daily diet. It is involved in a wide range of biological processes.Ingredients: Carbonated Water, Sugar, Glucose, Citric Acid, Taurine, Natural and Artificial Flavors, Sodium Bicarbonate (Baking Soda), Magnesium Carbonate, Colors, Caffeine, Niacinamide, Pyridoxine HCl (Vitamin B6), Calcium Pantothenate, Vitamin B12"}, {"Sub Category": "Beverages & Water", "Price": "$24.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 3 reviews.", "Title": "Ready Sports Drink Light, Mango Lemonade, 16.9 fl oz, 12-count", "Currency": "$", "Feature": "Mango Lemonade   16.9 fl oz Bottles   12 Total Bottles", "Product Description": "Electrolytes for hydration"}, {"Sub Category": "Individually labeled", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1.93 fl oz Bottle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gluten-Free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$22.99 ", "Discount": "No Discount", "Rating": null, "Title": "Body Armor Sports Drink, Variety Pack, 16 fl oz, 20-count", "Currency": "$", "Feature": "7 - Strawberry Banana   7 - Orange Mango   6 - Fruit Punch   16 fl oz Bottles   20 Total Bottles", "Product Description": "Coconut water"}, {"Sub Category": "Sugar Free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Single serve vitamin C drink with 130% daily value per bottle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "ANTIOXIDANT VITAMIN E: To help defend the body against potentially cell-damaging", "Price": " unstable molecules known as free radicals.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Naturally Caffeinated (sourced from green tea)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Nut free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Breakfast", "Price": "$9.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Whole Grain Rolled Oats, 10 LBS", "Currency": "$", "Feature": "Kosher   Whole Grain Rolled Oats   Resealable Bag   Product of Canada   Packed in the USA", "Product Description": "Net Weight 10 LBS"}, {"Sub Category": "Breakfast", "Price": "$28.99 ", "Discount": "After $8 OFF", "Rating": "Rated 4.8 out of 5 stars based on 1275 reviews.", "Title": "NuTrail Keto Nut Granola Blueberry Cinnamon 2-Pack (22 oz each)", "Currency": "$", "Feature": "2-pack (22 oz each)   Keto   3g Net Carbs", "Product Description": "Who is NuTrail?At NuTrail\u2122 our mission is to make your keto/low-carb journey easier. In the last few years, keto has become a lifestyle well known for helping people lose weight, gain mental clarity, regulate mood, and improve overall well-being. The hardest part? Sticking to it! That's why we created amazing, delicious, better-for-you-low-carb (and low sugar) products--to help you adhere to a better lifestyle.NuTrail Keto Nut Granola \u2013 Blueberry Cinnamon offers keto and low carb dieters a better, delicious, keto breakfast. An all-natural medley of pecans, sunflower seeds, pumpkin seeds, coconut, almonds, blueberries, butter, and monk fruit sweetener mixed with just the right amount of cinnamon will have your taste buds in heaven. To stay low carb, we recommend pairing this with unsweetened almond milk or unsweet, plain, greek yogurt. NuTrail is committed making high quality, low carb foods.How is our granola so sweet and still low carb?Simple. We leverage the sweetness of amazing sugar alternative: monk fruit sweetener. That, combined with the healthy fats from our blend of nuts creates the crunch sweet sensation that will sure to become a staple in any pantry.I'm not on Keto, can I still enjoy this?Absolutely! Many of our customers enjoy all the way through and after they're done with the keto diet. It really is that good.2-pack (22 oz each)Delicious, healthy breakfast. Keto Friendly. Low Carb Food. Only 3g Net Carbs!The crunchiness you've been missing in your keto lifestyle.A delicious blend of pecans, sunflower seeds, pumpkin seeds, coconut chips, almonds, blueberries, butter, and monk fruit sweetener. And of course, just the right amount of cinnamon.Made with simple, clean ingredients."}, {"Sub Category": "33.1 oz carton\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "100% Whole Grain Oats", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "15 Apples & Cinnamon", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Made with 100% Whole Grain Oats", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Net Weight: 40.7 oz.   *3 grams of soluble fiber daily from whole grain oat foods", "Price": " like Honey Nut Cheerios cereal", "Discount": " in a diet low in saturated fat and cholesterol", "Rating": " may reduce the risk of heart disease. Honey Nut Cheerios cereal provides .75 grams per serving.\"", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Milky Way", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "These bars are made without artificial colors or preservatives", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Little things really can mean a lot\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "\u200b0.78 oz. Bars\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "240 candies", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "67.4 oz bag   More Information:   Kosher\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$39.99 ", "Discount": "No Discount", "Rating": null, "Title": "Hershey's Milk Chocolate With Almonds, 1.45 oz, 36-count", "Currency": "$", "Feature": "Whole Almonds   Kosher   Gluten-Free   1.45 oz bars   36-count", "Product Description": "Whole Almonds36-count1.45 oz bars"}, {"Sub Category": "Candy", "Price": "$15.99 ", "Discount": "No Discount", "Rating": null, "Title": "Lindt Lindor Chocolate Truffles, Assorted Flavors, 21.2 oz", "Currency": "$", "Feature": "5 flavor assortment: Milk, Dark, White, Caramel, and 70% Extra Dark Chocolates Truffles   Irresistibly Smooth   Kosher   21.2 oz bag", "Product Description": "Chocolate Truffles5 flavor assortmentKosher21.2 oz bag"}, {"Sub Category": "Candy", "Price": "$11.99 ", "Discount": "No Discount", "Rating": null, "Title": "Charms Mini Pops, Assorted Flavors, 400-count", "Currency": "$", "Feature": "Peanut Free   Gluten Free   18 Flavors   400-Count   Net Weight 4.49lb", "Product Description": "Flavors include:   Mango"}, {"Sub Category": "Candy", "Price": "$31.99 ", "Discount": "No Discount", "Rating": null, "Title": "M&M's, Snickers and More Chocolate Candy Bars, Variety Pack, 30-count", "Currency": "$", "Feature": "Kosher Dairy   Full Size   Individually Wrapped   30-Count   Net Weight 53.66oz", "Product Description": "This full size candy bars variety pack features thirty singles size SNICKERS Chocolate Bars, M&M'S Peanut Chocolate Candies, M&M'S Milk Chocolate Candies, TWIX Cookie Bars, and MILKY WAY Candy Bars. Order this box of assorted chocolate bars to make sure you're the hero house on Halloween night or the favorite party guest. Individually wrapped packs also make a great addition to concession stands and fundraisers. Be sure to get these classic favorites for your vending machines.This 30-count variety mix of full size chocolate bars features SNICKERS, TWIX, M&M'S Peanut Chocolate Candies, M&M'S Milk Chocolate Candies and MILKY WAY Chocolate Candy Bars.Contains one (1) 53.66-ounce, 30-count box of full-size, individually wrapped (8) SNICKERS, (7) TWIX, (6) M&M'S Peanut Chocolate Candies, (5) M&M'S Milk Chocolate Candies and (4) MILKY WAY Chocolate Candy BarsShare these full size Candy Bars as a chocolate treat with friends, family or party guestsIndividually wrapped candy makes a perfect addition to concession stands and fundraisersRestock your vending machine with classic candy favoritesThis assorted box of 30 full-size candy bars has a favorite Candy Brand for everyone"}, {"Sub Category": "CELEBRATE THE MOMENT: Share special moments with your family and friends", "Price": " or take a moment just for you. Ferrero chocolates make indulgent treats that are great for unwinding after a long day", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Non-GMO", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$18.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 601 reviews.", "Title": "Ghirardelli Chocolate Squares Premium Chocolate Assortment, 23.8 oz", "Currency": "$", "Feature": "Minimum purchase of 2 bags   Milk Chocolate Caramel   Dark Chocolate Sea Salt Caramel   Milk Chocolate   Dark Chocolate 60% Cacao", "Product Description": "Indulge in a premium chocolate assortment with GHIRARDELLI Premium Assorted Chocolate squares. This bag of individually wrapped candy squares is perfect for gifting, entertaining and personal enjoyment. There's a chocolate in this collection for everyone, whether you crave rich, indulgent milk chocolate, slow-melting dark chocolate, or luscious caramel. Each bag of GHIRARDELLI squares includes a variety of best selling flavors, including Milk Chocolate Caramel, Dark Chocolate Sea Salt Caramel, Milk Chocolate, and Dark Chocolate 60% Cacao. GHIRARDELLI chocolate squares are individually wrapped, making them ideal to tuck in purses, bags and desk drawers for an afternoon pick-me-up. Committed to ultimate quality from bean to bar, GHIRARDELLI chocolate is crafted with care using high quality ingredients for a smooth, delectable treat. GHIRARDELLI Makes Life a Bite Better. In addition to Premium Assorted Chocolate squares, GHIRARDELLI squares are available in other delectable flavors, including Dark Chocolate Mint, White Chocolate Caramel and more. All GHIRARDELLI chocolate is sustainably sourced, ensuring the highest quality from bean to final product.Minimum purchase of 2 bagsMust purchase in multiples of 2One (1) 23.8 oz bag of GHIRARDELLI Premium Assorted Chocolate squares, Chocolate AssortmentVariety of premium assorted chocolates includes Milk Chocolate Caramel, Dark Chocolate Sea Salt Caramel, Milk Chocolate, and Dark Chocolate 60% Cacao Ideal chocolate candy squares for gifting, entertaining and personal enjoymentIndividually wrapped chocolate squares are a perfectly sized indulgent treatGHIRARDELLI squares are crafted with care using high quality ingredientsChocolate squares are certified kosher"}, {"Sub Category": "Candy", "Price": "$54.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 228 reviews.", "Title": "Godiva Masterpieces Assortment of Legendary Milk Chocolate 14.9 oz 4-Pack", "Currency": "$", "Feature": "Milk Chocolate Caramel Lion of Belgium   Milk Chocolate Hazelnut Oyster   Milk Chocolate Bliss   Individually Wrapped   14.9 oz 4-pack", "Product Description": "Introducing Godiva Masterpieces - Godiva\u2019s most exquisite chocolates now available in delightful individually wrapped mini chocolates, perfect to enjoy anytime. Each Masterpiece is crafted in the shape of a signature chocolate and filled with smooth and creamy fillings that melt in your mouth.This Masterpieces Assortment includes our Milk Chocolate Caramel Lion of Belgium with a smooth caramel filling, Milk Chocolate Hazelnut Oyster with a creamy hazelnut praline filling, and Milk Chocolate Bliss with a creamy milk chocolate filling. This variety of signature pieces offers the best of Godiva chocolate, made to savor every day.Includes:Godiva Masterpieces Assort of Legendary Milk Chocolate14.9 oz 4-Pack Milk Chocolate Caramel Lion of BelgiumMilk Chocolate Hazelnut OysterMilk Chocolate BlissIndividually Wrapped Chocolates"}, {"Sub Category": "Candy", "Price": "$44.99 ", "Discount": "No Discount", "Rating": "Rated 2.5 out of 5 stars based on 2 reviews.", "Title": "Chocolate Moonshine Co. Belgian Artisan Black Cherry Bourbon Bark, 20 oz.", "Currency": "$", "Feature": "Belgian Artisan Bark (20 oz.)   Black Cherry Bourbon   Creamy Ganache Center   567-gram gift box", "Product Description": "The perfect gift for those with discerning tastebuds. Only the finest quality ingredients will do for something this stunning! Beautifully hand-crafted Belgian Chocolate designed in luxurious layers. Each delicious layer sets the flavor notes of the previous layer into a different stratosphere for your taste buds to enjoy!   Size: 567-gram gift box! Full of Color, Full of Flavor."}, {"Sub Category": "What\u2019s in it: Beautiful", "Price": " handmade Belgian Artisan Chocolate Truffle Bark", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "ADA accepted\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Haribo Gummy Bears", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 Pieces of MIDNIGHT SWIRL - Velvety ganache made with 85% chocolate in a dark chocolate shell.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "ORANGE CRESCENT - Dark chocolate with orange", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Strawberry and Mint", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Good source of Vitamin C", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "Ice Breakers Cube Peppermint Gum, 40 pieces, 4-count", "Currency": "$", "Feature": "Sugar Free   40-pieces   Natural & Artifical Flavor   30% fewer calories than sugared gum   ADA accepted", "Product Description": "40 pieces per pack4-count160 pieces totalPeppermint"}, {"Sub Category": "Candy", "Price": "$17.99 ", "Discount": "No Discount", "Rating": null, "Title": "Original Gourmet Lollipops, Variety, 50-count", "Currency": "$", "Feature": "Gluten Free   Peanut Free   Naturally and Artificially Flavored   Net Weight 54.7oz", "Product Description": "Original Gourmet LollipopsVariety: Cotton Candy, Wild Cherry, Bubble Gum, Watermelon, Banana Split, Blueberries & Cream, Creamsicle"}, {"Sub Category": "Candy", "Price": "$18.99 ", "Discount": "No Discount", "Rating": null, "Title": "M&M's Milk Chocolate Candy, 62 oz Jar", "Currency": "$", "Feature": "Resealable Jar   Bulk Assorted M&M'S Milk Chocolate Candies   Party-size Jar   62 oz container", "Product Description": "M&M'S Milk Chocolate Candies"}, {"Sub Category": "Strawberry", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$44.99 ", "Discount": "No Discount", "Rating": null, "Title": "Twix Share Size Chocolate Caramel Cookie Candy Bar, 3.02 oz, 24-count", "Currency": "$", "Feature": "4 To Go bars   Keep in cool, dry, place   3.35 oz   24-count", "Product Description": "Twix Candy Bar4 To Go bars3.35 oz24-count"}, {"Sub Category": "Candy", "Price": "$8.99 ", "Discount": "No Discount", "Rating": null, "Title": "E.Frutti Gummi Hot Dog, 0.35 oz, 60-count", "Currency": "$", "Feature": "Fat Free Food   Gluten Free   Nut Free   Individually packaged   60-count", "Product Description": "Gummi Hot DogIndividually packaged0.35 oz pack60-count"}, {"Sub Category": "Candy", "Price": "$38.99 ", "Discount": "No Discount", "Rating": null, "Title": "Skittles Tropical Full Size Chewy Candy, 2.17 oz, 36-count", "Currency": "$", "Feature": "Kiwi-Lime, Mango-Peach, Passion Punch, Strawberry-Orange-Banana and Strawberry-Watermelon   Tropical Flavored Skittles   2.17 oz pack   36-count   Net Weight 4lb", "Product Description": "Skittles Tropical - Kiwi-Lime, Mango-Peach, Passion Punch, Strawberry-Orange-Banana and Strawberry-Watermelon 2.17 oz pack 36-count"}, {"Sub Category": "Made from a French recipe   Packed in 4 giftable tin boxes   All Natural", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$19.99 ", "Discount": "No Discount", "Rating": null, "Title": "Godiva Premium Assorted Chocolates, 27-count", "Currency": "$", "Feature": "Dark Chocolate, Milk Chocolate, and White Chocolate   Variety fillings   1 tray with 27 pieces   11.3 total oz", "Product Description": "Godiva Belgium Assorted Chocolates"}, {"Sub Category": "Candy", "Price": "$39.99 ", "Discount": "No Discount", "Rating": null, "Title": "Crunch Candy Bar, 1.55 oz, 36-count ", "Currency": "$", "Feature": "Kosher   36 Full Size candy bars   100% milk chocolate and crisped rice   Gluten Free   An irresistible treat that can't be beat", "Product Description": "It's time to get your sweet treat on with CRUNCH Full Size candy bars. These perfectly full sized, crispy chocolate bars are just for you and definitely big on taste. Packed with creamy 100% milk chocolate and crisped rice, these individually wrapped candy treats are easy to snack on and enjoy. Take these irresistible chocolate bars anywhere and share with anyone. They're great for home or the office, school lunch boxes, parties, get-togethers, dessert or a movie night sweet treat. CRUNCH is made with no artificial flavors or colors. CRUNCH Full Size candy bars are the treat everyone knows and loves.   UNWRAP DELICIOUSNESS: CRUNCH delivers the taste you know and love with this box of 36 individually wrapped, full sized, milk chocolate candy bars"}, {"Sub Category": "Candy", "Price": "$26.99 ", "Discount": "No Discount", "Rating": null, "Title": "Payday Peanut Caramel Bar, 1.85 oz, 24-count", "Currency": "$", "Feature": "Kosher   Gluten Free   24-count   1.85 oz bars   Total Net Weight: 12.4 oz", "Product Description": "Salty peanuts and sweet caramel24-count1.85 oz barsTotal Net Weight: 12.4 oz"}, {"Sub Category": "UNIQUELY DELICIOUS: Smooth milk chocolate with dark chocolate drizzle covers a crispy wafer and pockets of creamy hazelnut filling", "Price": " delivering sensational taste with every bite", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$49.99 ", "Discount": "No Discount", "Rating": null, "Title": "M&M's Chocolate Candy, Peanut, Full Size, 1.74 oz, 48-count", "Currency": "$", "Feature": "Contains 48 full size pouches of M&M'S Milk Chocolate Peanut Candy   Made with peanuts and milk chocolate   Stock vending machines and concessions stands   Full-size packs are perfect for sharing   Bring colorful fun to everyday celebrations", "Product Description": "Celebrate everyday moments with M&M'S Peanut Chocolate Candy. Made with real milk chocolate, roasted peanuts and coated in a colorful candy shell, M&M'S Candy bite-size chocolates bring delicious fun to game day, the work day or any day. With 48 individual full size pouches in every box, this bulk candy package is great for stocking vending machines, concession stands and the office pantry. There's no end to the fun you can have with M&M'S Peanut Chocolate Candy.Celebrate everyday moments with the delicious, colorful fun of Peanut M&M'S Candy. These singles size pouches are great for game day or as a midday treat.Contains 48 full size pouches of M&M'S Milk Chocolate Peanut CandyMade with peanuts and milk chocolateStock vending machines and concessions standsFull-size packs are perfect for sharingBring colorful fun to everyday celebrations"}, {"Sub Category": "Gummy clusters very berry has a taste that can\u2019t be beat", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$21.99 ", "Discount": "No Discount", "Rating": null, "Title": "Hawaiian Host Aloha Gems, Milk Chocolate Covered Macadamia Nuts, 8 oz. Box, 3-Count", "Currency": "$", "Feature": "Kosher   Keep Cool and Dry   3 Boxes   14 Pieces per 8 oz Box   Net Weight 24 oz", "Product Description": "Aloha Gems"}, {"Sub Category": "Candy", "Price": "$14.49 ", "Discount": "No Discount", "Rating": null, "Title": "5 Gum Sugar Free Chewing Gum, Peppermint Cobalt, 15 Sticks, 10-Count", "Currency": "$", "Feature": "Peppermint Cobalt   Sugar Free Gum   Natural and Artificial Flavors   15 Sticks Per Pack   10-Count", "Product Description": "Cool burst of refreshing peppermint flavor with every bite"}, {"Sub Category": "Net Weight 36 oz\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$13.99 ", "Discount": "No Discount", "Rating": null, "Title": "Hi-Chew Fruit Chews, Variety, 1.76 oz, 15-count", "Currency": "$", "Feature": "Variety pack: 3-Cherry, 3-Grape, 3-Green Apple, 3-Mango, 3-Strawberry   Gluten free   Fruit Chews   1.76 oz   15-count", "Product Description": "Fruit ChewsVariety pack: 3-Cherry, 3-Grape, 3-Green Apple, 3-Mango, 3-Strawberry1.76 oz15-count"}, {"Sub Category": "chocolate and topped with a fluffy", "Price": " all-natural marshmallow. No need to sip this treat; you can gulp it down!", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Includes:   3.25 oz 8-count", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$36.99 ", "Discount": "No Discount", "Rating": null, "Title": "Starburst Chewy Candy, Original, Full Size, 2.07 oz, 36-count", "Currency": "$", "Feature": "STARBURST Can Be Enjoyed Alone or as a Burst of Juicy Flavor Added to Your Favorite Recipes   Add an Unexplainably Juicy Treat to Your Party, Around Your House\u2014or Stash a Few for Snacking Later   The Strawberry, Cherry, Orange, and Lemon Flavors That Started It All   Gluten-Free, Fruit-Flavored Candy Chews With a Soft, Chewy Texture", "Product Description": "Fruit ChewsOriginal flavors - Cherry, Lemon, Orange and Strawberry2.07 oz pack36-count   Experience the EXTRAordinary juiciness of STARBURST Fruit Chews. With 36 singles size packs of STARBURST Original Candy in every box, there's plenty of fruity, chewy fun for everyone. Featuring the original STARBURST Candy flavors that started it all: strawberry, cherry, orange and lemon flavors. This bulk candy package is great for stocking concession stands, vending machines or the office pantry. From STARBURST candies right out of the wrapper to STARBURST recipes and decorations, there are endless ways to add a burst of juicy flavor every day."}, {"Sub Category": "Approximately 249 pieces", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "36-count   This bulk chocolate candy box includes 36 individually wrapped Full Size MILKY WAY chocolate candy bars. Smooth nougat", "Price": " creamy caramel", "Discount": " and rich milk chocolate; that's what some might call the MILKY WAY trifecta. A treat this delectable is too good not to share. This bulk candy box featuring 36 MILKY WAY chocolate candy bars makes it easy to share delicious chocolate and caramel with friends", "Rating": " family", "Title": " and coworkers. Individually wrapped bulk Full Size candy bars are ideal for keeping the pantry stocked for movie night with the family and small celebrations with friends. These caramel-filled candy bars make great on-the-go treats", "Currency": " pack them in lunches", "Feature": " or take them along on family road trips to enjoy caramel chocolate candy on the road. MILKY WAY bulk Full Size candy bars are a tasty way to share your love of chocolate candy with friends and family. Buying candy bars in bulk ensures you have plenty of chocolate on hand for filling candy bags and candy gift baskets. Be the best house on the block this Halloween when you hand out Full Size MILKY WAY chocolate candy to Trick-or-Treaters Full Size candy bars make great stocking stuffer candy gifts and Easter basket candy. This 36-count bulk candy package is great for stocking vending machines", "Product Description": " concession stands"}, {"Sub Category": "Candy", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "Mentos, Mint, 1.32 oz, 15-count", "Currency": "$", "Feature": "Mentos   Chewy Mints   15-count   1.32 oz roll   19.8 oz. Total Net Weight", "Product Description": "15-count1.32 oz rollMentosChewy Mints"}, {"Sub Category": "1.92 oz bar", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "What classic dynamic duo is delicious and goes great with a glass of milk?", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 4.5 oz. Chocolate Peanut Butter", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 4.5 oz. Double Dark Chocolate Sea Salt", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$42.99 ", "Discount": "No Discount", "Rating": "Rated 3.8 out of 5 stars based on 12 reviews.", "Title": "A'cappella Bark Ensemble, 3.4 oz, 8-count", "Currency": "$", "Feature": "8   3.4 oz.   Irish Cream Mud Pie   Candy Bar   Berry Shortcake   Hand-Crafted", "Product Description": "\u201cMMMM OOOH YUMM!\u201d"}, {"Sub Category": "For too long", "Price": " chocolate has gone down the path of one-note flavors and flat innovation. At A\u2019cappella", "Discount": " we let the rhythm of our imagination guide the creation of our confections.", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 3.4 oz. Irish Cream Mud Pie", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$26.99 ", "Discount": "No Discount", "Rating": null, "Title": "Altoids Breath Mints, Hard Peppermint Candy, 1.76 oz, 12-count", "Currency": "$", "Feature": "The original celebrated curiously strong mints   12-count   1.76 oz. tins", "Product Description": "12-count1.76 oz. tins"}, {"Sub Category": "Candy", "Price": "$15.49 ", "Discount": "No Discount", "Rating": null, "Title": "Red Vines Twists, Original Red Licorice Candy, 4 oz, 15-count", "Currency": "$", "Feature": "Grab a 4 oz Bag of Red Vines Licorice for a Sweet Treat on Movie Night   Perfect for Parties, Concession Stands, or as an Every Day Snack   This Soft & Chewy Red Licorice Pairs with Salty Snacks like Popcorn, and Trail Mix   Share these Licorice Twists as a Sweet Treat with Family, Friends, or Party Guests", "Product Description": "The American Licorice Company has made Red Vines Original Red Licorice using the same unique red licorice recipe and small batch process for generations. Made with only 5 Red Vines licorice ingredients, these twists are a perfect snack to satisfy a sweet craving. Reward yourself with these soft & chewy vintage movie theater treats you can now enjoy from the comfort of your home! While this licorice candy does contain sugar you can still feel good about snacking because it is fat free, low in sodium, and Kosher & Halal certified. Each easy open 4 oz bag holds 4 servings of licorice straws and only 100 calories per serving. This box contains 15 packs of 4 oz Red Vines Licorice bags that are ready to be resold. The container can be made into a convenient display box, perfect for concession stands, convenience stores and parties. Stock up and save on all Red Vines!   Original Licorice Twists"}, {"Sub Category": "Kosher\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Crisp wafers in milk chocolate", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "MINTS ON-THE-GO \u2013 The portable pack fits perfectly in your pocket or purse\u2014great for on-the-go sharing and refreshment", "Price": " like mints for after coffee\"", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$26.99 ", "Discount": "No Discount", "Rating": null, "Title": "Baby Ruth, 1.9 oz, 24-count", "Currency": "$", "Feature": "Full Size candy bar   1.9 ounces bar   Classic taste of peanuts, caramel and nougat   A great on-the-go treat   No Artificial Flavors or Colors", "Product Description": "It's time to get your sweet treat on with Baby Ruth Full Size candy bars. These peanuty, chocolatey and perfectly sized bars are just for you and big on taste. Packed with dry roasted peanuts, rich caramel and smooth nougat, these individually wrapped candy treats are easy to snack on and enjoy. Take these irresistible chocolate bars anywhere and share with anyone. They're great for home or the office, parties, get-togethers, dessert or a movie night sweet treat. Baby Ruth is made with no artificial flavors or colors. Baby Ruth Full Size candy bars are the treat everyone knows and loves.   UNWRAP DELICIOUSNESS: Baby Ruth delivers the taste you know and love with this peanuty candy bar"}, {"Sub Category": "14.8 oz per bag", "Price": " 4-pack\"", "Discount": "GODIVA Masterpieces \u2013 GODIVA\u2019s most exquisite chocolates now available in delightful individually wrapped mini chocolates, perfect to enjoy anytime.   GODIVA\u2019s Dark Chocolate Ganache Heart is inspired by GODIVA\u2019s most beloved chocolate; the heart-shaped \u2018coeur iconique\u2019. A bold dark chocolate Heart with a luxurious, velvety chocolate ganache filling.   Includes:   Godiva Dark Chocolate Ganache Hearts", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Must purchase in multiples of 2", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$28.99 ", "Discount": "After $6 OFF", "Rating": null, "Title": "Tide Pods HE Laundry Detergent Pods, Spring Meadow, 156-count", "Currency": "$", "Feature": "Spring Meadow   HE Compatible   39 Pods per Bag   4 Bags per Box   156 Total Loads", "Product Description": "Spring Meadow"}, {"Sub Category": "39 Pods per Bag", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "VERSATILITY: Can be used virtually anywhere and fits into tight spaces.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$15.99 ", "Discount": "After $4 OFF", "Rating": null, "Title": "Swiffer Sweeper Heavy Duty Dry Sweeping Cloth Refills, 50-count", "Currency": "$", "Feature": "\"50 Pads   Heavy Duty   10.3\"\" x 7.8\"\"\"", "Product Description": "Swiffer Sweeper Heavy Duty Dry Sweeping Cloths Trap + Lock 2x more dirt, dust, and hair* allowing you to quickly and easily clean all your hard floor surfaces. *vs. multi-surface sweeper dry cloth2x More Trap + Lock of dirt, dust, and hair vs. multi-surface Sweeper dry clothOver 30,000 3D fibers brush into tight spaces gathering dust, dirt, and pet hairGreat on grout and any other floors from tile to finished hardwoodWhen you\u2019re done, just throw that pad, and all its dirt, away"}, {"Sub Category": "Powers Away 48-Hour Stuck on Food in Seconds\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "MULTI-PURPOSE CLEANING WIPES 3X STRONGER THAN A PAPER TOWEL: These disinfecting cleaning wipes are 3x stronger than a paper towel.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleans in cold water", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "6X longer-lasting freshness and odor protection*", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "April Fresh scent", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$54.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 386 reviews.", "Title": "Nellie\u2019s Laundry Starter Pack", "Currency": "$", "Feature": "100-Load Laundry Soda", "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$89.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 3 reviews.", "Title": "Nellie\u2019s Baby Laundry Soda, 500 Loads", "Currency": "$", "Feature": "Unscented   HE Compatible   500 Loads   17.5 Total lbs   Hypoallergenic", "Product Description": "Nellie\u2019s baby laundry soda is your solution to dealing with baby\u2019s unavoidable mishaps. Perfect for babies with sensitive skin. Oxygen brightener hasbeen added for natural brightening, so there\u2019s no need for any additional whiteners. Its stain-fighting power is effective on cloth diapers and removes stubborn baby stains such as milk, baby formula, and spit-up. Most importantly, this plant-based formula is hypoallergenic, fragrance-free, gentle on baby skin, and leaves no residue.   Scent-free"}, {"Sub Category": "127 oz total", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Safe for all washing machines", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Do not unwrap or cut open pacs", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Keep container sealed between uses.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Safe for Teflon(TM)", "Price": " Silverstone(TM)", "Discount": " and Calphalon(R) non-stick cookware", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No measuring", "Price": " no mess", "Discount": " no waste", "Rating": " and carbon light", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Each of the 80 sheets can be split in half along perforation for 160 total loads", "Price": " or use full sheet for 80 heavy loads", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$17.99 ", "Discount": "No Discount", "Rating": null, "Title": "Arm & Hammer Plus OxiClean Max HE Liquid Laundry Detergent, Fresh, 200 Loads, 200 fl oz", "Currency": "$", "Feature": "Fresh   HE Compatible   200 Loads   200 Total fl. oz", "Product Description": "Ultra concentrated"}, {"Sub Category": "Cleaning Supplies", "Price": "$16.99 ", "Discount": "After $5 OFF", "Rating": null, "Title": "All Free & Clear Plus+ HE Liquid Laundry Detergent, 158 loads, 237 fl oz", "Currency": "$", "Feature": "Free & Clear   HE Compatible   158 Loads   237 Total fl oz   Gentle for Sensitive Skin", "Product Description": "100% Free of Perfumes and Dyes"}, {"Sub Category": "Cleaning Supplies", "Price": "$38.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 2060 reviews.", "Title": "ECOS HE Liquid Laundry Detergent, Free & Clear, 210 Loads, 210 fl oz, 2-count", "Currency": "$", "Feature": "Hypoallergenic   Plant Powered   Non-Toxic", "Product Description": "2 - Count210 fl oz, 210 loads (1 fl oz = 1 load)420 total fl oz, 420 total loads (1 fl oz = 1 load)Ingredients:WaterCocamidopropyl Betaine (plant-derived surfactant)Sodium Coco-Sulfate (plant-derived surfactant)Cocamidopropylamine Oxide (plant-derived surfactant)Phenoxyethanol (preservative)Methylisothiazolinone (preservative)Instructions for use:Always follow garment care instructions. Pour one ounce (roughly 1/4 capful) into the dispenser for HE loads. For top loaders, put two ounces (or half a capful) directly into machine before running water. Works beautifully in all water temperatures and is also perfect for colors, whites, and nearly all fabrics, including delicates. For the toughest stains, ECOS has a stain-pretreat function too! Pour a few drops directly on stain, rub it in, and toss your garment right into the wash to get the best results.Warning: Keep safely out of reach of children"}, {"Sub Category": "Cleaning Supplies", "Price": "$20.89 ", "Discount": "No Discount", "Rating": null, "Title": "Cascade Complete Dishwasher Detergent Actionpacs, 90-count", "Currency": "$", "Feature": "47.3 oz   Fresh scent", "Product Description": "90-count#1 recommended brand in North America"}, {"Sub Category": "Standard washer 250 loads", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Biodegradable formula", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "4x grease cutting power   \u200b\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Works in cold water\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Flex-Tech plastic incorporated into the product allows the new Kirkland Signature\u2122 kitchen bag to expand around your trash", "Price": " reducing tears and increasing holding capacity.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$42.99 ", "Discount": "No Discount", "Rating": null, "Title": "O-Cedar EasyWring Spin Mop & Bucket System with 3 Refills", "Currency": "$", "Feature": "Great for Wood, Tile, Laminate, Marble, & Linoleum   Machine Washable Mop Heads   Hands Free Wringing Without Bending", "Product Description": "Achieve a deeper clean with the EasyWring\u2122 Spin Mop & Bucket System. This easy-to-use system features a foot-activated pedal and built-in bucket wringer that allow for hands-free wringing and controlled water release. The machine-washable and reusable microfiber mop heads remove tough dirt and over 99% of bacteria with just water.* Enjoy a truly deep floor cleaning, made easy.Foot-activated pedal and built-in bucket wringer allow for hands-free wringing and controlled water release Multi-purpose microfiber mop removes tough dirt, grime and over 99% of bacteria with just water*Machine-washable microfiber mop head refill is reusable for up to 3 monthsTriangle shaped mop head for easy maneuverability and better corner cleaningSafe for all hard floor surfaces, including hardwood, tile, vinyl and moreSystem includes EasyWring\u2122 bucket, telescopic handle that adjusts to 4.25 ft (51 inches) and 3 extra reusable microfiber mop headsFeatures:Hands-free wringing with foot pedal and built-in bucket wringer Machine-washable and reusable microfiber mop head refillsMicrofiber removes all dirt and over 99% of bacteria with just water*Great for deep cleaning all hard floor surfaces; wood, laminate, marble, linoleumUse & Care:Machine or hand wash mop head. Do not use fabric softeners or bleach. Lay flat to dry. For best floor cleaning results, replace refill every 3 months.Store bucket in dry conditions. Do not expose to excessive sunlight.*Removes, does not kill, over 99% of E. coli and Staph. aureus from pre-finished hardwood flooring and ceramic tile using tap water, as tested at an independent accredited lab."}, {"Sub Category": "Reduces static cling", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Softens & freshens", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Mirrors\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "100% biodegradable active ingredients\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$10.99 ", "Discount": "No Discount", "Rating": null, "Title": "Simple Green All-Purpose Cleaner, 32 fl oz + 140 fl oz Refill", "Currency": "$", "Feature": "1 - 32 fl oz Bottle 1:10 Dillution   1 - 140 fl oz Jug Concentrate   Non-Toxic   Biodegradable Formula", "Product Description": "32 fl oz Bottle 1:10 Dillution140 fl oz Jug Concentrate - Makes (48) 32 fl oz bottles of 1:10 dilution"}, {"Sub Category": "Cleaning Supplies", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 4.4 out of 5 stars based on 19 reviews.", "Title": "Nellie's Dishwasher Nuggets, 150-count", "Currency": "$", "Feature": "Plant-Based Formula   Biodegradable   Septic Safe   Phosphate Free", "Product Description": "Nellie\u2019s dishwasher nuggets combine all the cleaning power of a dish powder in the convenience of a little pre-packaged nugget. Small but mighty, they easily penetrate grease, food particles and more, leaving every plate spotless. This formula is biodegradable, septic safe, and phosphate free. Above all, this powder is a plant-based formula and kind to the environment."}, {"Sub Category": "Cleaning Supplies", "Price": "$18.49 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 403 reviews.", "Title": "Febreze Air Refresher, Variety Pack, 8.8 oz, 4-count", "Currency": "$", "Feature": "Variety Pack   4 Count", "Product Description": "Variety Pack"}, {"Sub Category": "Safe on clothes", "Price": " water-washable upholstery and rugs", "Discount": " grout", "Rating": " bathroom tile", "Title": " patio furniture", "Currency": " and more", "Feature": null, "Product Description": null}, {"Sub Category": "We understand that you care about not only your health but also the world around you. Our products", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Artificial Fragrances or Dyes", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Phthalates", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Sulfates or SLS", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Almond: Purified Water", "Price": " Saponified Coconut Oil", "Discount": " Saponified Olive Oil", "Rating": " Potassium Oleate", "Title": "Vegetable Glycerin", "Currency": " Natural Almond Fragrance", "Feature": " Almond Oil", "Product Description": " Citric Acid"}, {"Sub Category": "Pour Castile soap onto a washcloth", "Price": " sponge", "Discount": " or your hand. Lather and rinse. If using for shaving:lather onto the skin", "Rating": " shave", "Title": " and rinse.\"", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$26.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 827 reviews.", "Title": "Poo-Pourri Toilet Spray, Variety Pack, 3.4 fl oz, 3-count", "Currency": "$", "Feature": "1 - Original Citrus   1 - Bamboo Rain   1 - Cyress Woods   TSA Friendly   Made in the USA", "Product Description": "Spritz the bowl before-you-go and no one else will ever know!   1 - Original Citrus: lemon, bergamot, and lemongrass"}, {"Sub Category": "No Alcohol", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Animal Testing   Castile Liquid Soap Ingredients:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$43.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 355 reviews.", "Title": "Nellie\u2019s Bulk Oxygen Brightener, 8.75 lbs", "Currency": "$", "Feature": "Hypoallergenic   Phosphate Free   Septic Safe", "Product Description": "Nellie\u2019s Oxygen Brightener uses the power of oxygen to penetrate stains, stripping away dirt, odor and grime, and keeps your colors bright and your whites white. our products are phosphate free, hypoallergenic and septic safe.How To Use:Machine wash: Add into wash cycle with Nellie\u2019s Laundry Soda. Small loads \u2013 1 tablespoon; regular loads \u2013 2 tablespoons; large loads \u2013 3 tablespoons. Use 3 tablespoons for very dirty or stained clothing.Pre-soak or hand wash: separate whites from colors. Use only one tablespoon along with Nellie\u2019s Laundry Soda in 10 L (2.6 gallons) of WARM or HOT water. soak for 1/2 hour then rinse thoroughly.General stain removal: create solution using 1 tablespoon per 16 oz (500 ml) of water for upholstery, fabric, kitchen floors, counters, trash cans and all other water washable surfaces. Apply solution to stain, wait 1-5 minutes, scrub with sponge or blot with towel. Rinse thoroughly and allow to dry.Carpet spot remover: create solution using 1 tablespoon per 16 oz (500 ml) of water. Soak up excess liquid before applying solution to stain. Use only enough to cover stain area, wait 1-5 minutes, soak up with white towel. Repeat if necessary. Wring thoroughly with water and blot dry. Vacuum once dry.DO NOT USE: on wool, silk or leather. Not for use on jewelry, latex, paints or wood."}, {"Sub Category": "7 Day odor Control", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Made in USA", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Smart Tie Closure", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Thickness: 1.4 mil   Dimensions: 38\u201d x 51.5\u201d", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$19.99 ", "Discount": "No Discount", "Rating": null, "Title": "Scott Shop Towels, Original Multi-Purpose, Blue, 10-count", "Currency": "$", "Feature": "Absorbs Oil And Grease", "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$26.99 ", "Discount": "No Discount", "Rating": null, "Title": "Unitex 100% Cotton Towel, White, 14 in x 17 in, 52-count", "Currency": "$", "Feature": "100% Cotton Terry Towels   Heavy Weight   Ring Spun   Super Soft", "Product Description": "\"Dimensions: 14\"\" x 17\"\"100% Cotton Terry TowelsRing spunDurable"}, {"Sub Category": "Organic", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Dark roast", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Starbucks French Roast Coffee: With notes of dark caramel and sweet smoke", "Price": " the intense and roasty flavor of Starbucks French Roast coffee is as dark as our dark roasts get", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher   CAUTION: POD IS HOT. ALLOW TO COOL AFTER USE.   PEEL \u2013 Starting at the puncture", "Price": " peel lid and dispose.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Whole Bean", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Medium/Dark Roast", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Medium Roast", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Starbucks Pike Place Roast Coffee: A smooth", "Price": " well-rounded blend of Latin American coffees with subtly rich notes of cocoa and rich praline", "Discount": " it\u2019s perfect for every day", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Ethically Sourced: Starbucks is committed to 100% ethical coffee sourcing in partnership with Conservation International   Keurig", "Price": " K-Cup", "Discount": " and the K logo are trademarks of Keurig Green Mountain", "Rating": " Inc.", "Title": " used with permission. For use with Keurig\u00ae K-Cup\u00ae Brewers.\"", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Whole Bean", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Coffee", "Price": "$42.99 ", "Discount": "No Discount", "Rating": null, "Title": "Starbucks Coffee Veranda Blend Blonde Roast K-Cup, 72-count", "Currency": "$", "Feature": "72 K-Cups   Blonde Roast   Subtle Nuances of Toasted Malt and Baking Chocolate   Compatible with Most K-Cup\u00ae Brewers and Keurig\u00ae 2.0 Brewers", "Product Description": "We\u2019ve spent decades working with coffee farmers throughout Latin America. This blend was inspired by the lightly roasted coffees we\u2019ve sipped together over the years, often enjoyed on a breezy veranda with a view of lush coffee trees. Subtle but flavorful with notes of toasted sweet malt and milk chocolate, it\u2019s an inviting, approachable coffee that mixes beautifully with milk. Nestl\u00e9 uses Starbucks trademarks under license   Features   Premium Coffee In A K-Cup: Starbucks delivers exceptional coffee cup after cup with this 72-count K-Cup pod box of Veranda Blend lightly roasted coffee for Keurig brewers"}, {"Sub Category": "Coffee", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature 100% Colombian Coffee, Dark Roast, 3 lbs", "Currency": "$", "Feature": "100% Columbian Coffee   Dark Roast   Fine Grind   Supremo Bean   Total Net Weight 3lb", "Product Description": "3 lb. Can"}, {"Sub Category": "Roast: Medium", "Price": " Decaffeinated", "Discount": " Balanced and Smooth", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Roasted by Starbucks Coffee Co.\u00ae", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Sourcing with Impact: The coffee you buy can impact the welfare of the people and planet. Peet\u2019s is actively engaged in driving positive impact in communities where our coffees are grown.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "100% Arabica Coffee", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "6 x 10.5oz bags\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Coffee", "Price": "$25.99 ", "Discount": "No Discount", "Rating": null, "Title": "Dunkin\u2019 Donuts Original Blend, 45 oz", "Currency": "$", "Feature": "Kosher   Medium Roast   Ground Coffee   100% Premium Arabica Coffee   Net Weight: 45 oz", "Product Description": "Makes up to 150, 6 fl oz cups"}, {"Sub Category": "11g of Coffee Per Pod", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Coffee", "Price": "$44.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 1664 reviews.", "Title": "Jose\u2019s Vanilla Nut Whole Bean Coffee 3 lb, 2-pack", "Currency": "$", "Feature": "100% Arabica Coffee", "Product Description": null}, {"Sub Category": "Coffee", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "Nestl\u00e9 Coffee-Mate Liquid Creamer, French Vanilla, 180-count", "Currency": "$", "Feature": "French Vanilla   No Refrigeration Needed   180 Single Serve Portions   Kosher (Circle U) D", "Product Description": "180-count.375 fl. oz."}, {"Sub Category": "Kosher certified\"", "Price": "42-count1.75 oz individual packets (no filter) - for use in automatic brewing machineTotal Net Weight: 4.59 lbs.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Allergen Free and Kosher Certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Fueled with Metabolism Boosting Superfoods", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Supports Metabolism & Diet", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Great for Espresso", "Price": " Drip", "Discount": " Pour Over", "Rating": " or any brew method", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Coffee Blend consisting of Central and South American Coffees", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Grown at altitudes ranging from 1500-3000 meters.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Packaged in our Biotre 2.0 bags made with 100% renewable materials.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Coffee", "Price": "$21.99 ", "Discount": "No Discount", "Rating": null, "Title": "Splenda Zero Calorie Sweetener Packets, 1,000-count", "Currency": "$", "Feature": "Zero Calorie Sweetener   Proudly Made in the USA   Tastes Like Sugar   Gluten Free   Suitable for People with Diabetes", "Product Description": "Our Splenda Zero Calorie Sweetener packets taste like sugar with zero calories. Each packet of Splenda provides the same sweetness of two teaspoons of sugar making It the perfect zero calorie sugar alternative for sweetening your coffee, tea, oatmeal, fruit, and more! The Splenda brand is also the number one recommended sweetener brand by doctors and dietitians clinically treating patients and enjoyed by millions each day!   1,000-count"}, {"Sub Category": "100% Arabica Coffee", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Medium Roast Coffee", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Species: Siberian Sturgeon - Acipenser Baerii", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Size: 2 oz Jar (serves 2-4 people)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Consume within 24-48hrs once opened", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Sturgeon are raised steroid and antibiotic free", "Price": " and fed non GMO diet", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Superior quality Malossol Caviar", "Price": " sustainable farmed resource", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Features Eco-Friendly non-Styrofoam packaging   Questions? Feel free to call Plaza De Caviar's friendly customer service for product information only at: 1-888-888-4470. Please call Costco.com customer service for all other inquiries.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Size: 2 oz Jar", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Thermal Black Caviar Tote", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Serves 2-4 people   Questions? Feel free to call Plaza De Caviar's friendly customer service for product information only at: 1-888-888-4470. Please call Costco.com customer service for all other inquiries.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Product of Greece", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Deli", "Price": "$279.99 ", "Discount": "No Discount", "Rating": "Rated 4.4 out of 5 stars based on 348 reviews.", "Title": "Pacific Plaza Golden Osetra Caviar 2 oz, 2-pack", "Currency": "$", "Feature": "Vacuum sealed Caviar jar keeps 60 days unopened   24 - 48 hrs once opened (refrigerated or on ice)   2 qty - 2 oz Vacuum Sealed Jars, Serves 4-8, Grade: Pure Malossol Caviar   Color: Amber to Gold, Size: Medium grain size   Flavor: Clean, Nutty, Brine", "Product Description": "Plaza Caviar has partnered with our friends in Greece to bring this ultra premium caviar to you. Thesauri farm (meaning treasure in Greek) shares our vision of crafting caviar of the highest quality and integrity. A philosophy that is equal parts sustainability and great caviar production. Located near the bay of Amvrakikos this modern facility produces some of the best amber gold Osetra the world has to offer. Rest assured it will compare with the best Caviars on the market, not to mention it will be fresher, healthier and fully sustainable.   Features:   Farmed Golden Osetra Caviar, Product of Greece"}, {"Sub Category": "Features Eco-Friendly non-Styrofoam packaging", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Deli", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 3.9 out of 5 stars based on 151 reviews.", "Title": "Fratelli Beretta Snack Pack, 2.5 oz, 10-pack", "Currency": "$", "Feature": "10/ 2.5oz ON-THE-GO Snack Packs", "Product Description": null}, {"Sub Category": "Gift Messaging Available At Checkout", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Messaging Available At Checkout   Vase Not Included", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Due to the perishable nature of this item", "Price": " orders do NOT ship Friday through Monday. Orders only arrive Tuesday through Friday.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Floral", "Price": "$54.99through-$59.99", "Discount": "No Discount", "Rating": "Rated 4.2 out of 5 stars based on 1620 reviews.", "Title": "Inspire Floral Arrangement", "Currency": "$", "Feature": "Farm Fresh Flowers   Pick Your Arrival Date at Checkout   Gift Messaging Available at Checkout   Warning: Not for Human or Animal Consumption", "Product Description": "Let this great combination of flowers, colors and texture be your source of inspiration. Stems Include: Pin Cushions, Roses, Disbuds, Snapdragons, Carnations, Ruscus, Poms and ParvifoliaHow to OrderEvery attempt will be made to deliver your floral order on your preferred arrival date, however, your order may arrive one day before or after your selected date.Pick your arrival date from the calendar during checkout. Arrival dates are based on the farm\u2019s availability.Due to the perishable nature of this item, orders do NOT ship Friday through Monday. Orders only arrive Tuesday through Friday.You can choose your arrival date from the calendar during checkout.Delivery exclusions apply, see calendar at checkout.Need Help?Email: costco@vistaflor.comPhone: 888-620-8895 (8:00AM \u2013 8:00PM EST M-F, 8:00AM \u2013 5:00PM EST SAT)Suggestions:Tell them how you feel! Gift messaging available during the checkout process. If you want gift messages on multiple orders, individual orders need to be placed.Are your flowers for an event? Many of our flowers ship in bud form. We suggest ordering your flowers to arrive 2-3 days before your event to allow them to bloom.Did your flowers arrive looking thirsty? No worries! Just follow the included care and handling instructions to properly hydrate your flowers. After a fresh drink of water, your flowers will blossom and look more full. Flowers pictured on the site are taken after three days in water."}, {"Sub Category": "We are here to help! You can reach us directly at the contact information below. For cancellations or rescheduling", "Price": " please contact us within 48 hours of placing order. For overnight deliveries", "Discount": " orders cannot be cancelled.   Email: support@flowernet.com", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Phone: 877-285-1256 7:00AM \u2013 3:00PM (PST)", "Price": " M-F   Suggestions:", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Messaging Available At Checkout   Vase Not Included", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Pick your arrival date from the calendar during checkout. Arrival dates are based on the farm\u2019s availability.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Four 6ft. rolls in a box", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Phone: 855-848-9817 (7:00AM - 3:00PM PST", "Price": " M-F)   SUGGESTIONS", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Keep your flowers in a location free of direct sunlight and drafts.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Floral", "Price": "$49.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 3616 reviews.", "Title": "50-stem Hot Pink Roses", "Currency": "$", "Feature": "Pick Your Arrival Date At Checkout   Gift Messaging Available At Checkout   Vase Not Included   Warning: Not For Human or Animal Consumption", "Product Description": "Our stunning Rainforest Alliance Certified roses are hand-picked from our South American farms. While we pride ourselves in providing the highest quality flowers, we are also socially responsible - protecting the environment and the farm employees in the process. All of our roses are made to impress with larger, bolder, and more vibrant colors. We put our heart into every stem we grow. Each box contains 2 bunches of 25 stems, wrapped in corrugate sleeves for protection during shipping. Vase not included.How to Order:Every attempt will be made to deliver your floral order on your preferred arrival date, however, your order may arrive one day before or after your selected date.Pick your arrival date from the calendar during checkout. Arrival dates are based on the farm\u2019s availability.Due to the perishable nature of this item, orders do NOT ship Friday through Monday. Orders only arrive Tuesday through FridayNext day orders must be placed placed prior to 11:00 am PST Monday through Thursday, in order for them to arrive next dayYou can choose your arrival date from the calendar during checkout.Delivery exclusions apply, see calendar at checkout.Need Help?We are here to help! You can reach us directly at the contact information below. For cancellations or rescheduling, please contact us within 48 hours of placing order. For overnight deliveries, orders cannot be cancelled.Email: support@flowernet.comPhone: 877-285-1256 7:00AM \u2013 3:00PM (PST), M-FSuggestions:Tell them how you feel! Gift messaging available during the checkout process. If you want gift messages on multiple orders, individual orders need to be placed.Are your flowers for an event? Many of our flowers ship in bud form. We suggest ordering your flowers to arrive 2-3 days before your event to allow them to bloom.Did your flowers arrive looking thirsty? No worries! Just follow the included care and handling instructions to properly hydrate your flowers. After a fresh drink of water, your flowers will blossom and look more full. Flowers pictured on the site are taken after three days in water."}, {"Sub Category": "Delivery exclusions apply", "Price": " see calendar at checkout.   NEED HELP?   We are here to help! You can reach us directly at the contact information below. For cancellations or rescheduling", "Discount": " please contact us within 48 hours of placing order. For overnight deliveries", "Rating": " orders cannot be cancelled.   Email:costco@cfgreens.com", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Warning: Not For Human or Animal Consumption\"", "Price": "A traditional flower, affordable and long-lasting. Alstroemerias are a great option to decorate an event or to enhance any room. Our wholesale Alstroemerias come fresh from the farm and are available for Next Business Day delivery. They can also be pre-ordered for a future arrival date. This bulk pack includes 80 stems of Alstroemeria, perfect for businesses, restaurants, hotels, banquet halls, reception areas, doctor's offices, event planners, decorators, caterers and fundraising.How to Order:Every attempt will be made to deliver your floral order on your preferred arrival date, however, your order may arrive one day before or after your selected dateNext day orders must be placed placed prior to 11:00 am PST Monday through Thursday, in order for them to arrive next day.Due to the perishable nature of this item, orders do NOT ship Friday through Monday. Orders only arrive Tuesday through Friday. Need Help?For answers to frequently asked questions, please enter the following URL into your search bar: www.flowernet.comWe are here to help! You can reach us directly at the contact information below. For cancellations or rescheduling, please contact us within 48 hours of placing order. For overnight deliveries, orders cannot be cancelled.Email: support@flowernet.comPhone: 877-285-1256 7:00AM \u2013 3:00PM (PST), M-FSuggestions:Tell them how you feel! Gift messaging available during the checkout process. If you want gift messages on multiple orders, individual orders need to be placed.Are your flowers for an event? Many of our flowers ship in bud form. We suggest ordering your flowers to arrive 2-3 days before your event to allow them to bloom.Did your flowers arrive looking thirsty? No worries! Just follow the included care and handling instructions to properly hydrate your flowers. After a fresh drink of water, your flowers will blossom and look more full. Flowers pictured on the site are taken after three days in water.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Floral", "Price": "$69.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 921 reviews.", "Title": "60-stem Gerberas", "Currency": "$", "Feature": "60 Stems   Available in Four Colors   Pick Your Arrival Date at Checkout   Gift Messaging Available at Checkout   Warning: Not for Human or Animal Consumption", "Product Description": "Gerberas are great flowers for adding color to any room. They are the most popular florist flowers, they are a classic symbol of beauty and cheerfulness. Our wholesale Gerberas come fresh from the farm and are available for pre-orders for a future arrival date. This bulk pack includes 60 stems of Gerberas, perfect for businesses, restaurants, hotels, banquet halls, reception areas, doctor's offices, event planners, decorators, caterers and fundraising.   Available in four colors:   White"}, {"Sub Category": "Use flower food packet provided.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Flowers will arrive in bud form and will fully bloom in 2 or 3 days.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Phone: 855-848-9817 (7:00AM - 3:00PM PST", "Price": " M-F)   SUGGESTIONS:", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Every attempt will be made to deliver your floral order on your preferred arrival date; however", "Price": " your order may arrive one day before or after your selected date.   Pick your arrival date from the calendar during checkout. Arrival dates are based on the farm\u2019s availability.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Floral", "Price": "$84.99through-$219.99", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 310 reviews.", "Title": "Wedding Variety Collection", "Currency": "$", "Feature": "Pre-Order Months in Advance   6-Piece or 10-Piece Collections Available   Pick Your Arrival Date at Checkout   Flowers, Ribbon, & Signage Not Included   Warning: Not for Human or Animal Consumption", "Product Description": "6-piece Candle Rings Includes:"}, {"Sub Category": "\u2022 Four (4) 12\"\" wedding candle rings made with fresh Huckleberry and Salal", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "\u2022 For Monday events", "Price": " please choose delivery for Friday", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 Centerpiece (vases not included) 6 Roses", "Price": " 5 Minicalla", "Discount": " 3 Mini Hydrangea", "Rating": " 3 Snapdragon", "Title": " 3 Spray Roses", "Currency": " 3 Carnation", "Feature": " 4 Hypericum", "Product Description": " 3 Minicarnation"}, {"Sub Category": "Delivery exclusions apply", "Price": " see calendar at checkout.   Are your flowers for an event? Many of our flowers ship in bud form. We suggest ordering your flowers to arrive 2 days before your event to allow them to bloom", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 Bridesmaid Bouquets - 10 Roses", "Price": " 1 Hydrangea", "Discount": " 8 Carnation", "Rating": " 4 Hypericum", "Title": " 4 Parvifolia", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "3 Boutonnieres - 1 Rose", "Price": " 1 Hypericum", "Discount": "1 Parvifolia", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "California Dried Yellow Peaches (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Fruit & Nut Medley (Almonds r/s (California)", "Price": " Cashews r/s (Product of Brazil", "Discount": " Vietnam", "Rating": " and/or India", "Title": " processed in US)", "Currency": " Jumbo Golden Raisins (California)", "Feature": " Cranberries (US)", "Product Description": null}, {"Sub Category": "Sturgeon are raised steroid and antibiotic free", "Price": " and fed non GMO diet", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "0.80 oz. Black Forest Organic Gummy Bears 6 qty", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "0.65 oz. Skinny Pop 100 Calorie Popcorn Snack 3 qty", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1.00 oz. Popcorners Popped-Corn Snack White Cheddar 3 qty", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$49.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 850 reviews.", "Title": "Isabelle Pineapple Cakes 27.1 oz, 3-count", "Currency": "$", "Feature": "16 Individually Wrapped soft buttery Cakes filled with Sweet Pineapple Taste", "Product Description": "Pineapple are considered symbols of fortune, prosperity and abundance in Asian cultures making Isabelle Pineapple Cakes specially popular for gift-giving during special occasions and holidays. Considered a festive treat, these authentic Taiwanese pastries are soft, buttery, and filled with rich and sweet pineapple taste.   Isabelle Pineapple Cakes are the perfect dessert items and make lovely accompaniments to tea or coffee. Each pineapple cake is individually wrapped for convenience thus allowing the recipient to enjoy these melt-in-your mouth pastries long after the box is opened.   Includes:   27.1 oz, 3-count"}, {"Sub Category": "POP IT: The collapsible popcorn bowl provides the immediate satisfaction of microwave popcorn in an eco-friendly", "Price": " waste-free format. Holds over 9 cups of popped popcorn. Food-safe silicone and plastic", "Discount": " dishwasher and microwave safe", "Rating": " BPA free", "Title": " collapses to store 7.5\u201dD x 2\u201dH", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 2.50 oz. Twizzlers Strawberry Licorice", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Rendered Duck Fat (7oz)\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1.00 oz Brownie Brittle 4 qty\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 60 GBlack Truffle Balsamic Glaze (Italy)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher   Handmade in Dubai\"", "Price": "Enjoy a Mediterranean authentic recipe of a crisp and sweet Baklava pastries made with layers of phyllo dough filled with handpicked pistachio & cashew nuts and drizzled with rich Honey. Our assortment includes 6 types of gourmet handmade Baklava presented in an elegant rigid box suitable for gifting, special occasions or sharing with friends & guests. Our Ingredients are all Natural and has no artificial flavours, no preservatives and no colourings. Hand made in Dubai using the best of the Levant\u2019s and Mediterranean authentic Baklava recipes.Includes:Authentic recipe made with Honey Contains two symmetrical Baklava BoxesNet weight of each Baklava Box is 1.98 lbBundle Net weight is 3.96 lbHand made in DubaiKosherStorage Conditions: Store in Cool & Dry Place away from any source of heatFor freshness, refrigerate after opening and consume within two weeks Allergens Warning: Contains Wheat, Milk, Cashew, Pistachio Made in a factory that uses Soy, Tree Nut (Almond, Hazelnut, pecan, Macadamia & walnuts), peanut, egg, sesame ingredients Ingredients: Sugar, Wheat Flour, Ghee (from palm oil), Water, Cashew Nut, Corn Starch, Ghee (Butter from cow\u2019s milk), Glucose, Natural Honey, Pistachio, Salet, Dry Whole Milk, Cinnamon Powder.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$99.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 119 reviews.", "Title": "The Fruit Company's Savory Charcuterie Box", "Currency": "$", "Feature": "Pears", "Product Description": null}, {"Sub Category": "Crackers and Nuts", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Includes:   3 Green Anjou Pears (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Honeycrisp Apple (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Pink Lady Apple (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Granny Smith Apples (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Bamboo & Slate Charcuterie Board (China)\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1.20 oz Nature\u2019s Garden Healthy Snack Mix Variety", "Price": " 3 qty", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "0.90 oz Welch\u2019s Mixed Fruits Snacks", "Price": " 8 qty", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 Vanilla Pear (white tea)   SINGLE STEEPS\u00ae LOTUS", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Includes:   3 Green AnjouPears (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "4.90 oz. Godiva Masterpiece Dark Chocolate Ganache Hearts (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "6 oz. Pumpkin Seed Brittle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Cosmic Crisp Apple (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$149.99 ", "Discount": "No Discount", "Rating": "Rated 5 out of 5 stars based on 3 reviews.", "Title": "Jacques Torres Assorted Chocolate Large Hat Box", "Currency": "$", "Feature": "\"Champagne Truffles   Dark Chocolate Almonds   Assorted Bonbons   Chocolate Chip Cookies and more   12\"\" W x 6\"\" H\"", "Product Description": "\"Master Pastry Chef and Chocolatier and thefeatured Head Judge on the internationally successful series \"\"Nailed it!\"\" on Netflix"}, {"Sub Category": "1 \u00bd lbs (2 - 12 oz packs) heritage applewood smoked bacon", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "12 - 1.50 oz. Pink Round with Sprinkles Buttercream Frosted Cookie   Gift Dimensions (LxWxH): 11.50\"\" x 7.00\"\" x 4.25\"\"\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Indian Tandoori - .71 oz.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "8 vials of The Spice Route", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "5.60 oz. Godiva Chocolatier Cr\u00e8me Brulee Dessert Truffle (16 pc) (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "5-High Paper Box Tower", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "16.00 oz Coastal MorningCoffee", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "14.37 oz Traditional Scone Mix", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "The classic blueberry muffin is brought to new heights with our Blueberry Muffin Mix. These muffins are easy-to-make with just a few common pantry items", "Price": " are full of blueberries and are sure to start your day off right!   Organic Wild Maine Blueberry Jam", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Made with real cream and butter", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Get Well Soon (Red)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$54.99 ", "Discount": "No Discount", "Rating": "Rated 4.3 out of 5 stars based on 119 reviews.", "Title": "Heaton Pecans Roasted & Salted Pecans Tin 2.5 lbs", "Currency": "$", "Feature": "Roasted & Salted Pecans   2.5 lbs   Homemade in the Mississippi Delta", "Product Description": "Heaton Pecans are home grown in the Mississippi Delta and harvested each year from our 40+ year-old orchard."}, {"Sub Category": "Gift Baskets", "Price": "$199.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 261 reviews.", "Title": "Tsar Nicoulai Estate Classic White Sturgeon Caviar 2 oz, 3-pack", "Currency": "$", "Feature": "Vacuum sealed Caviar jar keeps 60 days unopened   24 - 48 hrs once opened (refrigerated or on ice)   3 qty, 2 oz sealed containers (6oz Total)   Features Caviar Fresh Tag, Pure Malossol Caviar   Eco Certified Sturgeon Farm", "Product Description": "This product is a great entry into sustainable domestic caviar, crafted at our Eco Certified sturgeon farm in Northern California. Eco Certification ensures the fish are fed and cared for in a way that is equal parts good for the sturgeon and the caviar quality. Our Classic caviar is made from farming our native White Sturgeon species. It has a medium sized bead with a bold jet-black color, soft texture and a clean buttery briny finish. Garnish Classic caviar on a variety of dishes like deviled eggs, seafood bisque, creamed vegetable soup or freshly fried potato chips with a homemade onion dip. Grab some California Sparkling Wine to make the perfect domestic paring.   Ingredients: Farmed White Sturgeon Roe and fine Sea Salt   Allergens: Fish, Sturgeon   Features:   Produced by Tsar Nicoulai Sturgeon farm, Wilton California"}, {"Sub Category": "Perfect for any holiday\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Weight: 2 lbs 14 oz per cake", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Iconic keepsake tin included   Important Handling Instructions:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$169.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 268 reviews.", "Title": "Plaza Golden Osetra 2 oz Caviar Gift Set", "Currency": "$", "Feature": "Vacuum sealed Caviar jar keeps 60 days unopened   24 - 48 hrs once opened (refrigerated or on ice)   2 oz Jar, Serves 2-4   Packaged With a Thermal Caviar Tote   Color: Amber to Gold, Medium to Large", "Product Description": "This gift pack features everything you need to indulge your senses, delicious caviar, blini, creme fraiche, and a pearl spoon to help you serve in style. Plaza Caviar has partnered with our friends in Greece to bring this delicious caviar to you. Thesauri farm (meaning treasure in Greek) shares our vision of crafting caviar of the highest quality and integrity. A philosophy that is equal parts sustainability and great caviar production. Located near the bay of Amvrakikos this modern facility produces some of the best amber gold Osetra the world has to offer. Rest assured it will compare with the best Caviars on the market, not to mention it will be fresher, healthier, and responsibly farmed.   \u2022 Farmed Golden Osetra Caviar"}, {"Sub Category": "Gift Baskets", "Price": "$69.99 ", "Discount": "No Discount", "Rating": "Rated 5 out of 5 stars based on 1 reviews.", "Title": "TRE Olive Merenda Gift Box", "Currency": "$", "Feature": "TRE Olive Extra Virgin Olive Oil: 16.9oz tin   TRE Olive Riserva Balsamic Vinegar: 3.4oz bottle   TRE Olive Calabrian Olives: 9.8oz jar   Salt & Twine Dry Aged Salami \u2013 Hot Calabrian: 5oz   And more", "Product Description": "The Merenda Gift Box will impress any food lover! These high-quality specialty items were carefully selected to create the perfect gift for any occasion. Your friends & family will love it!"}, {"Sub Category": "Salt & Twine Dry Aged Salami \u2013 Hot Calabrian: 5oz", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Wine Chips \u2013 Asiago Flavored: 1oz", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "12 Birthday Cake Cake Balls", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "8.00 oz. The Popcorn Factory Butter Popcorn - The popcorn classic with freshly popped kernels and buttery deliciousness.   Individual Dimensions (LxWxH): 10.44\"\" x 10.44\"\" x 13.24\"\"\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$549.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 79 reviews.", "Title": "Plaza Golden Osetra Caviar, 8.8 oz", "Currency": "$", "Feature": "Vacuum sealed Caviar tin keeps 30 days unopened   24 - 48 hrs once opened (refrigerated or on ice)   8.8 oz Vacuum Sealed Tin, Serves 7-12   Pure Malossol Golden Osetra Caviar   Color: Amber to Gold", "Product Description": "Plaza Golden Osetra ranges in color from Amber to Gold, has a medium to large grain size and has the unique nutty finish distinct to this grade of caviar. We have no doubt it will impress even the most discerning caviar enthusiast. This caviar is our top grade and our partner farm in Greece responsibly raises this ultra-premium sturgeon. Located near the bay of Amvrakikos this modern facility produces some of the best amber gold Osetra the world has to offer.   \u2022 Farmed Golden Osetra Sturgeon Caviar (Product of Greece)"}, {"Sub Category": "8 Belgian Milk Chocolate Dipped Strawberries Decorated with Red Tinted Belgian White Chocolate\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Star K Kosher", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "4 1 oz. Mild Beef Stick", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 4 oz. Salted Cashews", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$49.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 63 reviews.", "Title": "Valentine\u2019s Day Teddy Bear Tote", "Currency": "$", "Feature": "Plush Bear   Chocolate Brownies   Caramel Popcorn   Vanilla Fudge with Sea Salt   And more", "Product Description": "Give the sweetest gift this Valentine\u2019s Day with the Valentine\u2019s Teddy Bear Tote!   An adorable re-usable tote comes filled with everyone\u2019s favorite treats like Russell Stover Strawberry Cr\u00e8me in Milk Chocolate, Baker Brothers Chocolate Brownies, a Godiva Milk Chocolate Caramel Masterpiece Bar, Tom Clark Caramel Popcorn and much more! All of this plus a sweet and cuddly plush bear make this the perfect Valentine\u2019s gift for families, friends and even that special someone!"}, {"Sub Category": "3.00 oz. Tom Clark Caramel Popcorn (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1.10 oz. Godiva Bar Masterpiece Milk Chocolate Caramel Lion (Turkey)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Fabric Tote with Handles 9x6x5.5/7.5\"\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Belgian White Chocolate Dipped Cheesecake Pops Decorated with Red-Tinted Belgian White Chocolate Drizzle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "This 8 Piece Candy Bento Box\u00ae is equal parts dapper and delicious. Wrapped in a teal and copper foil gift box", "Price": " this Costco exclusive is filled with the decadent duo of coffee and chocolate. A creative (and sweet) gift for anyone with a smooth sense of style", "Discount": " find eight gourmetSugarfinaCandy Cubes\u00ae including:   Iced Vanilla Latte Bears: Get buzzed with the world's first coffee-infused gummy bears made with a signature vanilla latte blend.", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Serves 30-50 people", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 3.2 out of 5 stars based on 4 reviews.", "Title": "Around the World 15 oz Spicy Nuts, 2-pack Tin, Total 30 oz", "Currency": "$", "Feature": "3.00 oz African Piri Piri   3.00 oz Caribbean Jerk   3.00 oz Coconut Curry Thai   3.00 oz Mexican Spiced Cocoa   3.00 oz Moroccan Harissa Lime", "Product Description": "Pack your bags and give your taste buds a worldly adventure with the Around the World Spicy Nut collection. With 5 distinct flavorful bags of peanuts, you\u2019ll be traveling to exotic locations around the world as you taste each snack and dreaming of vacations all around the globe.   First, jump on a plane and travel to Africa to treat yourself with sweet, salty and spicy nuts with our African Piri Piri Peanuts. The African Bird's Eye or Piri Piri pepper (Piri Piri means \u201cpepper, pepper\u201d in Swahili) has grown wild in Africa for centuries, and now you can enjoy this added heat to your peanuts, combined with a hint of sweetness, directly in your own home. Flavored with sugar, African Bird Spice and salt, these nuts will add a little pleasant kick and become your next favorite snacking go-to.   Next, grab your sunblock and catch your flight to the Caribbean where you\u2019ll be enjoying that sweet taste of vacation with the Caribbean Jerk Peanuts. Turn up the heat and snack on this lively and flavorful bag of peanuts that provides you with a little sweetness, while the exotic flavors from our spicy blend entertain your taste buds.   It\u2019s off to the jungles, islands and mountains in Thailand next, with the exciting flavorful punch of Coconut Curry Thai Peanuts. A little bit of sugar, combined with curry, coconut and cayenne for that added heat, you\u2019ll be dreaming of the splendor of temples and beaches with every bite.   Pack your suitcase and head for the south of the border. Peanuts seasoned with sugar, salt, cocoa powder, cinnamon and cayenne; you\u2019ll swear your lying on a beach in Mexico. Our Mexican Spiced Cocoa Peanuts are not short of flavor and are the perfect marriage of salty snack meets dessert.   Lastly, you\u2019re jet setting to a vacation of mountains, beaches and deserts in Morocco! Our Moroccan Harissa Lime Peanuts are flavored with sugar and Harissa lime powder. And if you\u2019ve never had Harissa seasoning, you are in for a treat of warm spices, garlic, and chiles with a hint of smokiness.   You\u2019ll be renewing your passport in no time to keep the travel adventure going with the Around the World Spicy Nut collection. This tasty global experience provides you with a 2-pack, but you\u2019ll be setting your message to \u201caway\u201d and on vacation indefinitely as you order these exotic bags of Around the World nuts over and over again!   Included:   2 Pack tin"}, {"Sub Category": "Sugar Lips \u2013 Small Cube", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Milk Praline Heart2 pieces", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$18.99 ", "Discount": "No Discount", "Rating": null, "Title": "Cambro CamSquare 2 Quart Food Storage Container with Lid, 3-count", "Currency": "$", "Feature": "\"Model: 2SFSPP   Translucent   Capacity: 2 Quart   Dimensions with cover: 7-1/4\"\"L x 7-1/4\"\"W x 3-7/8\"\"H\"", "Product Description": "\"Model: 2SFSPP CamSquare Food Storage Container with Lid Translucent Capacity: 2 qt Dimensions with cover:7-1/4\"\"L x 7-1/4\"\"W x 3-7/8\"\"H 3 ct More Information:Use to maximize storage of ingredients in the kitchen"}, {"Sub Category": "Use to maximize storage of ingredients in the kitchen", "Price": " cooler", "Discount": " freezer or pantry", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Withstands temperatures from -40F to 160F (-40C - 70C)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Baking Sheet PanQuarter size", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Stainless steel", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Stainless steel", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$8.49 ", "Discount": "No Discount", "Rating": null, "Title": "Tramontina ProLine Windsor Teaspoon, Stainless Steel, 36-count", "Currency": "$", "Feature": "Designed for daily, heavy duty use in high volume restaurants   Commercial Dishwasher safe   NSF International compliant", "Product Description": "Model: 80317/501"}, {"Sub Category": "NSF International compliant", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Writes in black", "Price": " blue", "Discount": " red and green ink", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Refillable ink cartridges and pencil lead", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Heavy Duty for rough handling", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 - Yellow Ink Bottle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "ET-2850", "Price": " ET-3850", "Discount": " ET-4850   Model: EPS T502\"", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$17.99 ", "Discount": "No Discount", "Rating": null, "Title": "TOPS Perforated Legal Ruled Letter Pad, 9-count", "Currency": "$", "Feature": "Micro-perforated Sheets", "Product Description": null}, {"Sub Category": "Household", "Price": "$91.79 ", "Discount": "No Discount", "Rating": null, "Title": "HP 902XL High Yield Ink Cartridge, Black, 2-Count", "Currency": "$", "Feature": "Printer Compatibility: HP OfficeJet Pro: 6968, 6978, 6979, 6954, 6954   2x More Pages Compared to Standard Cartridges   Yield Approx. 825 Pages per Cartridge   Includes 2 New HP 902XL Black Cartridges", "Product Description": "Item may be available in your local warehouse for a lower, non-delivered price.   Model: HEW T0A40BN"}, {"Sub Category": "Household", "Price": "$12.39 ", "Discount": "No Discount", "Rating": null, "Title": "uni-ball 207 Retractable Gel Pen, Medium Point 0.7mm, Assorted Ink Colors, 12-count", "Currency": "$", "Feature": null, "Product Description": "207 Gel Pen"}, {"Sub Category": "Household", "Price": "$22.99 ", "Discount": "No Discount", "Rating": null, "Title": "Nouvelle Legende Ribbed 100% Cotton Bar Towel, White, 16 in x 19 in, 25-count", "Currency": "$", "Feature": "\"100% High Grade Absorbent Cotton   Ribbed Cotton Construction Provides Greater Strength, Durability and Longevity   Ideal for Restaurant, Bars Office and Domestic Clean-up Jobs   Dimensions: 16\"\" x 19\"\"   Country of Origin: China\"", "Product Description": "\"Model: CBMR25Bar Mop Towels100% high grade absorbent cottonRibbed cotton construction provides greater strength, durability and longevityIdeal for restaurant, bar, office and domestic clean-up jobsDimensions: 16\"\" x 19\"\"White25 ctCountry of origin: China\""}, {"Sub Category": "Color: clear\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$84.79 ", "Discount": "No Discount", "Rating": null, "Title": "HP 910XL High Yield Ink Cartridge, Black, 2-count", "Currency": "$", "Feature": "Includes: 2 new 910XL Black Ink Cartridges   Yield Approx. 825 Pages per Cartridge   Printer Compatibility: HP OfficeJet Pro 8028e, 8028, 8025, 8025e, 8035, 8022   2x More Gages with XL Cartridges Versus Standard Cartridges", "Product Description": "Includes: 2 new 910XL Black ink cartridges"}, {"Sub Category": "Yield approx. 825 pages per cartridge", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$16.49 ", "Discount": "No Discount", "Rating": null, "Title": "Scotch Heavy Duty Shipping Packaging Tape with Tape Gun Dispenser, 2 Rolls of Tape Included", "Currency": "$", "Feature": "\"1.88\"\" x 60 yds   Easy-to-Use", "Product Description": " Soft-Touch"}, {"Sub Category": "White\"", "Price": "PVC free poly material will not stick to cover inserts or materials stored insideArchival safe for all documents including photosClear, non-glare overlay for customization on all three sidesBack mounted round ring metal with dual opening and closing triggersHorizontal pockets on inside front and back coversContains 51% recycled content by material weight; 48% post-consumer recycled content", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$10.99 ", "Discount": "No Discount", "Rating": null, "Title": "\"Advantage Premium Bright Ink Jet and Laser Paper, 8.5\"\"x11\"\" Letter", "Currency": " White", "Feature": " 24lb", "Product Description": " 97 Bright"}, {"Sub Category": "Household", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "BIC Mechanical Pencil Kit, 24 Velocity + 1 Break Resistant, 0.7mm Lead, 25-count", "Currency": "$", "Feature": "24 Velocity Mechanical Pencils   1 Break Resistant Pencil   Smooth Dark Writing   0.7mm Lead   Assorted Colors", "Product Description": "Mechanical Pencil Kit"}, {"Sub Category": "Contour textured grip for added comfort", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Medium point (1.0mm)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Features:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "\u2022 24 Black + 1 Bonus Silver Marker\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$13.99 ", "Discount": "No Discount", "Rating": null, "Title": "Eurow Nouvelle Legende Placemats, 12-count", "Currency": "$", "Feature": "\"Tweed woven vinyl   Dimensions: 18\"\"L x 13\"\"W   12 ct\"", "Product Description": "\"Eurow Nouvelle Legende PlacematsTweed woven vinylDimensions: 18\"\"L x 13\"\"W12 ctMore Information:PVC outer shell with polyester corePerfect for indoor or outdoor useGreat for everyday use - wipe cleanPractical table protection\""}, {"Sub Category": "Conical tip type", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Plug-in device   How it Works:   Zevo Flying Insect Trapuses light to continuously attract flying insects (house flies", "Price": " fruit flies and gnats) and capture them on to an adhesive backing that you never have to touch.   Designed for any room or area in your home where you see flying insects.   Replace refill cartridge when it's full of insects. Check it every 15 days or as needed.   FOR BEST RESULTS:   DO place in electrical outlets that are easily accessible and near common areas.   DO use in an indoor electrical outlet where flying insects enter into the home such as garages and enclosed porches/patios (near entryways)", "Discount": " and where they tend to gather", "Rating": " such as in kitchens", "Title": " near fruits and vegetables", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$73.99 ", "Discount": "No Discount", "Rating": null, "Title": "iSi North America 1 Pint Stainless Cream Whipper Dispenser", "Currency": "$", "Feature": "All-metal design   NSF approved   Industrial dishwasher safe", "Product Description": "Cream Whipper Dispenser1 pintStainless steelMore Information:Includes: charger holder, decorator tip, cleaning brush, and recipes"}, {"Sub Category": "Kosher\"", "Price": "Super Extra-large PeanutsRoasted & SaltedVirginia varietyExtra crunchyGluten freeKosher40 oz Can", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$31.99 ", "Discount": "After $6 OFF", "Rating": null, "Title": "Kirkland Signature Coffee Organic Pacific Bold K-Cup Pod, 120-count", "Currency": "$", "Feature": "120 K-Cup\u00ae pods", "Product Description": null}, {"Sub Category": "Pacific Bold Coffee", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$15.99 ", "Discount": "After $2.50 OFF", "Rating": "Rated 4.7 out of 5 stars based on 2218 reviews.", "Title": "Kirkland Signature Super B-Complex with Electrolytes, 500 Tablets", "Currency": "$", "Feature": "One per Day Formulation", "Product Description": null}, {"Sub Category": "Organic", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Fair Trade Certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Selenium 0.35 mg/kg Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Chondroitin sulfate* 250 mg/kg Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "(Lactobacillus acidophilus", "Price": " Bifidobacterium animalis", "Discount": " Lactobacillus reuteri)   *Not recognized as an essential nutrient by the AAFCO Dog Food Nutrient Profiles.   Calorie Content:   3", "Rating": "529 kcals/kg (330 kcals/cup) Calculated Metabolizable Energy   Remember to keep fresh water available to your pet at all times.   Type of Pet Food: Senior Dogs\"", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "21 Total Servings\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$21.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Ultra Clean HE Liquid Laundry Detergent, 146 loads, 194 fl oz", "Currency": "$", "Feature": "146 Loads   Fresh Scent   Tough Stain Fighting Power", "Product Description": null}, {"Sub Category": "Docosahexaenoic Acid (DHA): Added salmon oil supplies DHA", "Price": " an omega-3 fatty acid that supports proper brain and eye development.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Small Kibble: Growing puppies benefit from small kibble that is easier to pick up and chew.   Probiotics and prebiotic fiber from dried chicory root help maintain the proper balance of beneficial bacteria in your puppy\u2019s intestines. Active9\u2122 Probiotics are developed from probiotic strains naturally found in the canine GI tract and processed under strict quality and safety standards to ensure purity. Each cup of food provides live", "Price": " active cultures that help support healthy digestion and help your puppy maintain an active lifestyle.   Ingredients:", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Total Microorganisms* 2", "Price": "000", "Discount": "000 CFU/lb Minimum", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "(Lactobacillus plantarum", "Price": " Bacillus subtilis", "Discount": " Lactobacillus acidophilus", "Rating": " Enterococcus faecium", "Title": " Bifidobacterium animalis)**   *Not recognized as an essential nutrient by the AAFCO Dog Food Nutrient Profiles.", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "**Contains a source of live (viable)", "Price": " naturally occurring microorganisms.   Calorie Content", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Organic", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Glucosamine & Chondroitin   Vitamin E", "Price": " Selenium", "Discount": " Zinc & Active9\u2122 Probiotics   40 Pounds\"", "Rating": "Limit 10 per member.", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No Artificial Flavors", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Non-Dairy Beverage", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$52.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 3871 reviews.", "Title": "Kirkland Signature Nature's Domain Salmon & Sweet Potato Formula Dog Food, 35 lbs", "Currency": "$", "Feature": "Salmon & Sweet Potato Formula", "Product Description": null}, {"Sub Category": "Crude Fat 15% Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Crude Fiber 4% Maximum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Zinc 150 mg/kg Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Total Microorganisms* 2", "Price": "000", "Discount": "000 CFU/lb Minimum", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "(Lactobacillus acidophilus", "Price": " Bifidobacterium animalis", "Discount": " Lactobacillus reuteri)   *Not recognized as an essential nutrient by the AAFCO Dog Food Nutrient Profile.", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "**Contains a source of live (viable)", "Price": " naturally occurring microorganisms.   Calorie Content", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher Certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Whole Bean", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$11.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Soft & Chewy Granola Bars, 0.85 oz, 64-count", "Currency": "$", "Feature": "Soft & Chewy Bars   Whole Rolled Oats   No Artificial Flavors or Colors   Kosher   Made With Real Chocolate Chips", "Product Description": "Soft & Chewy BarsWhole Rolled OatsSemisweet Chocolate ChipsNo Artificial Flavors or Colors100 Calories per Bar64-count0.85 oz barsTotal Net Weight: 54.4 oz"}, {"Sub Category": "12-count", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "11 fl oz cans", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Milky Way", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$9.79 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Ultra Shine Liquid Dish Soap, Fresh, 90 fl oz", "Currency": "$", "Feature": "Fresh   Odor Eliminating   90 Total fl. oz.", "Product Description": "Platinum performance"}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Fancy Whole Cashews, 2.5 lbs", "Currency": "$", "Feature": "Fancy Whole Cashews with Sea Salt   Kosher   Premium Quality   40 oz", "Product Description": "40 oz"}, {"Sub Category": "Region: Latin-America\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Imported from Italy", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$20.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Extra-Large Absorbent Pads, 30 in L X 23 in W, 100-count", "Currency": "$", "Feature": "Poly backing protects against leaks   Locks in wetness with quilted top layer   Round the clock odor control   Quick absorption reduces splash and tracking   Use for training, bedding, messy jobs", "Product Description": "100-count30 in L x 23 in W pads Made in the USA"}, {"Sub Category": "100% Grade A", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Antioxidants: Guaranteed levels of vitamin E and selenium work together to support your dog's healthy lifestyle.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "L-Carnitine* 100mg/kg Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "DHA (Docosahexaenoic Acid)   0.05% Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Fragrance free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Net Weight 56 oz.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$10.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature, Bacon Crumbles, 20 oz", "Currency": "$", "Feature": "Crumbled Bacon   100% Real Bacon   Naturally Smoked   Made In The USA   Resealable Pouch", "Product Description": "Net Weight 20 oz."}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$38.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Reynolds Foodservice Foil HD, 18 in x 500 ft", "Currency": "$", "Feature": "\"Premium Quality   18\"\" x 500' Roll   750 Total Square Feet   Heavy Duty Foil\"", "Product Description": "Kirkland Signature Reynolds Heavy Duty Foodservice Aluminum Foil takes on the heat in your commercial kitchen with its highly durable, superior strength construction keeping your kitchen running smoothly. This heavy duty aluminum foil handles all the demands of extra high-heat in a commercial kitchen making it perfect for cooking that calls for high-quality performance. Great for restaurants, catering businesses, school cafeterias and small businesses, this aluminum foil roll comes in a sturdy corrugated board container with an integrated metal cutter that helps you easily cut foil to the desired length. Cover large stainless steel pans with this aluminum roll to help keep foods warm. Use this cooking foil to line your pans, so they stay looking like new for longer. Make foil packets for grilling and roasting foods. Store foods in the fridge or freezer with this heavy duty foil that withstands extreme cold. Wrap leftovers and store prepped foods using this aluminum foil wrap. Cleanup is much faster and easier when you use disposable aluminum foil. Kirkland Signature Reynolds Heavy Duty Foodservice Aluminum Foil is indispensable when it comes to mealtime prep and storage.This package contains Kirkland Signature Reynolds Heavy Duty Foodservice Aluminum Foil roll measuring 500 feet long by 18 inches wide (750 square feet total)This heavy duty aluminum foil offers superior strength and is made for use in commercial kitchens, restaurants, catering businesses, school cafeterias, and small businessesUse this heavy duty aluminum foil for making packets for the grill and wrapping foods for storage and transportUse Kirkland Signature Reynolds Foodservice aluminum foil to cover large stainless steel pans, store prepped food, or line a pan to cook or roast with easy cleanupWithstands high heat in oven by sealing in moisture and extreme cold by protecting food in freezer"}, {"Sub Category": "Kosher Dairy\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$13.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature, Evaporated Milk, 12 fl oz, 12-Count", "Currency": "$", "Feature": "Kosher   rBST Free   Vitamin D Added   12 fl oz Cans   Net Weight: 144 fl oz", "Product Description": "Made In The USA"}, {"Sub Category": "Organic Applesauce", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1", "Price": "500 square feet total", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Carton is 100% recyclable\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "384 oz. total", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Total servings: 48", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Vitamin Fortified: vitamin D2", "Price": " calcium", "Discount": " and essential B vitamins", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "WHOLESOME INGREDIENTS - Each dog chew treat contains added vitamins and minerals to promote overall health   Ingredients:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Print protection", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Chupa Chups", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$16.49 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Reynolds Foodservice Aluminum Foil, Pre-Cut Single Sheets, 500-count", "Currency": "$", "Feature": "\"Pre-Cut Single Foil Sheets   12\"\" x 10-3/4\"\" Sheet Size   500 Total Sheets   Premium Quality\"", "Product Description": "Kirkland Signature Reynolds Foodservice Aluminum Foil Sheets combine the versatility of aluminum foil with the convenience of pre-cut individual sheets to make food serving and storage easier. These food service foil sheets provide just the right amount of foil to wrap sandwiches, wraps, burritos, burgers and more, so you don't waste materials. Keep menu items hot and fresh when you use this food storage wrap in restaurants, catering operations or school cafeterias. Even home cooks can enjoy the convenience of these pop-up sheets for keeping food warm or wrapping up leftovers. Kirkland Signature Reynolds Foodservice Aluminum Foil Sheets are great for use in food prep, storing leftovers and taking foods on the go. Dispensing is quick and easy thanks to the pop-up design, which lets you grab individual sheets one at a time with one hand. No more wrestling with an aluminum foil roll when you're trying to be efficient. Because these sheets are made from aluminum foil, they easily bend and mold to whatever you're wrapping, and they help shield against moisture, odors and grease to keep everything clean and fresh.This package contains 500 Kirkland Signature Reynolds Foodservice pre-cut pop-up aluminum foil sheets, measuring 12 inches x 10.75 inchesConvenient pre-cut aluminum foil food wrap sheets are great for restaurants, catering operations, school cafeterias or at-home useThese aluminum foil sheets were designed to pop up for quick and easy dispensingKirkland Signature Reynolds Foodservice Foil Sheets are easy to mold around your food to get a tight seal - perfect for wrapping sandwiches and on the go foodsPre-cut aluminum foil wrap provides the perfect amount of foil to cover sandwiches, wraps, burritos, burgers and more"}, {"Sub Category": "38 oz Bottles", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Laundry Detergent & Supplies", "Price": "$28.99 ", "Discount": "After $6 OFF", "Rating": null, "Title": "Tide Pods HE Laundry Detergent Pods, Free & Gentle, 152-count", "Currency": "$", "Feature": "Designed for Sensitive Skin   Hypoallergenic   152-count", "Product Description": "Taking care of sensitive skin doesn\u2019t have to be hard. Each individual pac of Tide PODS Free & Gentle HE Turbo laundry detergent cleans, fights stains, brightens fabrics and is specially designed free of dyes and perfumes. Simply put in one pac for most loads, but use two pacs for large loads and three pacs for extra-large loads. For a simple, worry-free laundry experience that\u2019s gentle on skin, Tide PODS Free & Gentle laundry detergent will keep your family looking and feeling great."}, {"Sub Category": "159 Loads", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Laundry Detergent & Supplies", "Price": "$17.89 ", "Discount": "After $3.60 OFF", "Rating": null, "Title": "Downy Unstopables In-Wash Scent Booster Beads, Fresh, 34 oz", "Currency": "$", "Feature": "Fresh   HE Compatible   34 Total oz   Safe on All Fabrics", "Product Description": "Formulated with Antioxidant Technology to fight odors"}, {"Sub Category": "Safe on all fabrics and in all washing machines", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Washes up to 160 loads", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Earth friendly", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Works in cold water\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Never tested on animals / Vegan", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Laundry Detergent & Supplies", "Price": "$11.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Fabric Softener Sheets, 250-count, 2-pack", "Currency": "$", "Feature": "Fresh   250 Sheets per Box   2 Boxes   500 Total Sheets   Reduces Static", "Product Description": "250 Sheets per Box"}, {"Sub Category": "Same number of uses as the previous Max Efficiency 11.6lbs. size", "Price": " when used as directed", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Advanced stain removal of grass", "Price": " grease", "Discount": " dirt", "Rating": " wine", "Title": " blood", "Currency": " ink stains", "Feature": " and more   OxiClean Concentrated Max Efficiency Versatile Stain Remover Powder (9.28 lbs.)", "Product Description": " with our new formula"}, {"Sub Category": "The secret of this iconic stain remover is its oxygenated formula. OxiClean\u2019s unique bubbling oxygen formula helps to break down protein bonds and decolorize harsh stains.   OxiClean Stain Remover is a staple in homes across the country since it can be added to any load of laundry and leave it looking cleaning and brighter. It's also popular in businesses as well", "Price": " particularly in restaurants that may need it as a spot treatment on tablecloths and upholstery. OxiClean's signature fresh scent is sure to delight anyone within sniffing range.   \u200b\u200b\"", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Pure natural South American wool from free-range sheep", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Prevents static cling", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$129.99through-$279.99", "Discount": "After $40 - $80 OFF", "Rating": "through", "Title": "Kansas City Steak Company USDA Choice Ribeye Steaks 18 Oz. Each (Available in 4, 8, or 12 Packs)", "Currency": "$", "Feature": "Buy More and Save   Aged Beef up to 28 Days   Choose from 4, 8 or 12 Pack Assortment   Vacuum Sealed and Frozen", "Product Description": "These steaks are cut by Kansas City Steak Company to the same specifications of the steaks you know and love in your local Costco Warehouse. Kansas City Steak Company is a division of National Beef who is one of the suppliers of meat to Costco Wholesale.Each Boneless Ribeye Steak is carved from Kansas City Steak Company\u2019s exquisite Prime Rib Roast - for an unbelievably tender and flavorful meal. The Ribeye is one of the most delicious steaks available, with gorgeous marbling and the mouth-watering aroma of beef at its best. Also known as the Delmonico steak.Each mouthwatering steak is aged up to 28 days for added taste and tenderness then individually vacuum sealed and flash frozen at its peak for your convenience"}, {"Sub Category": "Meat & Seafood", "Price": "$259.99 ", "Discount": "No Discount", "Rating": "No Reviews", "Title": "Lobster With Shell Removed, (9 Oz. Per Pack), 6 Total Packs, 3.44 Lbs. Total", "Currency": "$", "Feature": "9 Oz. Pack, 6 Packs Total, 3.44 Lbs. Total   Lobster with Shell Removed with Flavored Butter Coins in Each Pack   Cook in Pack, Ready in Under 20 Minutes   Ships Uncooked & Frozen", "Product Description": "Due to the perishable nature of this item orders do NOT ship over the weekend. Orders will only ship Monday, Tuesday & Wednesday (orders placed after 11:00 am PST will be processed for shipping the following day) for Wednesday, Thursday, Friday Delivery only.   Enjoy the exquisite taste of succulent lobster without the hassles \u2013 no shells, no mess, no fishy odors, and no special tools required. This full boneless \u201cNaked\u201d Lobster, sourced from the pristine waters of the North Atlantic Ocean, is 100% of the meat from an average 2 lb lobster. Each order includes 6 packs of premium, fully de-shelled lobster meat. Each pack also contains 2 flavored butter coins making for a simple, convenient, and delicious \u201ccook in pack\u201d lobster experience. This gourmet delight takes less than 20 minutes to prepare allowing you to savor the rich flavors of lobster without sacrificing precious time. Ships uncooked and frozen.   Features:   Whole lobster out of the shell (shell removed)"}, {"Sub Category": "Cook in pack \u2013 ready in 18 to 20 minutes", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "3.44 lbs total", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$159.99 ", "Discount": "No Discount", "Rating": "Rated 4.2 out of 5 stars based on 11 reviews.", "Title": "Crescent Foods Halal Hand-Cut Beef, Chicken Combo Pack - 14 Total Packs, 13.5 Lbs. Total", "Currency": "$", "Feature": "Please Check Below for Pack Contents   Certified Hand-Cut Halal", "Product Description": "Features: (Crescent Foods Halal Beef Chicken Combo)"}, {"Sub Category": "Free Range and Certified Humane", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Wild Caught", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Ships Fully Cooked and Frozen", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "(1) (1-1.25 lbs) of Wild Alaskan Weathervane Scallops (20/30)   WE ONLY CARRY WILD & SUSTAINABLE seafood from the best-managed fisheries on the planet. Alaska\u2019s waters provide superior seafood and what better way to try so many of its best options than with the Premium Seafood Variety Box from Alaska Home Pack. Our seafood is processed at our family-owned", "Price": " dockside facility in Juneau", "Discount": " Alaska.   Receive approx. 12 lbs. of Premium Seafood in 6 varieties", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Individually frozen and vacuum-sealed", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Heritage-breed chicken", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Free-ranged on small farms", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Air-chilled for maximum flavor concentration", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "8 (8oz) Gourmet Steak Burgers   Cooking Instructions   Preparation: Keep frozen until ready to use.   CONVENTIONAL OVEN (Thawed): Thaw under refrigeration prior to cooking. Gently compress in plastic wrap to retain shape. Preheat oven to 350\u00b0 F. Place on baking pan and top with butter", "Price": " lemon and/or white wine. Bake to internal temperature of 165\u00b0 F (approx. 25-30 min.). Finish by broiling to desired color.   CONVENTIONAL OVEN (Frozen): Preheat oven to 350\u00b0 F. Place on baking pan and top with butter", "Discount": " lemon and/or white wine. Bake to internal temperature of 165\u00b0 F (approx. 33-38 min.). Finish by broiling to desired color.   SAUT\u00c9 (Thawed): Thaw under refrigeration prior to cooking. Gently compress in plastic wrap to retain shape. Over medium heat", "Rating": " saut\u00e9 crab cakes in approx. 1 Tbsp of butter/oil. Cook each side until nicely browned. Add lemon or white wine to taste. Cover and simmer for 4-6 minutes until internal temperature is 165\u00b0 F.\"", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$219.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 602 reviews.", "Title": "Northwest Fish Colossal Alaskan Wild Dungeness Crab Sections, 10lbs", "Currency": "$", "Feature": "Wild Caught   Fully Cooked   Tender & Succulent   10 lbs.", "Product Description": null}, {"Sub Category": "Delivery is not available in Puerto Rico", "Price": " Hawaii or Alaska   COSTCO MEMBER EXCLUSIVE:", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "PREMIUM FLOUR: Milled from a blend of premium northern winter and spring wheats", "Price": " this flour helps create a supple", "Discount": " delicate dumpling skin.", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Steam dumplings for 11 minutes (until internal temp. reaches 165\u00b0F).", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Jambon de Bayonne", "Price": " French Prosciutto (3.5oz pack)", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Andouille Cajun-Style Sausages (12oz)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Black Truffle Butter (3oz)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Steam in 11 minutes\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Choice Grade Beef", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 packages / bags of 2 lobster tails (4 tails total)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Halal certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Thaws quickly in the fridge or water", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Remove from heat and rest", "Price": " covered", "Discount": " for 1 minute. Serve with your favorite sauces and enjoy!   Features:", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Skin On", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Whether treating yourself or giving as a gift to a lucky recipient", "Price": " these steaks", "Discount": " scallops", "Rating": " and burgers will be sure to amaze. Each steak and burger is individually packaged and vacuum-sealed. Once they are ready to go", "Title": " they are placed in an attractive black and gold box with a unique registration number- presentation fit for the best of the best!", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "MSC Certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "150 Restaurant-quality soup dumplings", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": ".", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$89.99 ", "Discount": "No Discount", "Rating": "Rated 4.2 out of 5 stars based on 56 reviews.", "Title": "Pederson Natural Farms No Sugar Italian Ground Sausage 1 lb, 10-pack", "Currency": "$", "Feature": "No Sugar Italian Ground Sausage   (10) 1 lb Packs   Gluten and Lactose Free   Keto and Paleo friendly, Whole30 Approved   Ships Uncooked & Frozen", "Product Description": "Like the rest of their product line, Pederson\u2019s Natural Farms Italian ground sausage checks every box when it comes to health-conscious and humane protein production. This Italian ground sausage fits the bill, whether you\u2019re putting it on pizza, in a pasta, or spicing up a perfectly balanced omelet. Pederson\u2019s Italian ground sausage is minimally processed and infused with just the right amount of seasoning, without adding any sugar or artificial ingredients. It\u2019ll cook up with a distinctive and characteristic Italian taste, yet that flavor profile strikes a balance with enough nuance to not overpower the rest of your dish. You\u2019ll know it once you try it. If you\u2019ve had Pederson's Natural Farms products in the past, you know they each set themselves apart from the competition in their own way. They make the best, better. Contain only ingredients found in nature and are free of any added sugars making them Keto friendly, Paleo friendly, and Whole30 Approved."}, {"Sub Category": "Meat & Seafood", "Price": "$129.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 41 reviews.", "Title": "Grizzly Salmon Tartare with Citrus Marinade, (14/4 Oz Packs), 14 Total Packs, Total 3.5 Lbs.", "Currency": "$", "Feature": "14x, 4oz packs of Salmon Tartare   Citrus Marinade Included   Cubed Atlantic Salmon   Ships Uncooked & Frozen", "Product Description": "Grizzly\u2019s salmon Tartare is individually vacuum packed with each pack containing 120g of cubed Sashimi grade Atlantic salmon.The salmon is from sustainably sourced.The individual Salmon cube bags after thawing are ready to be lightly mixed with the provided matching individual cup of Citrus marinade (20ml).You can also add your own personal touch to your tartare by adding for example avocado, shallots or dried nuts. Be creative and impress your guests with your creations!State-of-the-art equipment, handling and temperature controlled production methods ensure all products to be of Sashimi quality and grade.tartarThe Citrus marinade was developed through time and our Executive chefs collaboration with Laval University in Quebec City, Canada.It is made with natural ingredients: lime juice, lime oil, chives and orange oil with a light and refreshing taste.Thawing instructions:FISH: Remove the salmon package from the main bag, perforate the packaging and leave in the refrigerator for about 6 to 7 hours.Quick thaw: Remove the salmon package from the main bag and submerge in cold water for 15 minutes.Do not thaw Salmon in the microwave, in hot water or at room temperature. Eat within 24 hours after thawing or keep frozen for maximum 18 months.For MARINADE: Thaw the frozen marinade cup at room temperature for 15 min before mixing."}, {"Sub Category": "Ground from rib meat", "Price": " these Short Rib Burgers are a treat that are as easy to make as they are to enjoy. Juicy", "Discount": " tender and delicious", "Rating": " they\u2019re perfect to have on hand when you\u2019re ready to fire up your grill. 80% Lean", "Title": " 20% Fat.   Wagyu Beef Burger: (12) 5.3 oz Burgers", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$269.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 41 reviews.", "Title": "Sesame Crusted Ahi Tuna Steaks, 18 Total Packs, 1 Case Totaling 12 Lbs.", "Currency": "$", "Feature": "Ships Frozen   Total 12 Lb. Case, 18 Packs, 36 Pieces   18 Individually Sealed in Skin Pack Packaging Average 5.35 Oz./Piece   MSC (Marine Stewardship Council) Certified", "Product Description": "This hearty fish, also known as yellowfin tuna, has a mild taste and firm texture. Each ahi tuna steak is crusted with sesame seeds and is boneless and skinless. Sesame crusted ahi tuna steaks are a great source of protein. They can be used in a range of simple to cook dishes including in poke, as a main steak (seared or grilled), or sliced onto a salad."}, {"Sub Category": "Avg 5.35 Oz Per Steak", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "MSC (Marine Stewardship Council) certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "- Product temperature should be verified with a calibrated thermometer at 40F or below", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "- Gluten free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Great color and flavor", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "10 lbs. total\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$119.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 26 reviews.", "Title": "Key West Pink 16/20 Gulf Shrimp Headless Shell-On (3/2Lb Per Bag), Total 3 Packs, 6 Lbs. Total", "Currency": "$", "Feature": "3 x 2Lb. Bags   16-20 Shrimp Per Lb.   32-40 Shrimp Per Bag   Ships Frozen   Wild-Caught and Packed in the USA", "Product Description": "Certified Wild Key West Pink Shrimp are caught in the waters around Key West, Florida. These shrimp have an unrivalled flavor that comes from the clean Gulf Stream waters they call home. The history of this fishery is as unique as the flavor. In the 1940\u2019s fisherman discovered large stocks of Pink shrimp in the waters just off Key West. Word soon travelled leading to a shrimping boom where boats came from as far as Texas and the Carolina\u2019s to harvest \u201cPink Gold.\u201d We hope you enjoy the rich flavor of the Gulf\u2019s greatest treasure \u2013 Key West Pink Shrimp!   The shrimp are frozen on board to ensure peak flavor. Minimally processed, shell-on presentation is perfect for \u201cpeel & eat\u201d. No added preservatives or chemicals. These premium shrimp have a fresh flavor that only the ocean provides."}, {"Sub Category": "Features:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Ships UPS Next Day Air (Included)\"", "Price": "Authentic Wagyu\u2019s exclusive Japanese A5 Chuck Roll Bulgogi Styles Sample Pack is perfect for any meat-loving family searching for a new and fun foodie experience! The Japanese A5 Wagyu Chuck roll is in itself a unique cut of beef. Being cut into Bulgogi Slices makes this product one of a kind. Authentic Wagyu\u2019s Bulgogi is filled with the sweet flavor of the Japanese A5 Wagyu and its delicate marbling. This is a perfect cut of meat to consume with your family for an unforgettable, fun experience! The Bulgogi is even more thin, sliced into 2-3mm pieces, it is easy to cook with vegetables which can be made for a healthy, delicious meal! Features:(6) 0.5 lb Trays of Sliced Chuck Roll Bulgogi Style2-3mm slices Ships Uncooked and FrozenShips UPS Next Day Air", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$999.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 36 reviews.", "Title": "Japanese Wagyu Tenderloin Roast, A5 Grade, 6 lbs", "Currency": "$", "Feature": "(1) A5 Grade, 6 lb Tenderloin Roast   Authentic Japanese Wagyu Beef", "Product Description": null}, {"Sub Category": "1/4 of the fat content of beef", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Antibiotic Free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$129.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 93 reviews.", "Title": "Northfork Bison Trio of Ground Meats, Total 9 Packs, 9 Lbs. Total", "Currency": "$", "Feature": "1 lb Bricks of Ground Meat, 9 lbs Total   Bison, Elk, and Wild Boar   No Added Additives, Chemicals or Hormones   Healthy Alternative For Beef   Ships Uncooked & Frozen", "Product Description": "This pack includes:   3x - 1 lb brick of Ground Bison"}, {"Sub Category": "Lean meat", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Poke", "Price": " which rhymes with okay", "Discount": " is a famous raw fish salad from Hawaii that has been gaining fans around the world. This quick and easy one-bowl meal is made with flexible ingredients so that each bowl can be tailored to individual tastes. Raw tuna is the crowning glory of any poke bowl", "Rating": " and only the best quality will do", "Title": " just as with sashimi.", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Pin Bones removed", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "25 portions", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Individually frozen and vacuum-sealed", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$199.99 ", "Discount": "No Discount", "Rating": "No Reviews", "Title": "Lobster Claws & Arms, Sustainable Wild Caught, North Atlantic, 24-40 Claws & Arms (3-5 Lb. Per.), Total 8Lb. Case", "Currency": "$", "Feature": "Sustainable, Wild Caught in Cold Waters of the North Atlantic   Fully Cooked, Scored and Flash Frozen for Freshness   Ships Frozen   24-40 Claws & Arms (3-5 lb./per.)   Total Net Weight: 8 lbs.", "Product Description": "Harvested from pristine North Atlantic coastal waters, our delicious premium lobster is wild-caught and frozen at the peak of sweetness. With a fresh-from-the-sea taste in your own home, our scored lobster claws & arms have absolutely no preservatives. Easy to thaw and prepare, East Coast Seafood\u2019s scored lobster claws & arms are a perfect way to enjoy surf and turf or a great appetizer any day of the week."}], "stage_runningstate": "executed", "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": "{}"}}, {"_id": "665a814e3dfe9400ae3e1815", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/GroceryDataset.csv", "in": ["665a814e3dfe9400ae3e1814"], "out": [], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "aLT_AutoML", "comment": "", "pipeline_id": "665a814e3dfe9400ae3e1810", "sub_type": "Automl", "stage_type": "ml", "mlCategory": "Regression", "stage_attributes": {"model_type": "regression", "label": "Sub Category_stringindexer", "features": ["Price_stringindexer", "Discount_stringindexer", "Rating_stringindexer", "Title_stringindexer", "Currency_stringindexer", "Feature_stringindexer", "Product Description_stringindexer"], "percentage": "80", "executionTime": "10", "sampling": "1", "sampling_value": "", "optimizeBy": "r2", "run_id": "", "server_url": "/nexusMax/NexusMaxPlatform/uploads/platform/"}, "status": "new", "position": {"x": 187, "y": 160}, "shape_attributes": {"image": {"refHeight": "100%", "xlinkHref": "assets/svg/ml-engine/regression.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 14, "fill": "#333333", "type": "aml", "text": "aLT_AutoML", "slug": "auto-ml", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e193a", "field": "Sub Category_stringindexer", "alias": "Sub Category_stringindexer", "type": "real", "position": "0"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e193b", "field": "Price_stringindexer", "alias": "Price_stringindexer", "type": "real", "position": "1"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e193c", "field": "Discount_stringindexer", "alias": "Discount_stringindexer", "type": "real", "position": "2"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e193d", "field": "Rating_stringindexer", "alias": "Rating_stringindexer", "type": "real", "position": "3"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e193e", "field": "Title_stringindexer", "alias": "Title_stringindexer", "type": "real", "position": "4"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e193f", "field": "Currency_stringindexer", "alias": "Currency_stringindexer", "type": "real", "position": "5"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e1940", "field": "Feature_stringindexer", "alias": "Feature_stringindexer", "type": "real", "position": "6"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e1941", "field": "Product Description_stringindexer", "alias": "Product Description_stringindexer", "type": "real", "position": "7"}], "actual_schema": [{"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e1932", "field": "Sub Category", "alias": "Sub Category", "type": "String", "position": "0"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e1933", "field": "Price", "alias": "Price", "type": "String", "position": "1"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e1934", "field": "Discount", "alias": "Discount", "type": "String", "position": "2"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e1935", "field": "Rating", "alias": "Rating", "type": "String", "position": "3"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e1936", "field": "Title", "alias": "Title", "type": "String", "position": "4"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e1937", "field": "Currency", "alias": "Currency", "type": "String", "position": "5"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e1938", "field": "Feature", "alias": "Feature", "type": "String", "position": "6"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "665a87a43dfe9400ae3e1939", "field": "Product Description", "alias": "Product Description", "type": "String", "position": "7"}], "selected_schema": [], "created_at": "2024-06-01 02:02:54.644000", "originalcount": 7420, "samplecount": 747, "samplefile": "/FileStore/platform/sampleData/665a816e3dfe9400ae3e183c/part-00000-8a13ea50-e287-4e6e-a7d5-8b6bca7826f2-c000.csv", "joinSchema": [], "updated_at": "2024-06-01 02:33:36.567000", "__v": 0, "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": {}}}, {"_id": "665a816e3dfe9400ae3e183c", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/GroceryDataset.csv", "in": [], "out": ["665a814e3dfe9400ae3e1814"], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "pipeline_id": "665a814e3dfe9400ae3e1810", "sub_type": "localfiles", "stage_type": "source", "stage_attributes": {"url": "/FileStore/platform/uploadedSourceFiles/GroceryDataset.csv", "filename": "GroceryDataset.csv", "delimiter": ",", "file_type": "Delimeted", "dbfs_token": "", "dbfs_domain": "", "is_header": "Use Header Line", "server_url": "/nexusMax/NexusMaxPlatform/uploads/platform/"}, "status": "new", "position": {"x": -64, "y": 160}, "shape_attributes": {"image": {"refHeight": "100%", "xlinkHref": "assets/svg/source/local-source.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 14, "fill": "#000000", "type": "source", "text": "GroceryDataset", "slug": "local", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"inherited": true, "checked": true, "field": "Sub Category", "alias": "Sub Category", "type": "String", "position": 0}, {"inherited": true, "checked": true, "field": "Price", "alias": "Price", "type": "String", "position": 1}, {"inherited": true, "checked": true, "field": "Discount", "alias": "Discount", "type": "String", "position": 2}, {"inherited": true, "checked": true, "field": "Rating", "alias": "Rating", "type": "String", "position": 3}, {"inherited": true, "checked": true, "field": "Title", "alias": "Title", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "Currency", "alias": "Currency", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "Feature", "alias": "Feature", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "Product Description", "alias": "Product Description", "type": "String", "position": 7}], "actual_schema": [{"inherited": true, "checked": true, "field": "Sub Category", "alias": "Sub Category", "type": "String", "position": 0}, {"inherited": true, "checked": true, "field": "Price", "alias": "Price", "type": "String", "position": 1}, {"inherited": true, "checked": true, "field": "Discount", "alias": "Discount", "type": "String", "position": 2}, {"inherited": true, "checked": true, "field": "Rating", "alias": "Rating", "type": "String", "position": 3}, {"inherited": true, "checked": true, "field": "Title", "alias": "Title", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "Currency", "alias": "Currency", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "Feature", "alias": "Feature", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "Product Description", "alias": "Product Description", "type": "String", "position": 7}], "selected_schema": [], "joinSchema": [], "updated_at": "2024-06-01 02:28:32.802000", "created_at": "2024-06-01 02:03:26.085000", "__v": 0, "comment": "", "name": "GroceryDataset", "samplefile": "/FileStore/platform/sampleData/665a816e3dfe9400ae3e183c/part-00000-8a13ea50-e287-4e6e-a7d5-8b6bca7826f2-c000.csv", "stage_runningstate": "executed", "sampleData": [{"Sub Category": "Dimensions: 9\u201d diameter", "Price": " 7\u201d high", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Certified Kosher OU-D", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Serves 14\"", "Price": "A cake the dessert epicure will die for!To the ultimate chocolate lover - We've baked your dream cake! Four split layers of our rich chocolate cake, filled with a smooth milk chocolate mousse, finished in chocolate ganache & covered in dark chocolate bark pieces. This cake is the thoughtful gift idea that\u2019s perfect for family, friends, coworkers, or to anyone you care about in your life. Generously sized precut slices, A cake lover\u2019s dreams come true! Includes:1 - 10\u201d Premier Chocolate Overload CakeWeighs in at 7.2 lbs.14 Servings OU-D certified, the most trusted kosher certification in the U.S.All natural with no added preservativesSome of our products may contain nuts. Our facility is NOT a nut-free facility, and as a result it is possible that any product may have come in contact with nut or nut oils", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Mango Cheesecake", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Baked in", "Price": " and Imported from", "Discount": " France", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Large round and crispy cookies stamped with the mark of St Michel\u2019s heritage\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Bakery & Desserts", "Price": "$29.99 ", "Discount": "No Discount", "Rating": "Rated 4.4 out of 5 stars based on 1679 reviews.", "Title": "David's Cookies Brownie and Cookie Combo Pack", "Currency": "$", "Feature": "6 Rocky Road Brownies", "Product Description": null}, {"Sub Category": "1 Triple Chocolate", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Each Cake Arrives With It\u2019s Own Cake Care Card", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "PRODUCEDIN AFACILITYWHERENUTS", "Price": "MILK", "Discount": "EGGS", "Rating": "SOY&FLOURAREPRESENT   A little history about the world famous Ferarra bakery.   Since 1892 when our great grandfather", "Title": " Enrico Scoppa and our great grand-uncle", "Currency": " Antonio Ferrara", "Feature": " opera impresario and showman", "Product Description": " opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties"}, {"Sub Category": "We take the extra step of baking two", "Price": " three and sometimes four times a day", "Discount": " in small batches. Because of the frequency with which we bake", "Rating": " Ferrara acquired our great reputation for quality and freshness. Today", "Title": " Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892", "Currency": " the spirit", "Feature": " recipes and devotion to quality has changed very little.", "Product Description": null}, {"Sub Category": "Bakery & Desserts", "Price": "$119.99 ", "Discount": "No Discount", "Rating": "Rated 2.2 out of 5 stars based on 4 reviews.", "Title": "\"Ferrara's Bakery 48 Mini Cannoli's (24 Plain Filled and 24 Hand Dipped Belgian Chocolate) - 1.5\"\" to 2\"\" In Length\"", "Currency": "$", "Feature": "24 Mini Plain Filled Cannoli   24 Mini Hand Dipped Belgian Chocolate Cannoli   Plain Cannoli: After thawing should be eaten within 2 hours for maximize crispness   Chocolate Cannoli: After thawing should be eaten within 48 hours   Frozen: Can be stored up to a year", "Product Description": "\"Ferrara's Bakery of Little Italy in New York City 24 Mini Plain Filled Cannoli and 24 Mini Hand Dipped Belgian Chocolate Cannoli   The Cannoli is a Sicilian pastry. First introduced more than 125 years ago by Cafe\u2019 Ferrara. A light crispy shell, sweet, velvety, creamy ricotta with chocolate chips & citron. Ferrara dips their traditional crispy cannoli shells by hand in rich Belgian chocolate before filling them with sweet ricotta cream studded with chocolate chips   A little history about the world famous Ferarra bakery. Since 1892 when our great grandfather, Enrico Scoppa and our great grand-uncle, Antonio Ferrara, opera impresario and showman, opened a cafe called Caf\u00e9 A. Ferrara in Little Italy section in New York City we have prided ourselves on creating superb Italian specialties   We take the extra step of baking two, three and sometimes four times a day, in small batches. Because of the frequency with which we bake, Ferrara acquired our great reputation for quality and freshness. Today, Ferrara is still a family owned business operated by the fifth generation. \u0422hat\u2019s perhaps the most wonderful thing about Ferrara. Since its beginning in 1892, the spirit, recipes and devotion to quality has changed very little   Cannolis are made fresh, frozen and shipped on dry ice   1 1/2-2\"\" In length"}, {"Sub Category": "If not being consumed immediately upon arrival", "Price": " your pie should be placed in the freezer. The pie will arrive at least partially frozen and can be refrozen in its original packaging for up to 6 months or stored in a refrigerator for up to 7 days. The pie is fully baked and can be enjoyed chilled or at room temperature. Thaw the pie in the fridge for about 4 hours (or on your kitchen counter for around 2 hours).\"", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Important Handling Instructions:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Some of our products may contain nuts. Our facility is NOT a nut-free facility", "Price": " and as a result it is possible that any product may have come in contact with nut or nut oils.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "250 mg BCAA", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "The ultimate recovery support", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Free of dairy", "Price": " lactose", "Discount": " soy", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Non-Dairy Beverage", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "BARISTA'S CHOICE DAIRY-FREE MILK: Califia Farms Caf\u00e9 Almond Milks are favored by professional baristas across the country for their ability to froth", "Price": " steam", "Discount": " and form latte art.", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "3 Rinse + Rebeet   6 (2.4 oz.) Elixir Shots   3 Ginger", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Rich in vitamins and minerals", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "If needed", "Price": " consume organic fruits and vegetables moderately   For any questions or concerns regarding your online order", "Discount": " please reach out to Pulp and Press directly at support@pulpandpress.com or by phone at (866)-208-9319. A representative will be in touch with you within 24 hours.\"", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$24.99 ", "Discount": "No Discount", "Rating": null, "Title": "Fiji Natural Artesian Water, 23.7 fl oz, 12-count", "Currency": "$", "Feature": "Natural Artesian Water   23.7 fl oz Bottle with Sports Cap   12 Total Bottles", "Product Description": "Perfect for hiking, traveling and on-the-go hydration"}, {"Sub Category": "Delicious", "Price": " refreshing", "Discount": " and actually good for you", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Prebiotics", "Price": " plant fiber", "Discount": " and botanicals to support digestive health", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Naturally Caffeinated (sourced from green tea)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No preservatives", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "REFRESHING: LaCroix is a wholesome", "Price": " refreshing sparkling water that you can feel good about sharing with your friends and family. Enjoy the delicious flavor at the gym", "Discount": " in the office or on the go!", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "8 g Protein per Serving", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Infused with Moringa", "Price": " Minerals", "Discount": " and Antioxidants", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Nutrient-Dense Moringa Oleifera", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Vegan", "Price": " Sugar-Free", "Discount": " Soy-Free", "Rating": " Dairy-Free", "Title": " Gluten-Free\"", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Vegan\"", "Price": "Pure Coconut Water", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "The Original", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Bottle Fee will apply to shipments going to California", "Price": " Connecticut", "Discount": " Delaware", "Rating": " Michigan", "Title": " New York", "Currency": " Oregon", "Feature": " Vermont and Maine.   100% spring water", "Product Description": null}, {"Sub Category": "96 total jugs", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Deer Park   ND", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Ice Mountain   OK", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Arrowhead   PA", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Ice Mountain   TN", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1-Chamomile Herbal Tea (Caffeine Free)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Includes 3 greens with ginger", "Price": " 3 spicy roots", "Discount": " 3 sweet citrus", "Rating": " 3 wellness shots", "Title": " 3 vitality shots", "Currency": " 3 elderberry shots\"", "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$21.79 ", "Discount": "No Discount", "Rating": null, "Title": "Ito En Oi Ocha Unsweetened Green Tea, 16.9 fl oz, 12-count", "Currency": "$", "Feature": "Non-GMO   Sugar Free   Fat Free   Product Of Taiwan", "Product Description": "Made With Japanese Green Tea12-count16.9 fl oz BottlesTotal Net Volume: 202.8 fl oz"}, {"Sub Category": "Net Weight 240 fl. oz.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No preservatives", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$37.99 ", "Discount": "No Discount", "Rating": null, "Title": "Celsius Sparkling Energy Drink, Wild Berry, 12 fl oz, 24-count", "Currency": "$", "Feature": "Wild Berry   12 fl oz Cans   24 Total Cans   0 Sugar   Gluten Free", "Product Description": "Kosher"}, {"Sub Category": "No preservatives", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No sugar", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$23.99 ", "Discount": "No Discount", "Rating": null, "Title": "Bigelow Herbal Tea, Variety Pack, 168 bags", "Currency": "$", "Feature": "Caffeine Free   Kosher   All Natural   Gluten Free", "Product Description": "Variety pack:"}, {"Sub Category": "1-I Love Lemon", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "7g Protein per Serving", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Net Weight 4lb\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$15.99 ", "Discount": "No Discount", "Rating": null, "Title": "Dole, 100% Pineapple Juice, 6 fl oz, 24-Count", "Currency": "$", "Feature": "Kosher   Not from Concentrate   100% Pineapple Juice   Excellent Source of Vitamin C   Good Source of Vitamins A & E", "Product Description": "24-Count"}, {"Sub Category": "Cold Pressed For Maximum Nutrition   Certified Organic   No Preservatives", "Price": " Added Sugar", "Discount": " Additives (Colors", "Rating": " Flavors)   Vegan & Gluten Free\"", "Title": "Due to the perishable nature of this item, orders do NOT ship over the weekend. Orders only ship Monday, Tuesday and Wednesday for Wednesday, Thursday, Friday deliveries.   At Pulp & Press, we're dedicated to making healthy living convenient and accessible to everyone. Our cold-pressed juices and wellness shots are made with only the highest quality, 100% organic, plant-based, and raw ingredients, so you can be sure you're getting the most nutritional value out of every sip. Say hello to a healthier you with our cold pressed juices, packed with 3-4 lbs of fresh produce per bottle.   Features:   Cold Pressed For Maximum Nutrition", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "3 Count", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "250 calories per bottle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Citrus Juices - Our citrus blend is refreshing", "Price": " hydrating and crisp. It contains ingredients like lemon and mint that are known to stimulate and alkalize the system", "Discount": " aid in digestion", "Rating": " and provide a pick-me-up when you're feeling down.", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Individually labeled", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Keep refrigerated", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Vanilla Chai\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Zero sugar", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$54.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 6 reviews.", "Title": "Joyburst Hydration Drink, Variety Pack, 12 fl oz, 24-count ", "Currency": "$", "Feature": "0g of Sugar   0 Calories   Recyclable, sustainable packaging", "Product Description": "Renew your mind and body with the Joyburst Beverage Variety Tetra Pack! Indulge in the superfood qualities of lions mane to refresh your focus and the mouth-watering flavor of Strawberry Lemonade, Watermelon, and Peach. These premium hydration beverages will refresh your focus and quench your thirst. 2 packs x 12 units; 8 units of each flavor in sleek, recyclable and resealable packages are ideal for on-the-go hydration.   Vitamin Bs power blend (B1, B3, B6, B12)"}, {"Sub Category": "Resealable cans\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "3 Wellness Shots", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Individually labeled", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Red Bull Sugarfree is: Wheat-free", "Price": " gluten-free", "Discount": " dairy-free", "Rating": " lactose-free", "Title": " vegetarian", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "B-group vitamins: Vitamins are essential micronutrients that are required for maintaining normal body functions.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No artificial sweeteners", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$61.99 ", "Discount": "No Discount", "Rating": null, "Title": "Red Bull Energy Drink, 12 fl oz, 24-count", "Currency": "$", "Feature": "With Taurine   Lightly Carbonated   160 Calories per Can", "Product Description": "Energy drink12 oz can24-countRed Bull Energy Drink's special formula contains ingredients of high quality: Caffeine, Taurine, some B-Group Vitamins, SugarsOne 12 fl oz can of Red Bull Energy Drink contains 114 mg of caffeine, about the same amount as in an equal serving of home-brewed coffeeRed Bull Energy Drink is: Wheat-free, gluten-free, dairy-free, lactose-free, vegetarianAluminum cans are forever recyclable, without any loss in qualityVitalizes Body and Mind.\u00aeRED BULL GIVES YOU WINGS Inspired by functional drinks from the Far East, Dietrich Mateschitz founded Red Bull in the mid-1980s. He developed a new product and a unique marketing concept and launched Red Bull Energy Drink on April 1, 1987 in Austria.A brand new product category - Energy Drinks - was born.WHEN TO DRINKRed Bull is appreciated worldwide by top athletes, busy professionals, college students and travelers on long journeys.WHAT'S INSIDE THE CAN Always check can labels for most updated product ingredient values. Some values declared on labels may vary slightly depending on production locations.Caffeine: Caffeine was widely used by ancient civilizations. It was traditionally consumed from natural sources like tea, coffee, cacao beans and cola nuts and appreciated for its stimulating effects on the human body. B-group vitamins: Vitamins are essential micronutrients that are required for maintaining normal body functions. Sugars: Red Bull Energy Drink is made with real sugars.Taurine: Taurine is an amino acid, naturally occurring in the human body and present in the daily diet. It is involved in a wide range of biological processes.Ingredients: Carbonated Water, Sugar, Glucose, Citric Acid, Taurine, Natural and Artificial Flavors, Sodium Bicarbonate (Baking Soda), Magnesium Carbonate, Colors, Caffeine, Niacinamide, Pyridoxine HCl (Vitamin B6), Calcium Pantothenate, Vitamin B12"}, {"Sub Category": "Beverages & Water", "Price": "$24.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 3 reviews.", "Title": "Ready Sports Drink Light, Mango Lemonade, 16.9 fl oz, 12-count", "Currency": "$", "Feature": "Mango Lemonade   16.9 fl oz Bottles   12 Total Bottles", "Product Description": "Electrolytes for hydration"}, {"Sub Category": "Individually labeled", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1.93 fl oz Bottle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gluten-Free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Beverages & Water", "Price": "$22.99 ", "Discount": "No Discount", "Rating": null, "Title": "Body Armor Sports Drink, Variety Pack, 16 fl oz, 20-count", "Currency": "$", "Feature": "7 - Strawberry Banana   7 - Orange Mango   6 - Fruit Punch   16 fl oz Bottles   20 Total Bottles", "Product Description": "Coconut water"}, {"Sub Category": "Sugar Free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Single serve vitamin C drink with 130% daily value per bottle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "ANTIOXIDANT VITAMIN E: To help defend the body against potentially cell-damaging", "Price": " unstable molecules known as free radicals.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Naturally Caffeinated (sourced from green tea)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Nut free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Breakfast", "Price": "$9.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Whole Grain Rolled Oats, 10 LBS", "Currency": "$", "Feature": "Kosher   Whole Grain Rolled Oats   Resealable Bag   Product of Canada   Packed in the USA", "Product Description": "Net Weight 10 LBS"}, {"Sub Category": "Breakfast", "Price": "$28.99 ", "Discount": "After $8 OFF", "Rating": "Rated 4.8 out of 5 stars based on 1275 reviews.", "Title": "NuTrail Keto Nut Granola Blueberry Cinnamon 2-Pack (22 oz each)", "Currency": "$", "Feature": "2-pack (22 oz each)   Keto   3g Net Carbs", "Product Description": "Who is NuTrail?At NuTrail\u2122 our mission is to make your keto/low-carb journey easier. In the last few years, keto has become a lifestyle well known for helping people lose weight, gain mental clarity, regulate mood, and improve overall well-being. The hardest part? Sticking to it! That's why we created amazing, delicious, better-for-you-low-carb (and low sugar) products--to help you adhere to a better lifestyle.NuTrail Keto Nut Granola \u2013 Blueberry Cinnamon offers keto and low carb dieters a better, delicious, keto breakfast. An all-natural medley of pecans, sunflower seeds, pumpkin seeds, coconut, almonds, blueberries, butter, and monk fruit sweetener mixed with just the right amount of cinnamon will have your taste buds in heaven. To stay low carb, we recommend pairing this with unsweetened almond milk or unsweet, plain, greek yogurt. NuTrail is committed making high quality, low carb foods.How is our granola so sweet and still low carb?Simple. We leverage the sweetness of amazing sugar alternative: monk fruit sweetener. That, combined with the healthy fats from our blend of nuts creates the crunch sweet sensation that will sure to become a staple in any pantry.I'm not on Keto, can I still enjoy this?Absolutely! Many of our customers enjoy all the way through and after they're done with the keto diet. It really is that good.2-pack (22 oz each)Delicious, healthy breakfast. Keto Friendly. Low Carb Food. Only 3g Net Carbs!The crunchiness you've been missing in your keto lifestyle.A delicious blend of pecans, sunflower seeds, pumpkin seeds, coconut chips, almonds, blueberries, butter, and monk fruit sweetener. And of course, just the right amount of cinnamon.Made with simple, clean ingredients."}, {"Sub Category": "33.1 oz carton\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "100% Whole Grain Oats", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "15 Apples & Cinnamon", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Made with 100% Whole Grain Oats", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Net Weight: 40.7 oz.   *3 grams of soluble fiber daily from whole grain oat foods", "Price": " like Honey Nut Cheerios cereal", "Discount": " in a diet low in saturated fat and cholesterol", "Rating": " may reduce the risk of heart disease. Honey Nut Cheerios cereal provides .75 grams per serving.\"", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Milky Way", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "These bars are made without artificial colors or preservatives", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Little things really can mean a lot\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "\u200b0.78 oz. Bars\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "240 candies", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "67.4 oz bag   More Information:   Kosher\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$39.99 ", "Discount": "No Discount", "Rating": null, "Title": "Hershey's Milk Chocolate With Almonds, 1.45 oz, 36-count", "Currency": "$", "Feature": "Whole Almonds   Kosher   Gluten-Free   1.45 oz bars   36-count", "Product Description": "Whole Almonds36-count1.45 oz bars"}, {"Sub Category": "Candy", "Price": "$15.99 ", "Discount": "No Discount", "Rating": null, "Title": "Lindt Lindor Chocolate Truffles, Assorted Flavors, 21.2 oz", "Currency": "$", "Feature": "5 flavor assortment: Milk, Dark, White, Caramel, and 70% Extra Dark Chocolates Truffles   Irresistibly Smooth   Kosher   21.2 oz bag", "Product Description": "Chocolate Truffles5 flavor assortmentKosher21.2 oz bag"}, {"Sub Category": "Candy", "Price": "$11.99 ", "Discount": "No Discount", "Rating": null, "Title": "Charms Mini Pops, Assorted Flavors, 400-count", "Currency": "$", "Feature": "Peanut Free   Gluten Free   18 Flavors   400-Count   Net Weight 4.49lb", "Product Description": "Flavors include:   Mango"}, {"Sub Category": "Candy", "Price": "$31.99 ", "Discount": "No Discount", "Rating": null, "Title": "M&M's, Snickers and More Chocolate Candy Bars, Variety Pack, 30-count", "Currency": "$", "Feature": "Kosher Dairy   Full Size   Individually Wrapped   30-Count   Net Weight 53.66oz", "Product Description": "This full size candy bars variety pack features thirty singles size SNICKERS Chocolate Bars, M&M'S Peanut Chocolate Candies, M&M'S Milk Chocolate Candies, TWIX Cookie Bars, and MILKY WAY Candy Bars. Order this box of assorted chocolate bars to make sure you're the hero house on Halloween night or the favorite party guest. Individually wrapped packs also make a great addition to concession stands and fundraisers. Be sure to get these classic favorites for your vending machines.This 30-count variety mix of full size chocolate bars features SNICKERS, TWIX, M&M'S Peanut Chocolate Candies, M&M'S Milk Chocolate Candies and MILKY WAY Chocolate Candy Bars.Contains one (1) 53.66-ounce, 30-count box of full-size, individually wrapped (8) SNICKERS, (7) TWIX, (6) M&M'S Peanut Chocolate Candies, (5) M&M'S Milk Chocolate Candies and (4) MILKY WAY Chocolate Candy BarsShare these full size Candy Bars as a chocolate treat with friends, family or party guestsIndividually wrapped candy makes a perfect addition to concession stands and fundraisersRestock your vending machine with classic candy favoritesThis assorted box of 30 full-size candy bars has a favorite Candy Brand for everyone"}, {"Sub Category": "CELEBRATE THE MOMENT: Share special moments with your family and friends", "Price": " or take a moment just for you. Ferrero chocolates make indulgent treats that are great for unwinding after a long day", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Non-GMO", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$18.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 601 reviews.", "Title": "Ghirardelli Chocolate Squares Premium Chocolate Assortment, 23.8 oz", "Currency": "$", "Feature": "Minimum purchase of 2 bags   Milk Chocolate Caramel   Dark Chocolate Sea Salt Caramel   Milk Chocolate   Dark Chocolate 60% Cacao", "Product Description": "Indulge in a premium chocolate assortment with GHIRARDELLI Premium Assorted Chocolate squares. This bag of individually wrapped candy squares is perfect for gifting, entertaining and personal enjoyment. There's a chocolate in this collection for everyone, whether you crave rich, indulgent milk chocolate, slow-melting dark chocolate, or luscious caramel. Each bag of GHIRARDELLI squares includes a variety of best selling flavors, including Milk Chocolate Caramel, Dark Chocolate Sea Salt Caramel, Milk Chocolate, and Dark Chocolate 60% Cacao. GHIRARDELLI chocolate squares are individually wrapped, making them ideal to tuck in purses, bags and desk drawers for an afternoon pick-me-up. Committed to ultimate quality from bean to bar, GHIRARDELLI chocolate is crafted with care using high quality ingredients for a smooth, delectable treat. GHIRARDELLI Makes Life a Bite Better. In addition to Premium Assorted Chocolate squares, GHIRARDELLI squares are available in other delectable flavors, including Dark Chocolate Mint, White Chocolate Caramel and more. All GHIRARDELLI chocolate is sustainably sourced, ensuring the highest quality from bean to final product.Minimum purchase of 2 bagsMust purchase in multiples of 2One (1) 23.8 oz bag of GHIRARDELLI Premium Assorted Chocolate squares, Chocolate AssortmentVariety of premium assorted chocolates includes Milk Chocolate Caramel, Dark Chocolate Sea Salt Caramel, Milk Chocolate, and Dark Chocolate 60% Cacao Ideal chocolate candy squares for gifting, entertaining and personal enjoymentIndividually wrapped chocolate squares are a perfectly sized indulgent treatGHIRARDELLI squares are crafted with care using high quality ingredientsChocolate squares are certified kosher"}, {"Sub Category": "Candy", "Price": "$54.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 228 reviews.", "Title": "Godiva Masterpieces Assortment of Legendary Milk Chocolate 14.9 oz 4-Pack", "Currency": "$", "Feature": "Milk Chocolate Caramel Lion of Belgium   Milk Chocolate Hazelnut Oyster   Milk Chocolate Bliss   Individually Wrapped   14.9 oz 4-pack", "Product Description": "Introducing Godiva Masterpieces - Godiva\u2019s most exquisite chocolates now available in delightful individually wrapped mini chocolates, perfect to enjoy anytime. Each Masterpiece is crafted in the shape of a signature chocolate and filled with smooth and creamy fillings that melt in your mouth.This Masterpieces Assortment includes our Milk Chocolate Caramel Lion of Belgium with a smooth caramel filling, Milk Chocolate Hazelnut Oyster with a creamy hazelnut praline filling, and Milk Chocolate Bliss with a creamy milk chocolate filling. This variety of signature pieces offers the best of Godiva chocolate, made to savor every day.Includes:Godiva Masterpieces Assort of Legendary Milk Chocolate14.9 oz 4-Pack Milk Chocolate Caramel Lion of BelgiumMilk Chocolate Hazelnut OysterMilk Chocolate BlissIndividually Wrapped Chocolates"}, {"Sub Category": "Candy", "Price": "$44.99 ", "Discount": "No Discount", "Rating": "Rated 2.5 out of 5 stars based on 2 reviews.", "Title": "Chocolate Moonshine Co. Belgian Artisan Black Cherry Bourbon Bark, 20 oz.", "Currency": "$", "Feature": "Belgian Artisan Bark (20 oz.)   Black Cherry Bourbon   Creamy Ganache Center   567-gram gift box", "Product Description": "The perfect gift for those with discerning tastebuds. Only the finest quality ingredients will do for something this stunning! Beautifully hand-crafted Belgian Chocolate designed in luxurious layers. Each delicious layer sets the flavor notes of the previous layer into a different stratosphere for your taste buds to enjoy!   Size: 567-gram gift box! Full of Color, Full of Flavor."}, {"Sub Category": "What\u2019s in it: Beautiful", "Price": " handmade Belgian Artisan Chocolate Truffle Bark", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "ADA accepted\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Haribo Gummy Bears", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 Pieces of MIDNIGHT SWIRL - Velvety ganache made with 85% chocolate in a dark chocolate shell.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "ORANGE CRESCENT - Dark chocolate with orange", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Strawberry and Mint", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Good source of Vitamin C", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "Ice Breakers Cube Peppermint Gum, 40 pieces, 4-count", "Currency": "$", "Feature": "Sugar Free   40-pieces   Natural & Artifical Flavor   30% fewer calories than sugared gum   ADA accepted", "Product Description": "40 pieces per pack4-count160 pieces totalPeppermint"}, {"Sub Category": "Candy", "Price": "$17.99 ", "Discount": "No Discount", "Rating": null, "Title": "Original Gourmet Lollipops, Variety, 50-count", "Currency": "$", "Feature": "Gluten Free   Peanut Free   Naturally and Artificially Flavored   Net Weight 54.7oz", "Product Description": "Original Gourmet LollipopsVariety: Cotton Candy, Wild Cherry, Bubble Gum, Watermelon, Banana Split, Blueberries & Cream, Creamsicle"}, {"Sub Category": "Candy", "Price": "$18.99 ", "Discount": "No Discount", "Rating": null, "Title": "M&M's Milk Chocolate Candy, 62 oz Jar", "Currency": "$", "Feature": "Resealable Jar   Bulk Assorted M&M'S Milk Chocolate Candies   Party-size Jar   62 oz container", "Product Description": "M&M'S Milk Chocolate Candies"}, {"Sub Category": "Strawberry", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$44.99 ", "Discount": "No Discount", "Rating": null, "Title": "Twix Share Size Chocolate Caramel Cookie Candy Bar, 3.02 oz, 24-count", "Currency": "$", "Feature": "4 To Go bars   Keep in cool, dry, place   3.35 oz   24-count", "Product Description": "Twix Candy Bar4 To Go bars3.35 oz24-count"}, {"Sub Category": "Candy", "Price": "$8.99 ", "Discount": "No Discount", "Rating": null, "Title": "E.Frutti Gummi Hot Dog, 0.35 oz, 60-count", "Currency": "$", "Feature": "Fat Free Food   Gluten Free   Nut Free   Individually packaged   60-count", "Product Description": "Gummi Hot DogIndividually packaged0.35 oz pack60-count"}, {"Sub Category": "Candy", "Price": "$38.99 ", "Discount": "No Discount", "Rating": null, "Title": "Skittles Tropical Full Size Chewy Candy, 2.17 oz, 36-count", "Currency": "$", "Feature": "Kiwi-Lime, Mango-Peach, Passion Punch, Strawberry-Orange-Banana and Strawberry-Watermelon   Tropical Flavored Skittles   2.17 oz pack   36-count   Net Weight 4lb", "Product Description": "Skittles Tropical - Kiwi-Lime, Mango-Peach, Passion Punch, Strawberry-Orange-Banana and Strawberry-Watermelon 2.17 oz pack 36-count"}, {"Sub Category": "Made from a French recipe   Packed in 4 giftable tin boxes   All Natural", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$19.99 ", "Discount": "No Discount", "Rating": null, "Title": "Godiva Premium Assorted Chocolates, 27-count", "Currency": "$", "Feature": "Dark Chocolate, Milk Chocolate, and White Chocolate   Variety fillings   1 tray with 27 pieces   11.3 total oz", "Product Description": "Godiva Belgium Assorted Chocolates"}, {"Sub Category": "Candy", "Price": "$39.99 ", "Discount": "No Discount", "Rating": null, "Title": "Crunch Candy Bar, 1.55 oz, 36-count ", "Currency": "$", "Feature": "Kosher   36 Full Size candy bars   100% milk chocolate and crisped rice   Gluten Free   An irresistible treat that can't be beat", "Product Description": "It's time to get your sweet treat on with CRUNCH Full Size candy bars. These perfectly full sized, crispy chocolate bars are just for you and definitely big on taste. Packed with creamy 100% milk chocolate and crisped rice, these individually wrapped candy treats are easy to snack on and enjoy. Take these irresistible chocolate bars anywhere and share with anyone. They're great for home or the office, school lunch boxes, parties, get-togethers, dessert or a movie night sweet treat. CRUNCH is made with no artificial flavors or colors. CRUNCH Full Size candy bars are the treat everyone knows and loves.   UNWRAP DELICIOUSNESS: CRUNCH delivers the taste you know and love with this box of 36 individually wrapped, full sized, milk chocolate candy bars"}, {"Sub Category": "Candy", "Price": "$26.99 ", "Discount": "No Discount", "Rating": null, "Title": "Payday Peanut Caramel Bar, 1.85 oz, 24-count", "Currency": "$", "Feature": "Kosher   Gluten Free   24-count   1.85 oz bars   Total Net Weight: 12.4 oz", "Product Description": "Salty peanuts and sweet caramel24-count1.85 oz barsTotal Net Weight: 12.4 oz"}, {"Sub Category": "UNIQUELY DELICIOUS: Smooth milk chocolate with dark chocolate drizzle covers a crispy wafer and pockets of creamy hazelnut filling", "Price": " delivering sensational taste with every bite", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$49.99 ", "Discount": "No Discount", "Rating": null, "Title": "M&M's Chocolate Candy, Peanut, Full Size, 1.74 oz, 48-count", "Currency": "$", "Feature": "Contains 48 full size pouches of M&M'S Milk Chocolate Peanut Candy   Made with peanuts and milk chocolate   Stock vending machines and concessions stands   Full-size packs are perfect for sharing   Bring colorful fun to everyday celebrations", "Product Description": "Celebrate everyday moments with M&M'S Peanut Chocolate Candy. Made with real milk chocolate, roasted peanuts and coated in a colorful candy shell, M&M'S Candy bite-size chocolates bring delicious fun to game day, the work day or any day. With 48 individual full size pouches in every box, this bulk candy package is great for stocking vending machines, concession stands and the office pantry. There's no end to the fun you can have with M&M'S Peanut Chocolate Candy.Celebrate everyday moments with the delicious, colorful fun of Peanut M&M'S Candy. These singles size pouches are great for game day or as a midday treat.Contains 48 full size pouches of M&M'S Milk Chocolate Peanut CandyMade with peanuts and milk chocolateStock vending machines and concessions standsFull-size packs are perfect for sharingBring colorful fun to everyday celebrations"}, {"Sub Category": "Gummy clusters very berry has a taste that can\u2019t be beat", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$21.99 ", "Discount": "No Discount", "Rating": null, "Title": "Hawaiian Host Aloha Gems, Milk Chocolate Covered Macadamia Nuts, 8 oz. Box, 3-Count", "Currency": "$", "Feature": "Kosher   Keep Cool and Dry   3 Boxes   14 Pieces per 8 oz Box   Net Weight 24 oz", "Product Description": "Aloha Gems"}, {"Sub Category": "Candy", "Price": "$14.49 ", "Discount": "No Discount", "Rating": null, "Title": "5 Gum Sugar Free Chewing Gum, Peppermint Cobalt, 15 Sticks, 10-Count", "Currency": "$", "Feature": "Peppermint Cobalt   Sugar Free Gum   Natural and Artificial Flavors   15 Sticks Per Pack   10-Count", "Product Description": "Cool burst of refreshing peppermint flavor with every bite"}, {"Sub Category": "Net Weight 36 oz\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$13.99 ", "Discount": "No Discount", "Rating": null, "Title": "Hi-Chew Fruit Chews, Variety, 1.76 oz, 15-count", "Currency": "$", "Feature": "Variety pack: 3-Cherry, 3-Grape, 3-Green Apple, 3-Mango, 3-Strawberry   Gluten free   Fruit Chews   1.76 oz   15-count", "Product Description": "Fruit ChewsVariety pack: 3-Cherry, 3-Grape, 3-Green Apple, 3-Mango, 3-Strawberry1.76 oz15-count"}, {"Sub Category": "chocolate and topped with a fluffy", "Price": " all-natural marshmallow. No need to sip this treat; you can gulp it down!", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Includes:   3.25 oz 8-count", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$36.99 ", "Discount": "No Discount", "Rating": null, "Title": "Starburst Chewy Candy, Original, Full Size, 2.07 oz, 36-count", "Currency": "$", "Feature": "STARBURST Can Be Enjoyed Alone or as a Burst of Juicy Flavor Added to Your Favorite Recipes   Add an Unexplainably Juicy Treat to Your Party, Around Your House\u2014or Stash a Few for Snacking Later   The Strawberry, Cherry, Orange, and Lemon Flavors That Started It All   Gluten-Free, Fruit-Flavored Candy Chews With a Soft, Chewy Texture", "Product Description": "Fruit ChewsOriginal flavors - Cherry, Lemon, Orange and Strawberry2.07 oz pack36-count   Experience the EXTRAordinary juiciness of STARBURST Fruit Chews. With 36 singles size packs of STARBURST Original Candy in every box, there's plenty of fruity, chewy fun for everyone. Featuring the original STARBURST Candy flavors that started it all: strawberry, cherry, orange and lemon flavors. This bulk candy package is great for stocking concession stands, vending machines or the office pantry. From STARBURST candies right out of the wrapper to STARBURST recipes and decorations, there are endless ways to add a burst of juicy flavor every day."}, {"Sub Category": "Approximately 249 pieces", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "36-count   This bulk chocolate candy box includes 36 individually wrapped Full Size MILKY WAY chocolate candy bars. Smooth nougat", "Price": " creamy caramel", "Discount": " and rich milk chocolate; that's what some might call the MILKY WAY trifecta. A treat this delectable is too good not to share. This bulk candy box featuring 36 MILKY WAY chocolate candy bars makes it easy to share delicious chocolate and caramel with friends", "Rating": " family", "Title": " and coworkers. Individually wrapped bulk Full Size candy bars are ideal for keeping the pantry stocked for movie night with the family and small celebrations with friends. These caramel-filled candy bars make great on-the-go treats", "Currency": " pack them in lunches", "Feature": " or take them along on family road trips to enjoy caramel chocolate candy on the road. MILKY WAY bulk Full Size candy bars are a tasty way to share your love of chocolate candy with friends and family. Buying candy bars in bulk ensures you have plenty of chocolate on hand for filling candy bags and candy gift baskets. Be the best house on the block this Halloween when you hand out Full Size MILKY WAY chocolate candy to Trick-or-Treaters Full Size candy bars make great stocking stuffer candy gifts and Easter basket candy. This 36-count bulk candy package is great for stocking vending machines", "Product Description": " concession stands"}, {"Sub Category": "Candy", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "Mentos, Mint, 1.32 oz, 15-count", "Currency": "$", "Feature": "Mentos   Chewy Mints   15-count   1.32 oz roll   19.8 oz. Total Net Weight", "Product Description": "15-count1.32 oz rollMentosChewy Mints"}, {"Sub Category": "1.92 oz bar", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "What classic dynamic duo is delicious and goes great with a glass of milk?", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 4.5 oz. Chocolate Peanut Butter", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 4.5 oz. Double Dark Chocolate Sea Salt", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$42.99 ", "Discount": "No Discount", "Rating": "Rated 3.8 out of 5 stars based on 12 reviews.", "Title": "A'cappella Bark Ensemble, 3.4 oz, 8-count", "Currency": "$", "Feature": "8   3.4 oz.   Irish Cream Mud Pie   Candy Bar   Berry Shortcake   Hand-Crafted", "Product Description": "\u201cMMMM OOOH YUMM!\u201d"}, {"Sub Category": "For too long", "Price": " chocolate has gone down the path of one-note flavors and flat innovation. At A\u2019cappella", "Discount": " we let the rhythm of our imagination guide the creation of our confections.", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 3.4 oz. Irish Cream Mud Pie", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$26.99 ", "Discount": "No Discount", "Rating": null, "Title": "Altoids Breath Mints, Hard Peppermint Candy, 1.76 oz, 12-count", "Currency": "$", "Feature": "The original celebrated curiously strong mints   12-count   1.76 oz. tins", "Product Description": "12-count1.76 oz. tins"}, {"Sub Category": "Candy", "Price": "$15.49 ", "Discount": "No Discount", "Rating": null, "Title": "Red Vines Twists, Original Red Licorice Candy, 4 oz, 15-count", "Currency": "$", "Feature": "Grab a 4 oz Bag of Red Vines Licorice for a Sweet Treat on Movie Night   Perfect for Parties, Concession Stands, or as an Every Day Snack   This Soft & Chewy Red Licorice Pairs with Salty Snacks like Popcorn, and Trail Mix   Share these Licorice Twists as a Sweet Treat with Family, Friends, or Party Guests", "Product Description": "The American Licorice Company has made Red Vines Original Red Licorice using the same unique red licorice recipe and small batch process for generations. Made with only 5 Red Vines licorice ingredients, these twists are a perfect snack to satisfy a sweet craving. Reward yourself with these soft & chewy vintage movie theater treats you can now enjoy from the comfort of your home! While this licorice candy does contain sugar you can still feel good about snacking because it is fat free, low in sodium, and Kosher & Halal certified. Each easy open 4 oz bag holds 4 servings of licorice straws and only 100 calories per serving. This box contains 15 packs of 4 oz Red Vines Licorice bags that are ready to be resold. The container can be made into a convenient display box, perfect for concession stands, convenience stores and parties. Stock up and save on all Red Vines!   Original Licorice Twists"}, {"Sub Category": "Kosher\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Crisp wafers in milk chocolate", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "MINTS ON-THE-GO \u2013 The portable pack fits perfectly in your pocket or purse\u2014great for on-the-go sharing and refreshment", "Price": " like mints for after coffee\"", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Candy", "Price": "$26.99 ", "Discount": "No Discount", "Rating": null, "Title": "Baby Ruth, 1.9 oz, 24-count", "Currency": "$", "Feature": "Full Size candy bar   1.9 ounces bar   Classic taste of peanuts, caramel and nougat   A great on-the-go treat   No Artificial Flavors or Colors", "Product Description": "It's time to get your sweet treat on with Baby Ruth Full Size candy bars. These peanuty, chocolatey and perfectly sized bars are just for you and big on taste. Packed with dry roasted peanuts, rich caramel and smooth nougat, these individually wrapped candy treats are easy to snack on and enjoy. Take these irresistible chocolate bars anywhere and share with anyone. They're great for home or the office, parties, get-togethers, dessert or a movie night sweet treat. Baby Ruth is made with no artificial flavors or colors. Baby Ruth Full Size candy bars are the treat everyone knows and loves.   UNWRAP DELICIOUSNESS: Baby Ruth delivers the taste you know and love with this peanuty candy bar"}, {"Sub Category": "14.8 oz per bag", "Price": " 4-pack\"", "Discount": "GODIVA Masterpieces \u2013 GODIVA\u2019s most exquisite chocolates now available in delightful individually wrapped mini chocolates, perfect to enjoy anytime.   GODIVA\u2019s Dark Chocolate Ganache Heart is inspired by GODIVA\u2019s most beloved chocolate; the heart-shaped \u2018coeur iconique\u2019. A bold dark chocolate Heart with a luxurious, velvety chocolate ganache filling.   Includes:   Godiva Dark Chocolate Ganache Hearts", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Must purchase in multiples of 2", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$28.99 ", "Discount": "After $6 OFF", "Rating": null, "Title": "Tide Pods HE Laundry Detergent Pods, Spring Meadow, 156-count", "Currency": "$", "Feature": "Spring Meadow   HE Compatible   39 Pods per Bag   4 Bags per Box   156 Total Loads", "Product Description": "Spring Meadow"}, {"Sub Category": "39 Pods per Bag", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "VERSATILITY: Can be used virtually anywhere and fits into tight spaces.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$15.99 ", "Discount": "After $4 OFF", "Rating": null, "Title": "Swiffer Sweeper Heavy Duty Dry Sweeping Cloth Refills, 50-count", "Currency": "$", "Feature": "\"50 Pads   Heavy Duty   10.3\"\" x 7.8\"\"\"", "Product Description": "Swiffer Sweeper Heavy Duty Dry Sweeping Cloths Trap + Lock 2x more dirt, dust, and hair* allowing you to quickly and easily clean all your hard floor surfaces. *vs. multi-surface sweeper dry cloth2x More Trap + Lock of dirt, dust, and hair vs. multi-surface Sweeper dry clothOver 30,000 3D fibers brush into tight spaces gathering dust, dirt, and pet hairGreat on grout and any other floors from tile to finished hardwoodWhen you\u2019re done, just throw that pad, and all its dirt, away"}, {"Sub Category": "Powers Away 48-Hour Stuck on Food in Seconds\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "MULTI-PURPOSE CLEANING WIPES 3X STRONGER THAN A PAPER TOWEL: These disinfecting cleaning wipes are 3x stronger than a paper towel.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleans in cold water", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "6X longer-lasting freshness and odor protection*", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "April Fresh scent", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$54.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 386 reviews.", "Title": "Nellie\u2019s Laundry Starter Pack", "Currency": "$", "Feature": "100-Load Laundry Soda", "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$89.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 3 reviews.", "Title": "Nellie\u2019s Baby Laundry Soda, 500 Loads", "Currency": "$", "Feature": "Unscented   HE Compatible   500 Loads   17.5 Total lbs   Hypoallergenic", "Product Description": "Nellie\u2019s baby laundry soda is your solution to dealing with baby\u2019s unavoidable mishaps. Perfect for babies with sensitive skin. Oxygen brightener hasbeen added for natural brightening, so there\u2019s no need for any additional whiteners. Its stain-fighting power is effective on cloth diapers and removes stubborn baby stains such as milk, baby formula, and spit-up. Most importantly, this plant-based formula is hypoallergenic, fragrance-free, gentle on baby skin, and leaves no residue.   Scent-free"}, {"Sub Category": "127 oz total", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Safe for all washing machines", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Do not unwrap or cut open pacs", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Keep container sealed between uses.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Safe for Teflon(TM)", "Price": " Silverstone(TM)", "Discount": " and Calphalon(R) non-stick cookware", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No measuring", "Price": " no mess", "Discount": " no waste", "Rating": " and carbon light", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Each of the 80 sheets can be split in half along perforation for 160 total loads", "Price": " or use full sheet for 80 heavy loads", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$17.99 ", "Discount": "No Discount", "Rating": null, "Title": "Arm & Hammer Plus OxiClean Max HE Liquid Laundry Detergent, Fresh, 200 Loads, 200 fl oz", "Currency": "$", "Feature": "Fresh   HE Compatible   200 Loads   200 Total fl. oz", "Product Description": "Ultra concentrated"}, {"Sub Category": "Cleaning Supplies", "Price": "$16.99 ", "Discount": "After $5 OFF", "Rating": null, "Title": "All Free & Clear Plus+ HE Liquid Laundry Detergent, 158 loads, 237 fl oz", "Currency": "$", "Feature": "Free & Clear   HE Compatible   158 Loads   237 Total fl oz   Gentle for Sensitive Skin", "Product Description": "100% Free of Perfumes and Dyes"}, {"Sub Category": "Cleaning Supplies", "Price": "$38.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 2060 reviews.", "Title": "ECOS HE Liquid Laundry Detergent, Free & Clear, 210 Loads, 210 fl oz, 2-count", "Currency": "$", "Feature": "Hypoallergenic   Plant Powered   Non-Toxic", "Product Description": "2 - Count210 fl oz, 210 loads (1 fl oz = 1 load)420 total fl oz, 420 total loads (1 fl oz = 1 load)Ingredients:WaterCocamidopropyl Betaine (plant-derived surfactant)Sodium Coco-Sulfate (plant-derived surfactant)Cocamidopropylamine Oxide (plant-derived surfactant)Phenoxyethanol (preservative)Methylisothiazolinone (preservative)Instructions for use:Always follow garment care instructions. Pour one ounce (roughly 1/4 capful) into the dispenser for HE loads. For top loaders, put two ounces (or half a capful) directly into machine before running water. Works beautifully in all water temperatures and is also perfect for colors, whites, and nearly all fabrics, including delicates. For the toughest stains, ECOS has a stain-pretreat function too! Pour a few drops directly on stain, rub it in, and toss your garment right into the wash to get the best results.Warning: Keep safely out of reach of children"}, {"Sub Category": "Cleaning Supplies", "Price": "$20.89 ", "Discount": "No Discount", "Rating": null, "Title": "Cascade Complete Dishwasher Detergent Actionpacs, 90-count", "Currency": "$", "Feature": "47.3 oz   Fresh scent", "Product Description": "90-count#1 recommended brand in North America"}, {"Sub Category": "Standard washer 250 loads", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Biodegradable formula", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "4x grease cutting power   \u200b\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Works in cold water\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Flex-Tech plastic incorporated into the product allows the new Kirkland Signature\u2122 kitchen bag to expand around your trash", "Price": " reducing tears and increasing holding capacity.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$42.99 ", "Discount": "No Discount", "Rating": null, "Title": "O-Cedar EasyWring Spin Mop & Bucket System with 3 Refills", "Currency": "$", "Feature": "Great for Wood, Tile, Laminate, Marble, & Linoleum   Machine Washable Mop Heads   Hands Free Wringing Without Bending", "Product Description": "Achieve a deeper clean with the EasyWring\u2122 Spin Mop & Bucket System. This easy-to-use system features a foot-activated pedal and built-in bucket wringer that allow for hands-free wringing and controlled water release. The machine-washable and reusable microfiber mop heads remove tough dirt and over 99% of bacteria with just water.* Enjoy a truly deep floor cleaning, made easy.Foot-activated pedal and built-in bucket wringer allow for hands-free wringing and controlled water release Multi-purpose microfiber mop removes tough dirt, grime and over 99% of bacteria with just water*Machine-washable microfiber mop head refill is reusable for up to 3 monthsTriangle shaped mop head for easy maneuverability and better corner cleaningSafe for all hard floor surfaces, including hardwood, tile, vinyl and moreSystem includes EasyWring\u2122 bucket, telescopic handle that adjusts to 4.25 ft (51 inches) and 3 extra reusable microfiber mop headsFeatures:Hands-free wringing with foot pedal and built-in bucket wringer Machine-washable and reusable microfiber mop head refillsMicrofiber removes all dirt and over 99% of bacteria with just water*Great for deep cleaning all hard floor surfaces; wood, laminate, marble, linoleumUse & Care:Machine or hand wash mop head. Do not use fabric softeners or bleach. Lay flat to dry. For best floor cleaning results, replace refill every 3 months.Store bucket in dry conditions. Do not expose to excessive sunlight.*Removes, does not kill, over 99% of E. coli and Staph. aureus from pre-finished hardwood flooring and ceramic tile using tap water, as tested at an independent accredited lab."}, {"Sub Category": "Reduces static cling", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Softens & freshens", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Mirrors\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "100% biodegradable active ingredients\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$10.99 ", "Discount": "No Discount", "Rating": null, "Title": "Simple Green All-Purpose Cleaner, 32 fl oz + 140 fl oz Refill", "Currency": "$", "Feature": "1 - 32 fl oz Bottle 1:10 Dillution   1 - 140 fl oz Jug Concentrate   Non-Toxic   Biodegradable Formula", "Product Description": "32 fl oz Bottle 1:10 Dillution140 fl oz Jug Concentrate - Makes (48) 32 fl oz bottles of 1:10 dilution"}, {"Sub Category": "Cleaning Supplies", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 4.4 out of 5 stars based on 19 reviews.", "Title": "Nellie's Dishwasher Nuggets, 150-count", "Currency": "$", "Feature": "Plant-Based Formula   Biodegradable   Septic Safe   Phosphate Free", "Product Description": "Nellie\u2019s dishwasher nuggets combine all the cleaning power of a dish powder in the convenience of a little pre-packaged nugget. Small but mighty, they easily penetrate grease, food particles and more, leaving every plate spotless. This formula is biodegradable, septic safe, and phosphate free. Above all, this powder is a plant-based formula and kind to the environment."}, {"Sub Category": "Cleaning Supplies", "Price": "$18.49 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 403 reviews.", "Title": "Febreze Air Refresher, Variety Pack, 8.8 oz, 4-count", "Currency": "$", "Feature": "Variety Pack   4 Count", "Product Description": "Variety Pack"}, {"Sub Category": "Safe on clothes", "Price": " water-washable upholstery and rugs", "Discount": " grout", "Rating": " bathroom tile", "Title": " patio furniture", "Currency": " and more", "Feature": null, "Product Description": null}, {"Sub Category": "We understand that you care about not only your health but also the world around you. Our products", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Artificial Fragrances or Dyes", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Phthalates", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Sulfates or SLS", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Almond: Purified Water", "Price": " Saponified Coconut Oil", "Discount": " Saponified Olive Oil", "Rating": " Potassium Oleate", "Title": "Vegetable Glycerin", "Currency": " Natural Almond Fragrance", "Feature": " Almond Oil", "Product Description": " Citric Acid"}, {"Sub Category": "Pour Castile soap onto a washcloth", "Price": " sponge", "Discount": " or your hand. Lather and rinse. If using for shaving:lather onto the skin", "Rating": " shave", "Title": " and rinse.\"", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$26.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 827 reviews.", "Title": "Poo-Pourri Toilet Spray, Variety Pack, 3.4 fl oz, 3-count", "Currency": "$", "Feature": "1 - Original Citrus   1 - Bamboo Rain   1 - Cyress Woods   TSA Friendly   Made in the USA", "Product Description": "Spritz the bowl before-you-go and no one else will ever know!   1 - Original Citrus: lemon, bergamot, and lemongrass"}, {"Sub Category": "No Alcohol", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Animal Testing   Castile Liquid Soap Ingredients:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$43.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 355 reviews.", "Title": "Nellie\u2019s Bulk Oxygen Brightener, 8.75 lbs", "Currency": "$", "Feature": "Hypoallergenic   Phosphate Free   Septic Safe", "Product Description": "Nellie\u2019s Oxygen Brightener uses the power of oxygen to penetrate stains, stripping away dirt, odor and grime, and keeps your colors bright and your whites white. our products are phosphate free, hypoallergenic and septic safe.How To Use:Machine wash: Add into wash cycle with Nellie\u2019s Laundry Soda. Small loads \u2013 1 tablespoon; regular loads \u2013 2 tablespoons; large loads \u2013 3 tablespoons. Use 3 tablespoons for very dirty or stained clothing.Pre-soak or hand wash: separate whites from colors. Use only one tablespoon along with Nellie\u2019s Laundry Soda in 10 L (2.6 gallons) of WARM or HOT water. soak for 1/2 hour then rinse thoroughly.General stain removal: create solution using 1 tablespoon per 16 oz (500 ml) of water for upholstery, fabric, kitchen floors, counters, trash cans and all other water washable surfaces. Apply solution to stain, wait 1-5 minutes, scrub with sponge or blot with towel. Rinse thoroughly and allow to dry.Carpet spot remover: create solution using 1 tablespoon per 16 oz (500 ml) of water. Soak up excess liquid before applying solution to stain. Use only enough to cover stain area, wait 1-5 minutes, soak up with white towel. Repeat if necessary. Wring thoroughly with water and blot dry. Vacuum once dry.DO NOT USE: on wool, silk or leather. Not for use on jewelry, latex, paints or wood."}, {"Sub Category": "7 Day odor Control", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Made in USA", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Smart Tie Closure", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Thickness: 1.4 mil   Dimensions: 38\u201d x 51.5\u201d", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$19.99 ", "Discount": "No Discount", "Rating": null, "Title": "Scott Shop Towels, Original Multi-Purpose, Blue, 10-count", "Currency": "$", "Feature": "Absorbs Oil And Grease", "Product Description": null}, {"Sub Category": "Cleaning Supplies", "Price": "$26.99 ", "Discount": "No Discount", "Rating": null, "Title": "Unitex 100% Cotton Towel, White, 14 in x 17 in, 52-count", "Currency": "$", "Feature": "100% Cotton Terry Towels   Heavy Weight   Ring Spun   Super Soft", "Product Description": "\"Dimensions: 14\"\" x 17\"\"100% Cotton Terry TowelsRing spunDurable"}, {"Sub Category": "Organic", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Dark roast", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Starbucks French Roast Coffee: With notes of dark caramel and sweet smoke", "Price": " the intense and roasty flavor of Starbucks French Roast coffee is as dark as our dark roasts get", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher   CAUTION: POD IS HOT. ALLOW TO COOL AFTER USE.   PEEL \u2013 Starting at the puncture", "Price": " peel lid and dispose.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Whole Bean", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Medium/Dark Roast", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Medium Roast", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Starbucks Pike Place Roast Coffee: A smooth", "Price": " well-rounded blend of Latin American coffees with subtly rich notes of cocoa and rich praline", "Discount": " it\u2019s perfect for every day", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Ethically Sourced: Starbucks is committed to 100% ethical coffee sourcing in partnership with Conservation International   Keurig", "Price": " K-Cup", "Discount": " and the K logo are trademarks of Keurig Green Mountain", "Rating": " Inc.", "Title": " used with permission. For use with Keurig\u00ae K-Cup\u00ae Brewers.\"", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Whole Bean", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Coffee", "Price": "$42.99 ", "Discount": "No Discount", "Rating": null, "Title": "Starbucks Coffee Veranda Blend Blonde Roast K-Cup, 72-count", "Currency": "$", "Feature": "72 K-Cups   Blonde Roast   Subtle Nuances of Toasted Malt and Baking Chocolate   Compatible with Most K-Cup\u00ae Brewers and Keurig\u00ae 2.0 Brewers", "Product Description": "We\u2019ve spent decades working with coffee farmers throughout Latin America. This blend was inspired by the lightly roasted coffees we\u2019ve sipped together over the years, often enjoyed on a breezy veranda with a view of lush coffee trees. Subtle but flavorful with notes of toasted sweet malt and milk chocolate, it\u2019s an inviting, approachable coffee that mixes beautifully with milk. Nestl\u00e9 uses Starbucks trademarks under license   Features   Premium Coffee In A K-Cup: Starbucks delivers exceptional coffee cup after cup with this 72-count K-Cup pod box of Veranda Blend lightly roasted coffee for Keurig brewers"}, {"Sub Category": "Coffee", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature 100% Colombian Coffee, Dark Roast, 3 lbs", "Currency": "$", "Feature": "100% Columbian Coffee   Dark Roast   Fine Grind   Supremo Bean   Total Net Weight 3lb", "Product Description": "3 lb. Can"}, {"Sub Category": "Roast: Medium", "Price": " Decaffeinated", "Discount": " Balanced and Smooth", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Roasted by Starbucks Coffee Co.\u00ae", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Sourcing with Impact: The coffee you buy can impact the welfare of the people and planet. Peet\u2019s is actively engaged in driving positive impact in communities where our coffees are grown.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "100% Arabica Coffee", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "6 x 10.5oz bags\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Coffee", "Price": "$25.99 ", "Discount": "No Discount", "Rating": null, "Title": "Dunkin\u2019 Donuts Original Blend, 45 oz", "Currency": "$", "Feature": "Kosher   Medium Roast   Ground Coffee   100% Premium Arabica Coffee   Net Weight: 45 oz", "Product Description": "Makes up to 150, 6 fl oz cups"}, {"Sub Category": "11g of Coffee Per Pod", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Coffee", "Price": "$44.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 1664 reviews.", "Title": "Jose\u2019s Vanilla Nut Whole Bean Coffee 3 lb, 2-pack", "Currency": "$", "Feature": "100% Arabica Coffee", "Product Description": null}, {"Sub Category": "Coffee", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "Nestl\u00e9 Coffee-Mate Liquid Creamer, French Vanilla, 180-count", "Currency": "$", "Feature": "French Vanilla   No Refrigeration Needed   180 Single Serve Portions   Kosher (Circle U) D", "Product Description": "180-count.375 fl. oz."}, {"Sub Category": "Kosher certified\"", "Price": "42-count1.75 oz individual packets (no filter) - for use in automatic brewing machineTotal Net Weight: 4.59 lbs.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Allergen Free and Kosher Certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Fueled with Metabolism Boosting Superfoods", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Supports Metabolism & Diet", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Great for Espresso", "Price": " Drip", "Discount": " Pour Over", "Rating": " or any brew method", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Coffee Blend consisting of Central and South American Coffees", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Grown at altitudes ranging from 1500-3000 meters.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Packaged in our Biotre 2.0 bags made with 100% renewable materials.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Coffee", "Price": "$21.99 ", "Discount": "No Discount", "Rating": null, "Title": "Splenda Zero Calorie Sweetener Packets, 1,000-count", "Currency": "$", "Feature": "Zero Calorie Sweetener   Proudly Made in the USA   Tastes Like Sugar   Gluten Free   Suitable for People with Diabetes", "Product Description": "Our Splenda Zero Calorie Sweetener packets taste like sugar with zero calories. Each packet of Splenda provides the same sweetness of two teaspoons of sugar making It the perfect zero calorie sugar alternative for sweetening your coffee, tea, oatmeal, fruit, and more! The Splenda brand is also the number one recommended sweetener brand by doctors and dietitians clinically treating patients and enjoyed by millions each day!   1,000-count"}, {"Sub Category": "100% Arabica Coffee", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Medium Roast Coffee", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Species: Siberian Sturgeon - Acipenser Baerii", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Size: 2 oz Jar (serves 2-4 people)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Consume within 24-48hrs once opened", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Sturgeon are raised steroid and antibiotic free", "Price": " and fed non GMO diet", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Superior quality Malossol Caviar", "Price": " sustainable farmed resource", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Features Eco-Friendly non-Styrofoam packaging   Questions? Feel free to call Plaza De Caviar's friendly customer service for product information only at: 1-888-888-4470. Please call Costco.com customer service for all other inquiries.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Size: 2 oz Jar", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Thermal Black Caviar Tote", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Serves 2-4 people   Questions? Feel free to call Plaza De Caviar's friendly customer service for product information only at: 1-888-888-4470. Please call Costco.com customer service for all other inquiries.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Product of Greece", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Deli", "Price": "$279.99 ", "Discount": "No Discount", "Rating": "Rated 4.4 out of 5 stars based on 348 reviews.", "Title": "Pacific Plaza Golden Osetra Caviar 2 oz, 2-pack", "Currency": "$", "Feature": "Vacuum sealed Caviar jar keeps 60 days unopened   24 - 48 hrs once opened (refrigerated or on ice)   2 qty - 2 oz Vacuum Sealed Jars, Serves 4-8, Grade: Pure Malossol Caviar   Color: Amber to Gold, Size: Medium grain size   Flavor: Clean, Nutty, Brine", "Product Description": "Plaza Caviar has partnered with our friends in Greece to bring this ultra premium caviar to you. Thesauri farm (meaning treasure in Greek) shares our vision of crafting caviar of the highest quality and integrity. A philosophy that is equal parts sustainability and great caviar production. Located near the bay of Amvrakikos this modern facility produces some of the best amber gold Osetra the world has to offer. Rest assured it will compare with the best Caviars on the market, not to mention it will be fresher, healthier and fully sustainable.   Features:   Farmed Golden Osetra Caviar, Product of Greece"}, {"Sub Category": "Features Eco-Friendly non-Styrofoam packaging", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Deli", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 3.9 out of 5 stars based on 151 reviews.", "Title": "Fratelli Beretta Snack Pack, 2.5 oz, 10-pack", "Currency": "$", "Feature": "10/ 2.5oz ON-THE-GO Snack Packs", "Product Description": null}, {"Sub Category": "Gift Messaging Available At Checkout", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Messaging Available At Checkout   Vase Not Included", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Due to the perishable nature of this item", "Price": " orders do NOT ship Friday through Monday. Orders only arrive Tuesday through Friday.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Floral", "Price": "$54.99through-$59.99", "Discount": "No Discount", "Rating": "Rated 4.2 out of 5 stars based on 1620 reviews.", "Title": "Inspire Floral Arrangement", "Currency": "$", "Feature": "Farm Fresh Flowers   Pick Your Arrival Date at Checkout   Gift Messaging Available at Checkout   Warning: Not for Human or Animal Consumption", "Product Description": "Let this great combination of flowers, colors and texture be your source of inspiration. Stems Include: Pin Cushions, Roses, Disbuds, Snapdragons, Carnations, Ruscus, Poms and ParvifoliaHow to OrderEvery attempt will be made to deliver your floral order on your preferred arrival date, however, your order may arrive one day before or after your selected date.Pick your arrival date from the calendar during checkout. Arrival dates are based on the farm\u2019s availability.Due to the perishable nature of this item, orders do NOT ship Friday through Monday. Orders only arrive Tuesday through Friday.You can choose your arrival date from the calendar during checkout.Delivery exclusions apply, see calendar at checkout.Need Help?Email: costco@vistaflor.comPhone: 888-620-8895 (8:00AM \u2013 8:00PM EST M-F, 8:00AM \u2013 5:00PM EST SAT)Suggestions:Tell them how you feel! Gift messaging available during the checkout process. If you want gift messages on multiple orders, individual orders need to be placed.Are your flowers for an event? Many of our flowers ship in bud form. We suggest ordering your flowers to arrive 2-3 days before your event to allow them to bloom.Did your flowers arrive looking thirsty? No worries! Just follow the included care and handling instructions to properly hydrate your flowers. After a fresh drink of water, your flowers will blossom and look more full. Flowers pictured on the site are taken after three days in water."}, {"Sub Category": "We are here to help! You can reach us directly at the contact information below. For cancellations or rescheduling", "Price": " please contact us within 48 hours of placing order. For overnight deliveries", "Discount": " orders cannot be cancelled.   Email: support@flowernet.com", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Phone: 877-285-1256 7:00AM \u2013 3:00PM (PST)", "Price": " M-F   Suggestions:", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Messaging Available At Checkout   Vase Not Included", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Pick your arrival date from the calendar during checkout. Arrival dates are based on the farm\u2019s availability.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Four 6ft. rolls in a box", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Phone: 855-848-9817 (7:00AM - 3:00PM PST", "Price": " M-F)   SUGGESTIONS", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Keep your flowers in a location free of direct sunlight and drafts.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Floral", "Price": "$49.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 3616 reviews.", "Title": "50-stem Hot Pink Roses", "Currency": "$", "Feature": "Pick Your Arrival Date At Checkout   Gift Messaging Available At Checkout   Vase Not Included   Warning: Not For Human or Animal Consumption", "Product Description": "Our stunning Rainforest Alliance Certified roses are hand-picked from our South American farms. While we pride ourselves in providing the highest quality flowers, we are also socially responsible - protecting the environment and the farm employees in the process. All of our roses are made to impress with larger, bolder, and more vibrant colors. We put our heart into every stem we grow. Each box contains 2 bunches of 25 stems, wrapped in corrugate sleeves for protection during shipping. Vase not included.How to Order:Every attempt will be made to deliver your floral order on your preferred arrival date, however, your order may arrive one day before or after your selected date.Pick your arrival date from the calendar during checkout. Arrival dates are based on the farm\u2019s availability.Due to the perishable nature of this item, orders do NOT ship Friday through Monday. Orders only arrive Tuesday through FridayNext day orders must be placed placed prior to 11:00 am PST Monday through Thursday, in order for them to arrive next dayYou can choose your arrival date from the calendar during checkout.Delivery exclusions apply, see calendar at checkout.Need Help?We are here to help! You can reach us directly at the contact information below. For cancellations or rescheduling, please contact us within 48 hours of placing order. For overnight deliveries, orders cannot be cancelled.Email: support@flowernet.comPhone: 877-285-1256 7:00AM \u2013 3:00PM (PST), M-FSuggestions:Tell them how you feel! Gift messaging available during the checkout process. If you want gift messages on multiple orders, individual orders need to be placed.Are your flowers for an event? Many of our flowers ship in bud form. We suggest ordering your flowers to arrive 2-3 days before your event to allow them to bloom.Did your flowers arrive looking thirsty? No worries! Just follow the included care and handling instructions to properly hydrate your flowers. After a fresh drink of water, your flowers will blossom and look more full. Flowers pictured on the site are taken after three days in water."}, {"Sub Category": "Delivery exclusions apply", "Price": " see calendar at checkout.   NEED HELP?   We are here to help! You can reach us directly at the contact information below. For cancellations or rescheduling", "Discount": " please contact us within 48 hours of placing order. For overnight deliveries", "Rating": " orders cannot be cancelled.   Email:costco@cfgreens.com", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Warning: Not For Human or Animal Consumption\"", "Price": "A traditional flower, affordable and long-lasting. Alstroemerias are a great option to decorate an event or to enhance any room. Our wholesale Alstroemerias come fresh from the farm and are available for Next Business Day delivery. They can also be pre-ordered for a future arrival date. This bulk pack includes 80 stems of Alstroemeria, perfect for businesses, restaurants, hotels, banquet halls, reception areas, doctor's offices, event planners, decorators, caterers and fundraising.How to Order:Every attempt will be made to deliver your floral order on your preferred arrival date, however, your order may arrive one day before or after your selected dateNext day orders must be placed placed prior to 11:00 am PST Monday through Thursday, in order for them to arrive next day.Due to the perishable nature of this item, orders do NOT ship Friday through Monday. Orders only arrive Tuesday through Friday. Need Help?For answers to frequently asked questions, please enter the following URL into your search bar: www.flowernet.comWe are here to help! You can reach us directly at the contact information below. For cancellations or rescheduling, please contact us within 48 hours of placing order. For overnight deliveries, orders cannot be cancelled.Email: support@flowernet.comPhone: 877-285-1256 7:00AM \u2013 3:00PM (PST), M-FSuggestions:Tell them how you feel! Gift messaging available during the checkout process. If you want gift messages on multiple orders, individual orders need to be placed.Are your flowers for an event? Many of our flowers ship in bud form. We suggest ordering your flowers to arrive 2-3 days before your event to allow them to bloom.Did your flowers arrive looking thirsty? No worries! Just follow the included care and handling instructions to properly hydrate your flowers. After a fresh drink of water, your flowers will blossom and look more full. Flowers pictured on the site are taken after three days in water.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Floral", "Price": "$69.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 921 reviews.", "Title": "60-stem Gerberas", "Currency": "$", "Feature": "60 Stems   Available in Four Colors   Pick Your Arrival Date at Checkout   Gift Messaging Available at Checkout   Warning: Not for Human or Animal Consumption", "Product Description": "Gerberas are great flowers for adding color to any room. They are the most popular florist flowers, they are a classic symbol of beauty and cheerfulness. Our wholesale Gerberas come fresh from the farm and are available for pre-orders for a future arrival date. This bulk pack includes 60 stems of Gerberas, perfect for businesses, restaurants, hotels, banquet halls, reception areas, doctor's offices, event planners, decorators, caterers and fundraising.   Available in four colors:   White"}, {"Sub Category": "Use flower food packet provided.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Flowers will arrive in bud form and will fully bloom in 2 or 3 days.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Phone: 855-848-9817 (7:00AM - 3:00PM PST", "Price": " M-F)   SUGGESTIONS:", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Every attempt will be made to deliver your floral order on your preferred arrival date; however", "Price": " your order may arrive one day before or after your selected date.   Pick your arrival date from the calendar during checkout. Arrival dates are based on the farm\u2019s availability.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Floral", "Price": "$84.99through-$219.99", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 310 reviews.", "Title": "Wedding Variety Collection", "Currency": "$", "Feature": "Pre-Order Months in Advance   6-Piece or 10-Piece Collections Available   Pick Your Arrival Date at Checkout   Flowers, Ribbon, & Signage Not Included   Warning: Not for Human or Animal Consumption", "Product Description": "6-piece Candle Rings Includes:"}, {"Sub Category": "\u2022 Four (4) 12\"\" wedding candle rings made with fresh Huckleberry and Salal", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "\u2022 For Monday events", "Price": " please choose delivery for Friday", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 Centerpiece (vases not included) 6 Roses", "Price": " 5 Minicalla", "Discount": " 3 Mini Hydrangea", "Rating": " 3 Snapdragon", "Title": " 3 Spray Roses", "Currency": " 3 Carnation", "Feature": " 4 Hypericum", "Product Description": " 3 Minicarnation"}, {"Sub Category": "Delivery exclusions apply", "Price": " see calendar at checkout.   Are your flowers for an event? Many of our flowers ship in bud form. We suggest ordering your flowers to arrive 2 days before your event to allow them to bloom", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 Bridesmaid Bouquets - 10 Roses", "Price": " 1 Hydrangea", "Discount": " 8 Carnation", "Rating": " 4 Hypericum", "Title": " 4 Parvifolia", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "3 Boutonnieres - 1 Rose", "Price": " 1 Hypericum", "Discount": "1 Parvifolia", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "California Dried Yellow Peaches (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Fruit & Nut Medley (Almonds r/s (California)", "Price": " Cashews r/s (Product of Brazil", "Discount": " Vietnam", "Rating": " and/or India", "Title": " processed in US)", "Currency": " Jumbo Golden Raisins (California)", "Feature": " Cranberries (US)", "Product Description": null}, {"Sub Category": "Sturgeon are raised steroid and antibiotic free", "Price": " and fed non GMO diet", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "0.80 oz. Black Forest Organic Gummy Bears 6 qty", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "0.65 oz. Skinny Pop 100 Calorie Popcorn Snack 3 qty", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1.00 oz. Popcorners Popped-Corn Snack White Cheddar 3 qty", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$49.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 850 reviews.", "Title": "Isabelle Pineapple Cakes 27.1 oz, 3-count", "Currency": "$", "Feature": "16 Individually Wrapped soft buttery Cakes filled with Sweet Pineapple Taste", "Product Description": "Pineapple are considered symbols of fortune, prosperity and abundance in Asian cultures making Isabelle Pineapple Cakes specially popular for gift-giving during special occasions and holidays. Considered a festive treat, these authentic Taiwanese pastries are soft, buttery, and filled with rich and sweet pineapple taste.   Isabelle Pineapple Cakes are the perfect dessert items and make lovely accompaniments to tea or coffee. Each pineapple cake is individually wrapped for convenience thus allowing the recipient to enjoy these melt-in-your mouth pastries long after the box is opened.   Includes:   27.1 oz, 3-count"}, {"Sub Category": "POP IT: The collapsible popcorn bowl provides the immediate satisfaction of microwave popcorn in an eco-friendly", "Price": " waste-free format. Holds over 9 cups of popped popcorn. Food-safe silicone and plastic", "Discount": " dishwasher and microwave safe", "Rating": " BPA free", "Title": " collapses to store 7.5\u201dD x 2\u201dH", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 2.50 oz. Twizzlers Strawberry Licorice", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Rendered Duck Fat (7oz)\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1.00 oz Brownie Brittle 4 qty\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 60 GBlack Truffle Balsamic Glaze (Italy)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher   Handmade in Dubai\"", "Price": "Enjoy a Mediterranean authentic recipe of a crisp and sweet Baklava pastries made with layers of phyllo dough filled with handpicked pistachio & cashew nuts and drizzled with rich Honey. Our assortment includes 6 types of gourmet handmade Baklava presented in an elegant rigid box suitable for gifting, special occasions or sharing with friends & guests. Our Ingredients are all Natural and has no artificial flavours, no preservatives and no colourings. Hand made in Dubai using the best of the Levant\u2019s and Mediterranean authentic Baklava recipes.Includes:Authentic recipe made with Honey Contains two symmetrical Baklava BoxesNet weight of each Baklava Box is 1.98 lbBundle Net weight is 3.96 lbHand made in DubaiKosherStorage Conditions: Store in Cool & Dry Place away from any source of heatFor freshness, refrigerate after opening and consume within two weeks Allergens Warning: Contains Wheat, Milk, Cashew, Pistachio Made in a factory that uses Soy, Tree Nut (Almond, Hazelnut, pecan, Macadamia & walnuts), peanut, egg, sesame ingredients Ingredients: Sugar, Wheat Flour, Ghee (from palm oil), Water, Cashew Nut, Corn Starch, Ghee (Butter from cow\u2019s milk), Glucose, Natural Honey, Pistachio, Salet, Dry Whole Milk, Cinnamon Powder.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$99.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 119 reviews.", "Title": "The Fruit Company's Savory Charcuterie Box", "Currency": "$", "Feature": "Pears", "Product Description": null}, {"Sub Category": "Crackers and Nuts", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Includes:   3 Green Anjou Pears (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Honeycrisp Apple (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Pink Lady Apple (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Granny Smith Apples (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Bamboo & Slate Charcuterie Board (China)\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1.20 oz Nature\u2019s Garden Healthy Snack Mix Variety", "Price": " 3 qty", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "0.90 oz Welch\u2019s Mixed Fruits Snacks", "Price": " 8 qty", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 Vanilla Pear (white tea)   SINGLE STEEPS\u00ae LOTUS", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Includes:   3 Green AnjouPears (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "4.90 oz. Godiva Masterpiece Dark Chocolate Ganache Hearts (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "6 oz. Pumpkin Seed Brittle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Cosmic Crisp Apple (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$149.99 ", "Discount": "No Discount", "Rating": "Rated 5 out of 5 stars based on 3 reviews.", "Title": "Jacques Torres Assorted Chocolate Large Hat Box", "Currency": "$", "Feature": "\"Champagne Truffles   Dark Chocolate Almonds   Assorted Bonbons   Chocolate Chip Cookies and more   12\"\" W x 6\"\" H\"", "Product Description": "\"Master Pastry Chef and Chocolatier and thefeatured Head Judge on the internationally successful series \"\"Nailed it!\"\" on Netflix"}, {"Sub Category": "1 \u00bd lbs (2 - 12 oz packs) heritage applewood smoked bacon", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "12 - 1.50 oz. Pink Round with Sprinkles Buttercream Frosted Cookie   Gift Dimensions (LxWxH): 11.50\"\" x 7.00\"\" x 4.25\"\"\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Indian Tandoori - .71 oz.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "8 vials of The Spice Route", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "5.60 oz. Godiva Chocolatier Cr\u00e8me Brulee Dessert Truffle (16 pc) (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "5-High Paper Box Tower", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "16.00 oz Coastal MorningCoffee", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "14.37 oz Traditional Scone Mix", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "The classic blueberry muffin is brought to new heights with our Blueberry Muffin Mix. These muffins are easy-to-make with just a few common pantry items", "Price": " are full of blueberries and are sure to start your day off right!   Organic Wild Maine Blueberry Jam", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Made with real cream and butter", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Get Well Soon (Red)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$54.99 ", "Discount": "No Discount", "Rating": "Rated 4.3 out of 5 stars based on 119 reviews.", "Title": "Heaton Pecans Roasted & Salted Pecans Tin 2.5 lbs", "Currency": "$", "Feature": "Roasted & Salted Pecans   2.5 lbs   Homemade in the Mississippi Delta", "Product Description": "Heaton Pecans are home grown in the Mississippi Delta and harvested each year from our 40+ year-old orchard."}, {"Sub Category": "Gift Baskets", "Price": "$199.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 261 reviews.", "Title": "Tsar Nicoulai Estate Classic White Sturgeon Caviar 2 oz, 3-pack", "Currency": "$", "Feature": "Vacuum sealed Caviar jar keeps 60 days unopened   24 - 48 hrs once opened (refrigerated or on ice)   3 qty, 2 oz sealed containers (6oz Total)   Features Caviar Fresh Tag, Pure Malossol Caviar   Eco Certified Sturgeon Farm", "Product Description": "This product is a great entry into sustainable domestic caviar, crafted at our Eco Certified sturgeon farm in Northern California. Eco Certification ensures the fish are fed and cared for in a way that is equal parts good for the sturgeon and the caviar quality. Our Classic caviar is made from farming our native White Sturgeon species. It has a medium sized bead with a bold jet-black color, soft texture and a clean buttery briny finish. Garnish Classic caviar on a variety of dishes like deviled eggs, seafood bisque, creamed vegetable soup or freshly fried potato chips with a homemade onion dip. Grab some California Sparkling Wine to make the perfect domestic paring.   Ingredients: Farmed White Sturgeon Roe and fine Sea Salt   Allergens: Fish, Sturgeon   Features:   Produced by Tsar Nicoulai Sturgeon farm, Wilton California"}, {"Sub Category": "Perfect for any holiday\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Weight: 2 lbs 14 oz per cake", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Iconic keepsake tin included   Important Handling Instructions:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$169.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 268 reviews.", "Title": "Plaza Golden Osetra 2 oz Caviar Gift Set", "Currency": "$", "Feature": "Vacuum sealed Caviar jar keeps 60 days unopened   24 - 48 hrs once opened (refrigerated or on ice)   2 oz Jar, Serves 2-4   Packaged With a Thermal Caviar Tote   Color: Amber to Gold, Medium to Large", "Product Description": "This gift pack features everything you need to indulge your senses, delicious caviar, blini, creme fraiche, and a pearl spoon to help you serve in style. Plaza Caviar has partnered with our friends in Greece to bring this delicious caviar to you. Thesauri farm (meaning treasure in Greek) shares our vision of crafting caviar of the highest quality and integrity. A philosophy that is equal parts sustainability and great caviar production. Located near the bay of Amvrakikos this modern facility produces some of the best amber gold Osetra the world has to offer. Rest assured it will compare with the best Caviars on the market, not to mention it will be fresher, healthier, and responsibly farmed.   \u2022 Farmed Golden Osetra Caviar"}, {"Sub Category": "Gift Baskets", "Price": "$69.99 ", "Discount": "No Discount", "Rating": "Rated 5 out of 5 stars based on 1 reviews.", "Title": "TRE Olive Merenda Gift Box", "Currency": "$", "Feature": "TRE Olive Extra Virgin Olive Oil: 16.9oz tin   TRE Olive Riserva Balsamic Vinegar: 3.4oz bottle   TRE Olive Calabrian Olives: 9.8oz jar   Salt & Twine Dry Aged Salami \u2013 Hot Calabrian: 5oz   And more", "Product Description": "The Merenda Gift Box will impress any food lover! These high-quality specialty items were carefully selected to create the perfect gift for any occasion. Your friends & family will love it!"}, {"Sub Category": "Salt & Twine Dry Aged Salami \u2013 Hot Calabrian: 5oz", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Wine Chips \u2013 Asiago Flavored: 1oz", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "12 Birthday Cake Cake Balls", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "8.00 oz. The Popcorn Factory Butter Popcorn - The popcorn classic with freshly popped kernels and buttery deliciousness.   Individual Dimensions (LxWxH): 10.44\"\" x 10.44\"\" x 13.24\"\"\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$549.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 79 reviews.", "Title": "Plaza Golden Osetra Caviar, 8.8 oz", "Currency": "$", "Feature": "Vacuum sealed Caviar tin keeps 30 days unopened   24 - 48 hrs once opened (refrigerated or on ice)   8.8 oz Vacuum Sealed Tin, Serves 7-12   Pure Malossol Golden Osetra Caviar   Color: Amber to Gold", "Product Description": "Plaza Golden Osetra ranges in color from Amber to Gold, has a medium to large grain size and has the unique nutty finish distinct to this grade of caviar. We have no doubt it will impress even the most discerning caviar enthusiast. This caviar is our top grade and our partner farm in Greece responsibly raises this ultra-premium sturgeon. Located near the bay of Amvrakikos this modern facility produces some of the best amber gold Osetra the world has to offer.   \u2022 Farmed Golden Osetra Sturgeon Caviar (Product of Greece)"}, {"Sub Category": "8 Belgian Milk Chocolate Dipped Strawberries Decorated with Red Tinted Belgian White Chocolate\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Star K Kosher", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "4 1 oz. Mild Beef Stick", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 4 oz. Salted Cashews", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$49.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 63 reviews.", "Title": "Valentine\u2019s Day Teddy Bear Tote", "Currency": "$", "Feature": "Plush Bear   Chocolate Brownies   Caramel Popcorn   Vanilla Fudge with Sea Salt   And more", "Product Description": "Give the sweetest gift this Valentine\u2019s Day with the Valentine\u2019s Teddy Bear Tote!   An adorable re-usable tote comes filled with everyone\u2019s favorite treats like Russell Stover Strawberry Cr\u00e8me in Milk Chocolate, Baker Brothers Chocolate Brownies, a Godiva Milk Chocolate Caramel Masterpiece Bar, Tom Clark Caramel Popcorn and much more! All of this plus a sweet and cuddly plush bear make this the perfect Valentine\u2019s gift for families, friends and even that special someone!"}, {"Sub Category": "3.00 oz. Tom Clark Caramel Popcorn (USA)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1.10 oz. Godiva Bar Masterpiece Milk Chocolate Caramel Lion (Turkey)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Fabric Tote with Handles 9x6x5.5/7.5\"\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 Belgian White Chocolate Dipped Cheesecake Pops Decorated with Red-Tinted Belgian White Chocolate Drizzle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "This 8 Piece Candy Bento Box\u00ae is equal parts dapper and delicious. Wrapped in a teal and copper foil gift box", "Price": " this Costco exclusive is filled with the decadent duo of coffee and chocolate. A creative (and sweet) gift for anyone with a smooth sense of style", "Discount": " find eight gourmetSugarfinaCandy Cubes\u00ae including:   Iced Vanilla Latte Bears: Get buzzed with the world's first coffee-infused gummy bears made with a signature vanilla latte blend.", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Serves 30-50 people", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Gift Baskets", "Price": "$59.99 ", "Discount": "No Discount", "Rating": "Rated 3.2 out of 5 stars based on 4 reviews.", "Title": "Around the World 15 oz Spicy Nuts, 2-pack Tin, Total 30 oz", "Currency": "$", "Feature": "3.00 oz African Piri Piri   3.00 oz Caribbean Jerk   3.00 oz Coconut Curry Thai   3.00 oz Mexican Spiced Cocoa   3.00 oz Moroccan Harissa Lime", "Product Description": "Pack your bags and give your taste buds a worldly adventure with the Around the World Spicy Nut collection. With 5 distinct flavorful bags of peanuts, you\u2019ll be traveling to exotic locations around the world as you taste each snack and dreaming of vacations all around the globe.   First, jump on a plane and travel to Africa to treat yourself with sweet, salty and spicy nuts with our African Piri Piri Peanuts. The African Bird's Eye or Piri Piri pepper (Piri Piri means \u201cpepper, pepper\u201d in Swahili) has grown wild in Africa for centuries, and now you can enjoy this added heat to your peanuts, combined with a hint of sweetness, directly in your own home. Flavored with sugar, African Bird Spice and salt, these nuts will add a little pleasant kick and become your next favorite snacking go-to.   Next, grab your sunblock and catch your flight to the Caribbean where you\u2019ll be enjoying that sweet taste of vacation with the Caribbean Jerk Peanuts. Turn up the heat and snack on this lively and flavorful bag of peanuts that provides you with a little sweetness, while the exotic flavors from our spicy blend entertain your taste buds.   It\u2019s off to the jungles, islands and mountains in Thailand next, with the exciting flavorful punch of Coconut Curry Thai Peanuts. A little bit of sugar, combined with curry, coconut and cayenne for that added heat, you\u2019ll be dreaming of the splendor of temples and beaches with every bite.   Pack your suitcase and head for the south of the border. Peanuts seasoned with sugar, salt, cocoa powder, cinnamon and cayenne; you\u2019ll swear your lying on a beach in Mexico. Our Mexican Spiced Cocoa Peanuts are not short of flavor and are the perfect marriage of salty snack meets dessert.   Lastly, you\u2019re jet setting to a vacation of mountains, beaches and deserts in Morocco! Our Moroccan Harissa Lime Peanuts are flavored with sugar and Harissa lime powder. And if you\u2019ve never had Harissa seasoning, you are in for a treat of warm spices, garlic, and chiles with a hint of smokiness.   You\u2019ll be renewing your passport in no time to keep the travel adventure going with the Around the World Spicy Nut collection. This tasty global experience provides you with a 2-pack, but you\u2019ll be setting your message to \u201caway\u201d and on vacation indefinitely as you order these exotic bags of Around the World nuts over and over again!   Included:   2 Pack tin"}, {"Sub Category": "Sugar Lips \u2013 Small Cube", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Milk Praline Heart2 pieces", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$18.99 ", "Discount": "No Discount", "Rating": null, "Title": "Cambro CamSquare 2 Quart Food Storage Container with Lid, 3-count", "Currency": "$", "Feature": "\"Model: 2SFSPP   Translucent   Capacity: 2 Quart   Dimensions with cover: 7-1/4\"\"L x 7-1/4\"\"W x 3-7/8\"\"H\"", "Product Description": "\"Model: 2SFSPP CamSquare Food Storage Container with Lid Translucent Capacity: 2 qt Dimensions with cover:7-1/4\"\"L x 7-1/4\"\"W x 3-7/8\"\"H 3 ct More Information:Use to maximize storage of ingredients in the kitchen"}, {"Sub Category": "Use to maximize storage of ingredients in the kitchen", "Price": " cooler", "Discount": " freezer or pantry", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Withstands temperatures from -40F to 160F (-40C - 70C)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Baking Sheet PanQuarter size", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Stainless steel", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Stainless steel", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$8.49 ", "Discount": "No Discount", "Rating": null, "Title": "Tramontina ProLine Windsor Teaspoon, Stainless Steel, 36-count", "Currency": "$", "Feature": "Designed for daily, heavy duty use in high volume restaurants   Commercial Dishwasher safe   NSF International compliant", "Product Description": "Model: 80317/501"}, {"Sub Category": "NSF International compliant", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Writes in black", "Price": " blue", "Discount": " red and green ink", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Refillable ink cartridges and pencil lead", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Heavy Duty for rough handling", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1 - Yellow Ink Bottle", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "ET-2850", "Price": " ET-3850", "Discount": " ET-4850   Model: EPS T502\"", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$17.99 ", "Discount": "No Discount", "Rating": null, "Title": "TOPS Perforated Legal Ruled Letter Pad, 9-count", "Currency": "$", "Feature": "Micro-perforated Sheets", "Product Description": null}, {"Sub Category": "Household", "Price": "$91.79 ", "Discount": "No Discount", "Rating": null, "Title": "HP 902XL High Yield Ink Cartridge, Black, 2-Count", "Currency": "$", "Feature": "Printer Compatibility: HP OfficeJet Pro: 6968, 6978, 6979, 6954, 6954   2x More Pages Compared to Standard Cartridges   Yield Approx. 825 Pages per Cartridge   Includes 2 New HP 902XL Black Cartridges", "Product Description": "Item may be available in your local warehouse for a lower, non-delivered price.   Model: HEW T0A40BN"}, {"Sub Category": "Household", "Price": "$12.39 ", "Discount": "No Discount", "Rating": null, "Title": "uni-ball 207 Retractable Gel Pen, Medium Point 0.7mm, Assorted Ink Colors, 12-count", "Currency": "$", "Feature": null, "Product Description": "207 Gel Pen"}, {"Sub Category": "Household", "Price": "$22.99 ", "Discount": "No Discount", "Rating": null, "Title": "Nouvelle Legende Ribbed 100% Cotton Bar Towel, White, 16 in x 19 in, 25-count", "Currency": "$", "Feature": "\"100% High Grade Absorbent Cotton   Ribbed Cotton Construction Provides Greater Strength, Durability and Longevity   Ideal for Restaurant, Bars Office and Domestic Clean-up Jobs   Dimensions: 16\"\" x 19\"\"   Country of Origin: China\"", "Product Description": "\"Model: CBMR25Bar Mop Towels100% high grade absorbent cottonRibbed cotton construction provides greater strength, durability and longevityIdeal for restaurant, bar, office and domestic clean-up jobsDimensions: 16\"\" x 19\"\"White25 ctCountry of origin: China\""}, {"Sub Category": "Color: clear\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$84.79 ", "Discount": "No Discount", "Rating": null, "Title": "HP 910XL High Yield Ink Cartridge, Black, 2-count", "Currency": "$", "Feature": "Includes: 2 new 910XL Black Ink Cartridges   Yield Approx. 825 Pages per Cartridge   Printer Compatibility: HP OfficeJet Pro 8028e, 8028, 8025, 8025e, 8035, 8022   2x More Gages with XL Cartridges Versus Standard Cartridges", "Product Description": "Includes: 2 new 910XL Black ink cartridges"}, {"Sub Category": "Yield approx. 825 pages per cartridge", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$16.49 ", "Discount": "No Discount", "Rating": null, "Title": "Scotch Heavy Duty Shipping Packaging Tape with Tape Gun Dispenser, 2 Rolls of Tape Included", "Currency": "$", "Feature": "\"1.88\"\" x 60 yds   Easy-to-Use", "Product Description": " Soft-Touch"}, {"Sub Category": "White\"", "Price": "PVC free poly material will not stick to cover inserts or materials stored insideArchival safe for all documents including photosClear, non-glare overlay for customization on all three sidesBack mounted round ring metal with dual opening and closing triggersHorizontal pockets on inside front and back coversContains 51% recycled content by material weight; 48% post-consumer recycled content", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$10.99 ", "Discount": "No Discount", "Rating": null, "Title": "\"Advantage Premium Bright Ink Jet and Laser Paper, 8.5\"\"x11\"\" Letter", "Currency": " White", "Feature": " 24lb", "Product Description": " 97 Bright"}, {"Sub Category": "Household", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "BIC Mechanical Pencil Kit, 24 Velocity + 1 Break Resistant, 0.7mm Lead, 25-count", "Currency": "$", "Feature": "24 Velocity Mechanical Pencils   1 Break Resistant Pencil   Smooth Dark Writing   0.7mm Lead   Assorted Colors", "Product Description": "Mechanical Pencil Kit"}, {"Sub Category": "Contour textured grip for added comfort", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Medium point (1.0mm)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Features:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "\u2022 24 Black + 1 Bonus Silver Marker\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$13.99 ", "Discount": "No Discount", "Rating": null, "Title": "Eurow Nouvelle Legende Placemats, 12-count", "Currency": "$", "Feature": "\"Tweed woven vinyl   Dimensions: 18\"\"L x 13\"\"W   12 ct\"", "Product Description": "\"Eurow Nouvelle Legende PlacematsTweed woven vinylDimensions: 18\"\"L x 13\"\"W12 ctMore Information:PVC outer shell with polyester corePerfect for indoor or outdoor useGreat for everyday use - wipe cleanPractical table protection\""}, {"Sub Category": "Conical tip type", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Plug-in device   How it Works:   Zevo Flying Insect Trapuses light to continuously attract flying insects (house flies", "Price": " fruit flies and gnats) and capture them on to an adhesive backing that you never have to touch.   Designed for any room or area in your home where you see flying insects.   Replace refill cartridge when it's full of insects. Check it every 15 days or as needed.   FOR BEST RESULTS:   DO place in electrical outlets that are easily accessible and near common areas.   DO use in an indoor electrical outlet where flying insects enter into the home such as garages and enclosed porches/patios (near entryways)", "Discount": " and where they tend to gather", "Rating": " such as in kitchens", "Title": " near fruits and vegetables", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Household", "Price": "$73.99 ", "Discount": "No Discount", "Rating": null, "Title": "iSi North America 1 Pint Stainless Cream Whipper Dispenser", "Currency": "$", "Feature": "All-metal design   NSF approved   Industrial dishwasher safe", "Product Description": "Cream Whipper Dispenser1 pintStainless steelMore Information:Includes: charger holder, decorator tip, cleaning brush, and recipes"}, {"Sub Category": "Kosher\"", "Price": "Super Extra-large PeanutsRoasted & SaltedVirginia varietyExtra crunchyGluten freeKosher40 oz Can", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$31.99 ", "Discount": "After $6 OFF", "Rating": null, "Title": "Kirkland Signature Coffee Organic Pacific Bold K-Cup Pod, 120-count", "Currency": "$", "Feature": "120 K-Cup\u00ae pods", "Product Description": null}, {"Sub Category": "Pacific Bold Coffee", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$15.99 ", "Discount": "After $2.50 OFF", "Rating": "Rated 4.7 out of 5 stars based on 2218 reviews.", "Title": "Kirkland Signature Super B-Complex with Electrolytes, 500 Tablets", "Currency": "$", "Feature": "One per Day Formulation", "Product Description": null}, {"Sub Category": "Organic", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Fair Trade Certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Selenium 0.35 mg/kg Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Chondroitin sulfate* 250 mg/kg Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "(Lactobacillus acidophilus", "Price": " Bifidobacterium animalis", "Discount": " Lactobacillus reuteri)   *Not recognized as an essential nutrient by the AAFCO Dog Food Nutrient Profiles.   Calorie Content:   3", "Rating": "529 kcals/kg (330 kcals/cup) Calculated Metabolizable Energy   Remember to keep fresh water available to your pet at all times.   Type of Pet Food: Senior Dogs\"", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "21 Total Servings\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$21.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Ultra Clean HE Liquid Laundry Detergent, 146 loads, 194 fl oz", "Currency": "$", "Feature": "146 Loads   Fresh Scent   Tough Stain Fighting Power", "Product Description": null}, {"Sub Category": "Docosahexaenoic Acid (DHA): Added salmon oil supplies DHA", "Price": " an omega-3 fatty acid that supports proper brain and eye development.", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Small Kibble: Growing puppies benefit from small kibble that is easier to pick up and chew.   Probiotics and prebiotic fiber from dried chicory root help maintain the proper balance of beneficial bacteria in your puppy\u2019s intestines. Active9\u2122 Probiotics are developed from probiotic strains naturally found in the canine GI tract and processed under strict quality and safety standards to ensure purity. Each cup of food provides live", "Price": " active cultures that help support healthy digestion and help your puppy maintain an active lifestyle.   Ingredients:", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Total Microorganisms* 2", "Price": "000", "Discount": "000 CFU/lb Minimum", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "(Lactobacillus plantarum", "Price": " Bacillus subtilis", "Discount": " Lactobacillus acidophilus", "Rating": " Enterococcus faecium", "Title": " Bifidobacterium animalis)**   *Not recognized as an essential nutrient by the AAFCO Dog Food Nutrient Profiles.", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "**Contains a source of live (viable)", "Price": " naturally occurring microorganisms.   Calorie Content", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Organic", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Glucosamine & Chondroitin   Vitamin E", "Price": " Selenium", "Discount": " Zinc & Active9\u2122 Probiotics   40 Pounds\"", "Rating": "Limit 10 per member.", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "No Artificial Flavors", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Non-Dairy Beverage", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$52.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 3871 reviews.", "Title": "Kirkland Signature Nature's Domain Salmon & Sweet Potato Formula Dog Food, 35 lbs", "Currency": "$", "Feature": "Salmon & Sweet Potato Formula", "Product Description": null}, {"Sub Category": "Crude Fat 15% Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Crude Fiber 4% Maximum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Zinc 150 mg/kg Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Total Microorganisms* 2", "Price": "000", "Discount": "000 CFU/lb Minimum", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "(Lactobacillus acidophilus", "Price": " Bifidobacterium animalis", "Discount": " Lactobacillus reuteri)   *Not recognized as an essential nutrient by the AAFCO Dog Food Nutrient Profile.", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "**Contains a source of live (viable)", "Price": " naturally occurring microorganisms.   Calorie Content", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher Certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Whole Bean", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$11.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Soft & Chewy Granola Bars, 0.85 oz, 64-count", "Currency": "$", "Feature": "Soft & Chewy Bars   Whole Rolled Oats   No Artificial Flavors or Colors   Kosher   Made With Real Chocolate Chips", "Product Description": "Soft & Chewy BarsWhole Rolled OatsSemisweet Chocolate ChipsNo Artificial Flavors or Colors100 Calories per Bar64-count0.85 oz barsTotal Net Weight: 54.4 oz"}, {"Sub Category": "12-count", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "11 fl oz cans", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Milky Way", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$9.79 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Ultra Shine Liquid Dish Soap, Fresh, 90 fl oz", "Currency": "$", "Feature": "Fresh   Odor Eliminating   90 Total fl. oz.", "Product Description": "Platinum performance"}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$14.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Fancy Whole Cashews, 2.5 lbs", "Currency": "$", "Feature": "Fancy Whole Cashews with Sea Salt   Kosher   Premium Quality   40 oz", "Product Description": "40 oz"}, {"Sub Category": "Region: Latin-America\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Imported from Italy", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$20.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Extra-Large Absorbent Pads, 30 in L X 23 in W, 100-count", "Currency": "$", "Feature": "Poly backing protects against leaks   Locks in wetness with quilted top layer   Round the clock odor control   Quick absorption reduces splash and tracking   Use for training, bedding, messy jobs", "Product Description": "100-count30 in L x 23 in W pads Made in the USA"}, {"Sub Category": "100% Grade A", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Antioxidants: Guaranteed levels of vitamin E and selenium work together to support your dog's healthy lifestyle.", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "L-Carnitine* 100mg/kg Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "DHA (Docosahexaenoic Acid)   0.05% Minimum", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Fragrance free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Net Weight 56 oz.\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$10.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature, Bacon Crumbles, 20 oz", "Currency": "$", "Feature": "Crumbled Bacon   100% Real Bacon   Naturally Smoked   Made In The USA   Resealable Pouch", "Product Description": "Net Weight 20 oz."}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$38.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Reynolds Foodservice Foil HD, 18 in x 500 ft", "Currency": "$", "Feature": "\"Premium Quality   18\"\" x 500' Roll   750 Total Square Feet   Heavy Duty Foil\"", "Product Description": "Kirkland Signature Reynolds Heavy Duty Foodservice Aluminum Foil takes on the heat in your commercial kitchen with its highly durable, superior strength construction keeping your kitchen running smoothly. This heavy duty aluminum foil handles all the demands of extra high-heat in a commercial kitchen making it perfect for cooking that calls for high-quality performance. Great for restaurants, catering businesses, school cafeterias and small businesses, this aluminum foil roll comes in a sturdy corrugated board container with an integrated metal cutter that helps you easily cut foil to the desired length. Cover large stainless steel pans with this aluminum roll to help keep foods warm. Use this cooking foil to line your pans, so they stay looking like new for longer. Make foil packets for grilling and roasting foods. Store foods in the fridge or freezer with this heavy duty foil that withstands extreme cold. Wrap leftovers and store prepped foods using this aluminum foil wrap. Cleanup is much faster and easier when you use disposable aluminum foil. Kirkland Signature Reynolds Heavy Duty Foodservice Aluminum Foil is indispensable when it comes to mealtime prep and storage.This package contains Kirkland Signature Reynolds Heavy Duty Foodservice Aluminum Foil roll measuring 500 feet long by 18 inches wide (750 square feet total)This heavy duty aluminum foil offers superior strength and is made for use in commercial kitchens, restaurants, catering businesses, school cafeterias, and small businessesUse this heavy duty aluminum foil for making packets for the grill and wrapping foods for storage and transportUse Kirkland Signature Reynolds Foodservice aluminum foil to cover large stainless steel pans, store prepped food, or line a pan to cook or roast with easy cleanupWithstands high heat in oven by sealing in moisture and extreme cold by protecting food in freezer"}, {"Sub Category": "Kosher Dairy\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$13.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature, Evaporated Milk, 12 fl oz, 12-Count", "Currency": "$", "Feature": "Kosher   rBST Free   Vitamin D Added   12 fl oz Cans   Net Weight: 144 fl oz", "Product Description": "Made In The USA"}, {"Sub Category": "Organic Applesauce", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "1", "Price": "500 square feet total", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Carton is 100% recyclable\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "384 oz. total", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Total servings: 48", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Vitamin Fortified: vitamin D2", "Price": " calcium", "Discount": " and essential B vitamins", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "WHOLESOME INGREDIENTS - Each dog chew treat contains added vitamins and minerals to promote overall health   Ingredients:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Print protection", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Chupa Chups", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kirkland Signature Grocery", "Price": "$16.49 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Reynolds Foodservice Aluminum Foil, Pre-Cut Single Sheets, 500-count", "Currency": "$", "Feature": "\"Pre-Cut Single Foil Sheets   12\"\" x 10-3/4\"\" Sheet Size   500 Total Sheets   Premium Quality\"", "Product Description": "Kirkland Signature Reynolds Foodservice Aluminum Foil Sheets combine the versatility of aluminum foil with the convenience of pre-cut individual sheets to make food serving and storage easier. These food service foil sheets provide just the right amount of foil to wrap sandwiches, wraps, burritos, burgers and more, so you don't waste materials. Keep menu items hot and fresh when you use this food storage wrap in restaurants, catering operations or school cafeterias. Even home cooks can enjoy the convenience of these pop-up sheets for keeping food warm or wrapping up leftovers. Kirkland Signature Reynolds Foodservice Aluminum Foil Sheets are great for use in food prep, storing leftovers and taking foods on the go. Dispensing is quick and easy thanks to the pop-up design, which lets you grab individual sheets one at a time with one hand. No more wrestling with an aluminum foil roll when you're trying to be efficient. Because these sheets are made from aluminum foil, they easily bend and mold to whatever you're wrapping, and they help shield against moisture, odors and grease to keep everything clean and fresh.This package contains 500 Kirkland Signature Reynolds Foodservice pre-cut pop-up aluminum foil sheets, measuring 12 inches x 10.75 inchesConvenient pre-cut aluminum foil food wrap sheets are great for restaurants, catering operations, school cafeterias or at-home useThese aluminum foil sheets were designed to pop up for quick and easy dispensingKirkland Signature Reynolds Foodservice Foil Sheets are easy to mold around your food to get a tight seal - perfect for wrapping sandwiches and on the go foodsPre-cut aluminum foil wrap provides the perfect amount of foil to cover sandwiches, wraps, burritos, burgers and more"}, {"Sub Category": "38 oz Bottles", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Laundry Detergent & Supplies", "Price": "$28.99 ", "Discount": "After $6 OFF", "Rating": null, "Title": "Tide Pods HE Laundry Detergent Pods, Free & Gentle, 152-count", "Currency": "$", "Feature": "Designed for Sensitive Skin   Hypoallergenic   152-count", "Product Description": "Taking care of sensitive skin doesn\u2019t have to be hard. Each individual pac of Tide PODS Free & Gentle HE Turbo laundry detergent cleans, fights stains, brightens fabrics and is specially designed free of dyes and perfumes. Simply put in one pac for most loads, but use two pacs for large loads and three pacs for extra-large loads. For a simple, worry-free laundry experience that\u2019s gentle on skin, Tide PODS Free & Gentle laundry detergent will keep your family looking and feeling great."}, {"Sub Category": "159 Loads", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Laundry Detergent & Supplies", "Price": "$17.89 ", "Discount": "After $3.60 OFF", "Rating": null, "Title": "Downy Unstopables In-Wash Scent Booster Beads, Fresh, 34 oz", "Currency": "$", "Feature": "Fresh   HE Compatible   34 Total oz   Safe on All Fabrics", "Product Description": "Formulated with Antioxidant Technology to fight odors"}, {"Sub Category": "Safe on all fabrics and in all washing machines", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Washes up to 160 loads", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Earth friendly", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Works in cold water\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Never tested on animals / Vegan", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Laundry Detergent & Supplies", "Price": "$11.99 ", "Discount": "No Discount", "Rating": null, "Title": "Kirkland Signature Fabric Softener Sheets, 250-count, 2-pack", "Currency": "$", "Feature": "Fresh   250 Sheets per Box   2 Boxes   500 Total Sheets   Reduces Static", "Product Description": "250 Sheets per Box"}, {"Sub Category": "Same number of uses as the previous Max Efficiency 11.6lbs. size", "Price": " when used as directed", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Advanced stain removal of grass", "Price": " grease", "Discount": " dirt", "Rating": " wine", "Title": " blood", "Currency": " ink stains", "Feature": " and more   OxiClean Concentrated Max Efficiency Versatile Stain Remover Powder (9.28 lbs.)", "Product Description": " with our new formula"}, {"Sub Category": "The secret of this iconic stain remover is its oxygenated formula. OxiClean\u2019s unique bubbling oxygen formula helps to break down protein bonds and decolorize harsh stains.   OxiClean Stain Remover is a staple in homes across the country since it can be added to any load of laundry and leave it looking cleaning and brighter. It's also popular in businesses as well", "Price": " particularly in restaurants that may need it as a spot treatment on tablecloths and upholstery. OxiClean's signature fresh scent is sure to delight anyone within sniffing range.   \u200b\u200b\"", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Pure natural South American wool from free-range sheep", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Prevents static cling", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$129.99through-$279.99", "Discount": "After $40 - $80 OFF", "Rating": "through", "Title": "Kansas City Steak Company USDA Choice Ribeye Steaks 18 Oz. Each (Available in 4, 8, or 12 Packs)", "Currency": "$", "Feature": "Buy More and Save   Aged Beef up to 28 Days   Choose from 4, 8 or 12 Pack Assortment   Vacuum Sealed and Frozen", "Product Description": "These steaks are cut by Kansas City Steak Company to the same specifications of the steaks you know and love in your local Costco Warehouse. Kansas City Steak Company is a division of National Beef who is one of the suppliers of meat to Costco Wholesale.Each Boneless Ribeye Steak is carved from Kansas City Steak Company\u2019s exquisite Prime Rib Roast - for an unbelievably tender and flavorful meal. The Ribeye is one of the most delicious steaks available, with gorgeous marbling and the mouth-watering aroma of beef at its best. Also known as the Delmonico steak.Each mouthwatering steak is aged up to 28 days for added taste and tenderness then individually vacuum sealed and flash frozen at its peak for your convenience"}, {"Sub Category": "Meat & Seafood", "Price": "$259.99 ", "Discount": "No Discount", "Rating": "No Reviews", "Title": "Lobster With Shell Removed, (9 Oz. Per Pack), 6 Total Packs, 3.44 Lbs. Total", "Currency": "$", "Feature": "9 Oz. Pack, 6 Packs Total, 3.44 Lbs. Total   Lobster with Shell Removed with Flavored Butter Coins in Each Pack   Cook in Pack, Ready in Under 20 Minutes   Ships Uncooked & Frozen", "Product Description": "Due to the perishable nature of this item orders do NOT ship over the weekend. Orders will only ship Monday, Tuesday & Wednesday (orders placed after 11:00 am PST will be processed for shipping the following day) for Wednesday, Thursday, Friday Delivery only.   Enjoy the exquisite taste of succulent lobster without the hassles \u2013 no shells, no mess, no fishy odors, and no special tools required. This full boneless \u201cNaked\u201d Lobster, sourced from the pristine waters of the North Atlantic Ocean, is 100% of the meat from an average 2 lb lobster. Each order includes 6 packs of premium, fully de-shelled lobster meat. Each pack also contains 2 flavored butter coins making for a simple, convenient, and delicious \u201ccook in pack\u201d lobster experience. This gourmet delight takes less than 20 minutes to prepare allowing you to savor the rich flavors of lobster without sacrificing precious time. Ships uncooked and frozen.   Features:   Whole lobster out of the shell (shell removed)"}, {"Sub Category": "Cook in pack \u2013 ready in 18 to 20 minutes", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "3.44 lbs total", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$159.99 ", "Discount": "No Discount", "Rating": "Rated 4.2 out of 5 stars based on 11 reviews.", "Title": "Crescent Foods Halal Hand-Cut Beef, Chicken Combo Pack - 14 Total Packs, 13.5 Lbs. Total", "Currency": "$", "Feature": "Please Check Below for Pack Contents   Certified Hand-Cut Halal", "Product Description": "Features: (Crescent Foods Halal Beef Chicken Combo)"}, {"Sub Category": "Free Range and Certified Humane", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Wild Caught", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Ships Fully Cooked and Frozen", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "(1) (1-1.25 lbs) of Wild Alaskan Weathervane Scallops (20/30)   WE ONLY CARRY WILD & SUSTAINABLE seafood from the best-managed fisheries on the planet. Alaska\u2019s waters provide superior seafood and what better way to try so many of its best options than with the Premium Seafood Variety Box from Alaska Home Pack. Our seafood is processed at our family-owned", "Price": " dockside facility in Juneau", "Discount": " Alaska.   Receive approx. 12 lbs. of Premium Seafood in 6 varieties", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Individually frozen and vacuum-sealed", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Heritage-breed chicken", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Free-ranged on small farms", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Air-chilled for maximum flavor concentration", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "8 (8oz) Gourmet Steak Burgers   Cooking Instructions   Preparation: Keep frozen until ready to use.   CONVENTIONAL OVEN (Thawed): Thaw under refrigeration prior to cooking. Gently compress in plastic wrap to retain shape. Preheat oven to 350\u00b0 F. Place on baking pan and top with butter", "Price": " lemon and/or white wine. Bake to internal temperature of 165\u00b0 F (approx. 25-30 min.). Finish by broiling to desired color.   CONVENTIONAL OVEN (Frozen): Preheat oven to 350\u00b0 F. Place on baking pan and top with butter", "Discount": " lemon and/or white wine. Bake to internal temperature of 165\u00b0 F (approx. 33-38 min.). Finish by broiling to desired color.   SAUT\u00c9 (Thawed): Thaw under refrigeration prior to cooking. Gently compress in plastic wrap to retain shape. Over medium heat", "Rating": " saut\u00e9 crab cakes in approx. 1 Tbsp of butter/oil. Cook each side until nicely browned. Add lemon or white wine to taste. Cover and simmer for 4-6 minutes until internal temperature is 165\u00b0 F.\"", "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$219.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 602 reviews.", "Title": "Northwest Fish Colossal Alaskan Wild Dungeness Crab Sections, 10lbs", "Currency": "$", "Feature": "Wild Caught   Fully Cooked   Tender & Succulent   10 lbs.", "Product Description": null}, {"Sub Category": "Delivery is not available in Puerto Rico", "Price": " Hawaii or Alaska   COSTCO MEMBER EXCLUSIVE:", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "PREMIUM FLOUR: Milled from a blend of premium northern winter and spring wheats", "Price": " this flour helps create a supple", "Discount": " delicate dumpling skin.", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Steam dumplings for 11 minutes (until internal temp. reaches 165\u00b0F).", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Jambon de Bayonne", "Price": " French Prosciutto (3.5oz pack)", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Andouille Cajun-Style Sausages (12oz)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Black Truffle Butter (3oz)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Steam in 11 minutes\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Choice Grade Beef", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "2 packages / bags of 2 lobster tails (4 tails total)", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Kosher certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Halal certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Thaws quickly in the fridge or water", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Remove from heat and rest", "Price": " covered", "Discount": " for 1 minute. Serve with your favorite sauces and enjoy!   Features:", "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Skin On", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Whether treating yourself or giving as a gift to a lucky recipient", "Price": " these steaks", "Discount": " scallops", "Rating": " and burgers will be sure to amaze. Each steak and burger is individually packaged and vacuum-sealed. Once they are ready to go", "Title": " they are placed in an attractive black and gold box with a unique registration number- presentation fit for the best of the best!", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "MSC Certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "150 Restaurant-quality soup dumplings", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": ".", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$89.99 ", "Discount": "No Discount", "Rating": "Rated 4.2 out of 5 stars based on 56 reviews.", "Title": "Pederson Natural Farms No Sugar Italian Ground Sausage 1 lb, 10-pack", "Currency": "$", "Feature": "No Sugar Italian Ground Sausage   (10) 1 lb Packs   Gluten and Lactose Free   Keto and Paleo friendly, Whole30 Approved   Ships Uncooked & Frozen", "Product Description": "Like the rest of their product line, Pederson\u2019s Natural Farms Italian ground sausage checks every box when it comes to health-conscious and humane protein production. This Italian ground sausage fits the bill, whether you\u2019re putting it on pizza, in a pasta, or spicing up a perfectly balanced omelet. Pederson\u2019s Italian ground sausage is minimally processed and infused with just the right amount of seasoning, without adding any sugar or artificial ingredients. It\u2019ll cook up with a distinctive and characteristic Italian taste, yet that flavor profile strikes a balance with enough nuance to not overpower the rest of your dish. You\u2019ll know it once you try it. If you\u2019ve had Pederson's Natural Farms products in the past, you know they each set themselves apart from the competition in their own way. They make the best, better. Contain only ingredients found in nature and are free of any added sugars making them Keto friendly, Paleo friendly, and Whole30 Approved."}, {"Sub Category": "Meat & Seafood", "Price": "$129.99 ", "Discount": "No Discount", "Rating": "Rated 4 out of 5 stars based on 41 reviews.", "Title": "Grizzly Salmon Tartare with Citrus Marinade, (14/4 Oz Packs), 14 Total Packs, Total 3.5 Lbs.", "Currency": "$", "Feature": "14x, 4oz packs of Salmon Tartare   Citrus Marinade Included   Cubed Atlantic Salmon   Ships Uncooked & Frozen", "Product Description": "Grizzly\u2019s salmon Tartare is individually vacuum packed with each pack containing 120g of cubed Sashimi grade Atlantic salmon.The salmon is from sustainably sourced.The individual Salmon cube bags after thawing are ready to be lightly mixed with the provided matching individual cup of Citrus marinade (20ml).You can also add your own personal touch to your tartare by adding for example avocado, shallots or dried nuts. Be creative and impress your guests with your creations!State-of-the-art equipment, handling and temperature controlled production methods ensure all products to be of Sashimi quality and grade.tartarThe Citrus marinade was developed through time and our Executive chefs collaboration with Laval University in Quebec City, Canada.It is made with natural ingredients: lime juice, lime oil, chives and orange oil with a light and refreshing taste.Thawing instructions:FISH: Remove the salmon package from the main bag, perforate the packaging and leave in the refrigerator for about 6 to 7 hours.Quick thaw: Remove the salmon package from the main bag and submerge in cold water for 15 minutes.Do not thaw Salmon in the microwave, in hot water or at room temperature. Eat within 24 hours after thawing or keep frozen for maximum 18 months.For MARINADE: Thaw the frozen marinade cup at room temperature for 15 min before mixing."}, {"Sub Category": "Ground from rib meat", "Price": " these Short Rib Burgers are a treat that are as easy to make as they are to enjoy. Juicy", "Discount": " tender and delicious", "Rating": " they\u2019re perfect to have on hand when you\u2019re ready to fire up your grill. 80% Lean", "Title": " 20% Fat.   Wagyu Beef Burger: (12) 5.3 oz Burgers", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$269.99 ", "Discount": "No Discount", "Rating": "Rated 4.6 out of 5 stars based on 41 reviews.", "Title": "Sesame Crusted Ahi Tuna Steaks, 18 Total Packs, 1 Case Totaling 12 Lbs.", "Currency": "$", "Feature": "Ships Frozen   Total 12 Lb. Case, 18 Packs, 36 Pieces   18 Individually Sealed in Skin Pack Packaging Average 5.35 Oz./Piece   MSC (Marine Stewardship Council) Certified", "Product Description": "This hearty fish, also known as yellowfin tuna, has a mild taste and firm texture. Each ahi tuna steak is crusted with sesame seeds and is boneless and skinless. Sesame crusted ahi tuna steaks are a great source of protein. They can be used in a range of simple to cook dishes including in poke, as a main steak (seared or grilled), or sliced onto a salad."}, {"Sub Category": "Avg 5.35 Oz Per Steak", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "MSC (Marine Stewardship Council) certified", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "- Product temperature should be verified with a calibrated thermometer at 40F or below", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "- Gluten free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Great color and flavor", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "10 lbs. total\"", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$119.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 26 reviews.", "Title": "Key West Pink 16/20 Gulf Shrimp Headless Shell-On (3/2Lb Per Bag), Total 3 Packs, 6 Lbs. Total", "Currency": "$", "Feature": "3 x 2Lb. Bags   16-20 Shrimp Per Lb.   32-40 Shrimp Per Bag   Ships Frozen   Wild-Caught and Packed in the USA", "Product Description": "Certified Wild Key West Pink Shrimp are caught in the waters around Key West, Florida. These shrimp have an unrivalled flavor that comes from the clean Gulf Stream waters they call home. The history of this fishery is as unique as the flavor. In the 1940\u2019s fisherman discovered large stocks of Pink shrimp in the waters just off Key West. Word soon travelled leading to a shrimping boom where boats came from as far as Texas and the Carolina\u2019s to harvest \u201cPink Gold.\u201d We hope you enjoy the rich flavor of the Gulf\u2019s greatest treasure \u2013 Key West Pink Shrimp!   The shrimp are frozen on board to ensure peak flavor. Minimally processed, shell-on presentation is perfect for \u201cpeel & eat\u201d. No added preservatives or chemicals. These premium shrimp have a fresh flavor that only the ocean provides."}, {"Sub Category": "Features:", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Ships UPS Next Day Air (Included)\"", "Price": "Authentic Wagyu\u2019s exclusive Japanese A5 Chuck Roll Bulgogi Styles Sample Pack is perfect for any meat-loving family searching for a new and fun foodie experience! The Japanese A5 Wagyu Chuck roll is in itself a unique cut of beef. Being cut into Bulgogi Slices makes this product one of a kind. Authentic Wagyu\u2019s Bulgogi is filled with the sweet flavor of the Japanese A5 Wagyu and its delicate marbling. This is a perfect cut of meat to consume with your family for an unforgettable, fun experience! The Bulgogi is even more thin, sliced into 2-3mm pieces, it is easy to cook with vegetables which can be made for a healthy, delicious meal! Features:(6) 0.5 lb Trays of Sliced Chuck Roll Bulgogi Style2-3mm slices Ships Uncooked and FrozenShips UPS Next Day Air", "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$999.99 ", "Discount": "No Discount", "Rating": "Rated 4.5 out of 5 stars based on 36 reviews.", "Title": "Japanese Wagyu Tenderloin Roast, A5 Grade, 6 lbs", "Currency": "$", "Feature": "(1) A5 Grade, 6 lb Tenderloin Roast   Authentic Japanese Wagyu Beef", "Product Description": null}, {"Sub Category": "1/4 of the fat content of beef", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Antibiotic Free", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$129.99 ", "Discount": "No Discount", "Rating": "Rated 4.7 out of 5 stars based on 93 reviews.", "Title": "Northfork Bison Trio of Ground Meats, Total 9 Packs, 9 Lbs. Total", "Currency": "$", "Feature": "1 lb Bricks of Ground Meat, 9 lbs Total   Bison, Elk, and Wild Boar   No Added Additives, Chemicals or Hormones   Healthy Alternative For Beef   Ships Uncooked & Frozen", "Product Description": "This pack includes:   3x - 1 lb brick of Ground Bison"}, {"Sub Category": "Lean meat", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Poke", "Price": " which rhymes with okay", "Discount": " is a famous raw fish salad from Hawaii that has been gaining fans around the world. This quick and easy one-bowl meal is made with flexible ingredients so that each bowl can be tailored to individual tastes. Raw tuna is the crowning glory of any poke bowl", "Rating": " and only the best quality will do", "Title": " just as with sashimi.", "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Pin Bones removed", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "25 portions", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Individually frozen and vacuum-sealed", "Price": null, "Discount": null, "Rating": null, "Title": null, "Currency": null, "Feature": null, "Product Description": null}, {"Sub Category": "Meat & Seafood", "Price": "$199.99 ", "Discount": "No Discount", "Rating": "No Reviews", "Title": "Lobster Claws & Arms, Sustainable Wild Caught, North Atlantic, 24-40 Claws & Arms (3-5 Lb. Per.), Total 8Lb. Case", "Currency": "$", "Feature": "Sustainable, Wild Caught in Cold Waters of the North Atlantic   Fully Cooked, Scored and Flash Frozen for Freshness   Ships Frozen   24-40 Claws & Arms (3-5 lb./per.)   Total Net Weight: 8 lbs.", "Product Description": "Harvested from pristine North Atlantic coastal waters, our delicious premium lobster is wild-caught and frozen at the peak of sweetness. With a fresh-from-the-sea taste in your own home, our scored lobster claws & arms have absolutely no preservatives. Easy to thaw and prepare, East Coast Seafood\u2019s scored lobster claws & arms are a perfect way to enjoy surf and turf or a great appetizer any day of the week."}], "datacache": 0, "originalcount": 7420, "samplecount": 747, "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": "{}"}}]